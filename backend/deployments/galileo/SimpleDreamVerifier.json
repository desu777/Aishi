{
  "address": "0x7E40d1f83c07f89F338A71f002c7C4637C741B8b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "proofs",
          "type": "bytes[]"
        }
      ],
      "name": "verifyPreimage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "dataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            }
          ],
          "internalType": "struct PreimageProofOutput[]",
          "name": "outputs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "proofs",
          "type": "bytes[]"
        }
      ],
      "name": "verifyTransferValidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "oldDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "newDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "pubKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes16",
              "name": "sealedKey",
              "type": "bytes16"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            }
          ],
          "internalType": "struct TransferValidityProofOutput[]",
          "name": "outputs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f8de1a04c946f36802fdbaf2675733a130bb296c5a0e26f62f210bb69d646b3",
  "receipt": {
    "to": null,
    "from": "0x232CA04565A7aAffff9b715D88562E48715e9185",
    "contractAddress": "0x7E40d1f83c07f89F338A71f002c7C4637C741B8b",
    "transactionIndex": 9,
    "gasUsed": "464692",
    "logsBloom": "0x
    "blockHash": "0xb527092308ce730c5a1fe53333fe34d9276428b16b5f91bcf5e9d7a8c795fd0f",
    "transactionHash": "0x4f8de1a04c946f36802fdbaf2675733a130bb296c5a0e26f62f210bb69d646b3",
    "logs": [],
    "blockNumber": 3299845,
    "cumulativeGasUsed": "911282",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "47931c2ae3a54cc064fbfba941e45fd8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"proofs\",\"type\":\"bytes[]\"}],\"name\":\"verifyPreimage\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"internalType\":\"struct PreimageProofOutput[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"proofs\",\"type\":\"bytes[]\"}],\"name\":\"verifyTransferValidity\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"oldDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes16\",\"name\":\"sealedKey\",\"type\":\"bytes16\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"internalType\":\"struct TransferValidityProofOutput[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"In production, this would be replaced with proper TEE or ZKP verification\",\"kind\":\"dev\",\"methods\":{\"verifyPreimage(bytes[])\":{\"params\":{\"proofs\":\"Array of data hashes to verify\"},\"returns\":{\"outputs\":\"Array of verification results\"}},\"verifyTransferValidity(bytes[])\":{\"params\":{\"proofs\":\"Array of transfer proofs\"},\"returns\":{\"outputs\":\"Array of transfer verification results\"}}},\"title\":\"SimpleDreamVerifier - Simplified verifier for Dreamscape testing\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verifyPreimage(bytes[])\":{\"notice\":\"Verify preimage of data (simplified for testing)\"},\"verifyTransferValidity(bytes[])\":{\"notice\":\"Verify data transfer validity (simplified for testing)\"}},\"notice\":\"This is a simplified verifier that accepts all proofs for testing purposes\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleDreamVerifier.sol\":\"SimpleDreamVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleDreamVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IERC7857DataVerifier.sol\\\";\\n\\n/// @title SimpleDreamVerifier - Simplified verifier for Dreamscape testing\\n/// @notice This is a simplified verifier that accepts all proofs for testing purposes\\n/// @dev In production, this would be replaced with proper TEE or ZKP verification\\ncontract SimpleDreamVerifier is IERC7857DataVerifier {\\n    \\n    /// @notice Verify preimage of data (simplified for testing)\\n    /// @param proofs Array of data hashes to verify\\n    /// @return outputs Array of verification results\\n    function verifyPreimage(\\n        bytes[] calldata proofs\\n    ) external pure override returns (PreimageProofOutput[] memory outputs) {\\n        outputs = new PreimageProofOutput[](proofs.length);\\n        \\n        for (uint256 i = 0; i < proofs.length; i++) {\\n            require(proofs[i].length == 32, \\\"Invalid data hash length\\\");\\n            bytes32 dataHash = bytes32(proofs[i]);\\n            \\n            // Simplified: accept all valid-length hashes\\n            outputs[i] = PreimageProofOutput({\\n                dataHash: dataHash,\\n                isValid: true\\n            });\\n        }\\n        \\n        return outputs;\\n    }\\n\\n    /// @notice Verify data transfer validity (simplified for testing)\\n    /// @param proofs Array of transfer proofs\\n    /// @return outputs Array of transfer verification results\\n    function verifyTransferValidity(\\n        bytes[] calldata proofs\\n    ) external pure override returns (TransferValidityProofOutput[] memory outputs) {\\n        outputs = new TransferValidityProofOutput[](proofs.length);\\n        \\n        for (uint256 i = 0; i < proofs.length; i++) {\\n            // Expect 144 bytes: oldHash(32) + newHash(32) + pubKey(64) + sealedKey(16)\\n            require(proofs[i].length == 144, \\\"Invalid proof length\\\");\\n            \\n            bytes32 oldHash = bytes32(proofs[i][0:32]);\\n            bytes32 newHash = bytes32(proofs[i][32:64]);\\n            bytes memory pubKey = proofs[i][64:128];\\n            bytes16 sealedKey = bytes16(proofs[i][128:144]);\\n            \\n            // Simplified: accept all properly formatted proofs\\n            outputs[i] = TransferValidityProofOutput({\\n                oldDataHash: oldHash,\\n                newDataHash: newHash,\\n                pubKey: pubKey,\\n                sealedKey: sealedKey,\\n                isValid: true\\n            });\\n        }\\n        \\n        return outputs;\\n    }\\n} \",\"keccak256\":\"0x0ebfcdae47a974416b7d27341b30a0ae6e226fa756bdc0afa4dacaa2ce9a925e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC7857DataVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nstruct PreimageProofOutput {\\n    bytes32 dataHash;\\n    bool isValid;\\n}\\n\\nstruct TransferValidityProofOutput {\\n    bytes32 oldDataHash;\\n    bytes32 newDataHash;\\n    bytes pubKey;\\n    bytes16 sealedKey;\\n    bool isValid;\\n}\\n\\ninterface IERC7857DataVerifier {\\n    /// @notice Verify preimage of data\\n    /// @param proofs Proof of data ownership\\n    /// @return Output of the preimage proof verification\\n    function verifyPreimage(\\n        bytes[] calldata proofs\\n    ) external view returns (PreimageProofOutput[] memory);\\n\\n    /// @notice Verify data transfer validity\\n    /// @param proofs Proof of data transfer validity\\n    /// @return Output of the transfer validity proof verification\\n    function verifyTransferValidity(\\n        bytes[] calldata proofs\\n    ) external view returns (TransferValidityProofOutput[] memory);\\n} \",\"keccak256\":\"0x78406bba1f9f687ee4e9fce1ce7391a3c9f94029c2e1a09f376e45f41cb3cf58\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610771806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806393c2eda61461003b578063c2a93e3714610064575b600080fd5b61004e61004936600461047a565b610084565b60405161005b91906104ef565b60405180910390f35b61007761007236600461047a565b61031d565b60405161005b91906105d1565b60608167ffffffffffffffff81111561009f5761009f610622565b6040519080825280602002602001820160405280156100f957816020015b6040805160a081018252600080825260208083018290526060938301849052928201819052608082015282526000199092019101816100bd5790505b50905060005b828110156103155783838281811061011957610119610638565b905060200281019061012b919061064e565b90506090146101785760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b60448201526064015b60405180910390fd5b600084848381811061018c5761018c610638565b905060200281019061019e919061064e565b6101ad9160209160009161069c565b6101b6916106c6565b905060008585848181106101cc576101cc610638565b90506020028101906101de919061064e565b6101ed9160409160209161069c565b6101f6916106c6565b9050600086868581811061020c5761020c610638565b905060200281019061021e919061064e565b61022d9160809160409161069c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394508a925089915087905081811061027857610278610638565b905060200281019061028a919061064e565b6102999160909160809161069c565b6102a2916106e4565b90506040518060a00160405280858152602001848152602001838152602001826fffffffffffffffffffffffffffffffff19168152602001600115158152508686815181106102f3576102f3610638565b602002602001018190525050505050808061030d90610714565b9150506100ff565b505b92915050565b60608167ffffffffffffffff81111561033857610338610622565b60405190808252806020026020018201604052801561037d57816020015b60408051808201909152600080825260208201528152602001906001900390816103565790505b50905060005b828110156103155783838281811061039d5761039d610638565b90506020028101906103af919061064e565b90506020146104005760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420646174612068617368206c656e6774680000000000000000604482015260640161016f565b600084848381811061041457610414610638565b9050602002810190610426919061064e565b61042f916106c6565b905060405180604001604052808281526020016001151581525083838151811061045b5761045b610638565b602002602001018190525050808061047290610714565b915050610383565b6000806020838503121561048d57600080fd5b823567ffffffffffffffff808211156104a557600080fd5b818501915085601f8301126104b957600080fd5b8135818111156104c857600080fd5b8660208260051b85010111156104dd57600080fd5b60209290920196919550909350505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156105c257603f198a8503018652825160a081518652898201518a87015288820151818a880152805180838901528592505b8083101561056a578183018c015188840160c00152918b019161054c565b60c092508583828a0101526060915081840151610592838a01826001600160801b0319169052565b5060809384015180151589860152939150988b0198601f01601f1916969096010194505091870191600101610517565b50919998505050505050505050565b602080825282518282018190526000919060409081850190868401855b828110156106155781518051855286015115158685015292840192908501906001016105ee565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261066557600080fd5b83018035915067ffffffffffffffff82111561068057600080fd5b60200191503681900382131561069557600080fd5b9250929050565b600080858511156106ac57600080fd5b838611156106b957600080fd5b5050820193919092039150565b8035602083101561031757600019602084900360031b1b1692915050565b6001600160801b0319813581811691601085101561070c5780818660100360031b1b83161692505b505092915050565b60006001820161073457634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212205124a0f2ffe6afc69b39a2e094c3fa8a81d2b8d1c79b861fa777ece8d8b5ff5b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806393c2eda61461003b578063c2a93e3714610064575b600080fd5b61004e61004936600461047a565b610084565b60405161005b91906104ef565b60405180910390f35b61007761007236600461047a565b61031d565b60405161005b91906105d1565b60608167ffffffffffffffff81111561009f5761009f610622565b6040519080825280602002602001820160405280156100f957816020015b6040805160a081018252600080825260208083018290526060938301849052928201819052608082015282526000199092019101816100bd5790505b50905060005b828110156103155783838281811061011957610119610638565b905060200281019061012b919061064e565b90506090146101785760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b60448201526064015b60405180910390fd5b600084848381811061018c5761018c610638565b905060200281019061019e919061064e565b6101ad9160209160009161069c565b6101b6916106c6565b905060008585848181106101cc576101cc610638565b90506020028101906101de919061064e565b6101ed9160409160209161069c565b6101f6916106c6565b9050600086868581811061020c5761020c610638565b905060200281019061021e919061064e565b61022d9160809160409161069c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394508a925089915087905081811061027857610278610638565b905060200281019061028a919061064e565b6102999160909160809161069c565b6102a2916106e4565b90506040518060a00160405280858152602001848152602001838152602001826fffffffffffffffffffffffffffffffff19168152602001600115158152508686815181106102f3576102f3610638565b602002602001018190525050505050808061030d90610714565b9150506100ff565b505b92915050565b60608167ffffffffffffffff81111561033857610338610622565b60405190808252806020026020018201604052801561037d57816020015b60408051808201909152600080825260208201528152602001906001900390816103565790505b50905060005b828110156103155783838281811061039d5761039d610638565b90506020028101906103af919061064e565b90506020146104005760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420646174612068617368206c656e6774680000000000000000604482015260640161016f565b600084848381811061041457610414610638565b9050602002810190610426919061064e565b61042f916106c6565b905060405180604001604052808281526020016001151581525083838151811061045b5761045b610638565b602002602001018190525050808061047290610714565b915050610383565b6000806020838503121561048d57600080fd5b823567ffffffffffffffff808211156104a557600080fd5b818501915085601f8301126104b957600080fd5b8135818111156104c857600080fd5b8660208260051b85010111156104dd57600080fd5b60209290920196919550909350505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156105c257603f198a8503018652825160a081518652898201518a87015288820151818a880152805180838901528592505b8083101561056a578183018c015188840160c00152918b019161054c565b60c092508583828a0101526060915081840151610592838a01826001600160801b0319169052565b5060809384015180151589860152939150988b0198601f01601f1916969096010194505091870191600101610517565b50919998505050505050505050565b602080825282518282018190526000919060409081850190868401855b828110156106155781518051855286015115158685015292840192908501906001016105ee565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261066557600080fd5b83018035915067ffffffffffffffff82111561068057600080fd5b60200191503681900382131561069557600080fd5b9250929050565b600080858511156106ac57600080fd5b838611156106b957600080fd5b5050820193919092039150565b8035602083101561031757600019602084900360031b1b1692915050565b6001600160801b0319813581811691601085101561070c5780818660100360031b1b83161692505b505092915050565b60006001820161073457634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212205124a0f2ffe6afc69b39a2e094c3fa8a81d2b8d1c79b861fa777ece8d8b5ff5b64736f6c63430008140033",
  "devdoc": {
    "details": "In production, this would be replaced with proper TEE or ZKP verification",
    "kind": "dev",
    "methods": {
      "verifyPreimage(bytes[])": {
        "params": {
          "proofs": "Array of data hashes to verify"
        },
        "returns": {
          "outputs": "Array of verification results"
        }
      },
      "verifyTransferValidity(bytes[])": {
        "params": {
          "proofs": "Array of transfer proofs"
        },
        "returns": {
          "outputs": "Array of transfer verification results"
        }
      }
    },
    "title": "SimpleDreamVerifier - Simplified verifier for Dreamscape testing",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "verifyPreimage(bytes[])": {
        "notice": "Verify preimage of data (simplified for testing)"
      },
      "verifyTransferValidity(bytes[])": {
        "notice": "Verify data transfer validity (simplified for testing)"
      }
    },
    "notice": "This is a simplified verifier that accepts all proofs for testing purposes",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0x8Df60476376F244b77d19620179733310CfEFf5C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "conversationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum IPersonalityEvolution.ContextType",
          "name": "contextType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversationCount",
          "type": "uint256"
        }
      ],
      "name": "AgentConversation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLevel",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLevel",
          "type": "uint256"
        }
      ],
      "name": "AgentEvolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "AuthorizedUsage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "Cloned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "period",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonus",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "specialReward",
          "type": "string"
        }
      ],
      "name": "ConsolidationCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "month",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "consolidationType",
          "type": "string"
        }
      ],
      "name": "ConsolidationNeeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dreamHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "intelligenceLevel",
          "type": "uint256"
        }
      ],
      "name": "DreamProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "achievement",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalInteractions",
          "type": "uint256"
        }
      ],
      "name": "MemoryMilestone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memoryType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "oldHash",
          "type": "bytes32"
        }
      ],
      "name": "MemoryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "milestone",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "MilestoneUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "_dataHashes",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "_dataDescriptions",
          "type": "string[]"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "creativity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "analytical",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "empathy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "intuition",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "resilience",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "curiosity",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dominantMood",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastDreamDate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IPersonalityEvolution.PersonalityTraits",
          "name": "traits",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dreamCount",
          "type": "uint256"
        }
      ],
      "name": "PersonalityActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dreamHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "creativity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "analytical",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "empathy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "intuition",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "resilience",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "curiosity",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dominantMood",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastDreamDate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IPersonalityEvolution.PersonalityTraits",
          "name": "newPersonality",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int8",
              "name": "creativityChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "analyticalChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "empathyChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "intuitionChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "resilienceChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "curiosityChange",
              "type": "int8"
            },
            {
              "internalType": "string",
              "name": "moodShift",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "evolutionWeight",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IPersonalityEvolution.PersonalityImpact",
          "name": "impact",
          "type": "tuple"
        }
      ],
      "name": "PersonalityEvolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "milestone",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "traitValue",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "traitName",
          "type": "string"
        }
      ],
      "name": "PersonalityMilestone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes16[]",
          "name": "_sealedKeys",
          "type": "bytes16[]"
        }
      ],
      "name": "PublishedSealedKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newStyle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "dominantTraits",
          "type": "string[]"
        }
      ],
      "name": "ResponseStyleEvolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldStyle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newStyle",
          "type": "string"
        }
      ],
      "name": "ResponseStyleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "Transferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        }
      ],
      "name": "YearlyReflectionAvailable",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_AGENTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERIFIER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agentMemories",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "memoryCoreHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "currentDreamDailyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "currentConvDailyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "lastDreamMonthlyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "lastConvMonthlyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "lastConsolidation",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "currentMonth",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "currentYear",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agentPersonalities",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "creativity",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "analytical",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "empathy",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "intuition",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "resilience",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "curiosity",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "dominantMood",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "lastDreamDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agents",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intelligenceLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dreamCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "conversationCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "personalityInitialized",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalEvolutions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastEvolutionDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "authorizeUsage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "authorizedUsersOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "canProcessDreamToday",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canProcess",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "dreamMonthlyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "convMonthlyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "month",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        }
      ],
      "name": "consolidateMonth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "consolidationStreak",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "emergencyAuthorizeUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "emergencyTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAgentMemory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "memoryCoreHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "currentDreamDailyHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "currentConvDailyHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "lastDreamMonthlyHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "lastConvMonthlyHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "lastConsolidation",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "currentMonth",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "currentYear",
              "type": "uint16"
            }
          ],
          "internalType": "struct IPersonalityEvolution.AgentMemory",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getConsolidationReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "streakBonus",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "earlyBirdBonus",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getEvolutionStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalEvolutions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "evolutionRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastEvolution",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMemoryAccess",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "monthsAccessible",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "memoryDepth",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPersonalityTraits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "creativity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "analytical",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "empathy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "intuition",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "resilience",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "curiosity",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dominantMood",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastDreamDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPersonalityEvolution.PersonalityTraits",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "hasMilestone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "achieved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "milestones",
      "outputs": [
        {
          "internalType": "bool",
          "name": "achieved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "achievedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "traitValue",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "proofs",
          "type": "bytes[]"
        },
        {
          "internalType": "string[]",
          "name": "descriptions",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintAgent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nameExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "needsConsolidation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isNeeded",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "currentMonth",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "currentYear",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ownerToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "intelligenceBonus",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "specialMilestone",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "yearlyReflection",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "dreamHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "dreamAnalysisHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "int8",
              "name": "creativityChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "analyticalChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "empathyChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "intuitionChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "resilienceChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "curiosityChange",
              "type": "int8"
            },
            {
              "internalType": "string",
              "name": "moodShift",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "evolutionWeight",
              "type": "uint8"
            }
          ],
          "internalType": "struct IPersonalityEvolution.PersonalityImpact",
          "name": "impact",
          "type": "tuple"
        }
      ],
      "name": "processDailyDream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "conversationHash",
          "type": "bytes32"
        },
        {
          "internalType": "enum IPersonalityEvolution.ContextType",
          "name": "contextType",
          "type": "uint8"
        }
      ],
      "name": "recordConversation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "responseStyles",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAgents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeesCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "newHash",
          "type": "bytes32"
        }
      ],
      "name": "updateConversationMemory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "newHash",
          "type": "bytes32"
        }
      ],
      "name": "updateDreamMemory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "newHash",
          "type": "bytes32"
        }
      ],
      "name": "updateMemoryCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IERC7857DataVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3cb569dc6b56543e78ce33e7132f4bb6f465c483f0714340f58478082ea32bec",
  "receipt": {
    "to": null,
    "from": "0x232CA04565A7aAffff9b715D88562E48715e9185",
    "contractAddress": "0x8Df60476376F244b77d19620179733310CfEFf5C",
    "transactionIndex": 13,
    "gasUsed": "4978562",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000002000000000000000000000000000000002000000000000000000080000000000000000080000000000000000020000000002000000000000000000c000000000000000000000000000000000000010000800000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000100000004100002000000020000000000000000000000000000000000000000400000000000000000000000000",
    "blockHash": "0x59047645c914e7b719f36df263540516b3f43ee666469e983047d47be8831772",
    "transactionHash": "0x3cb569dc6b56543e78ce33e7132f4bb6f465c483f0714340f58478082ea32bec",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 3607883,
        "transactionHash": "0x3cb569dc6b56543e78ce33e7132f4bb6f465c483f0714340f58478082ea32bec",
        "address": "0x8Df60476376F244b77d19620179733310CfEFf5C",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x59047645c914e7b719f36df263540516b3f43ee666469e983047d47be8831772"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 3607883,
        "transactionHash": "0x3cb569dc6b56543e78ce33e7132f4bb6f465c483f0714340f58478082ea32bec",
        "address": "0x8Df60476376F244b77d19620179733310CfEFf5C",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x59047645c914e7b719f36df263540516b3f43ee666469e983047d47be8831772"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 3607883,
        "transactionHash": "0x3cb569dc6b56543e78ce33e7132f4bb6f465c483f0714340f58478082ea32bec",
        "address": "0x8Df60476376F244b77d19620179733310CfEFf5C",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0ce23c3e399818cfee81a7ab0880f714e53d7672b08df0fa62f2843416e1ea09",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x59047645c914e7b719f36df263540516b3f43ee666469e983047d47be8831772"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 3607883,
        "transactionHash": "0x3cb569dc6b56543e78ce33e7132f4bb6f465c483f0714340f58478082ea32bec",
        "address": "0x8Df60476376F244b77d19620179733310CfEFf5C",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x59047645c914e7b719f36df263540516b3f43ee666469e983047d47be8831772"
      }
    ],
    "blockNumber": 3607883,
    "cumulativeGasUsed": "5947844",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3ab9784ac2D04D1f1aAd0B435b61e456d0744cA4",
    "0x0f13e85B575964B8b4b77E37d43A6aE9E354e94C"
  ],
  "numDeployments": 5,
  "solcInputHash": "7ce36f70aefcbd28f89dba26c469ede5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"conversationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IPersonalityEvolution.ContextType\",\"name\":\"contextType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversationCount\",\"type\":\"uint256\"}],\"name\":\"AgentConversation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLevel\",\"type\":\"uint256\"}],\"name\":\"AgentEvolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AuthorizedUsage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Cloned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"period\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"specialReward\",\"type\":\"string\"}],\"name\":\"ConsolidationCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"consolidationType\",\"type\":\"string\"}],\"name\":\"ConsolidationNeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dreamHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intelligenceLevel\",\"type\":\"uint256\"}],\"name\":\"DreamProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"achievement\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInteractions\",\"type\":\"uint256\"}],\"name\":\"MemoryMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memoryType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oldHash\",\"type\":\"bytes32\"}],\"name\":\"MemoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"milestone\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"MilestoneUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"_dataHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_dataDescriptions\",\"type\":\"string[]\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IPersonalityEvolution.PersonalityTraits\",\"name\":\"traits\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dreamCount\",\"type\":\"uint256\"}],\"name\":\"PersonalityActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dreamHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IPersonalityEvolution.PersonalityTraits\",\"name\":\"newPersonality\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"creativityChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"analyticalChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"empathyChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"intuitionChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"resilienceChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"curiosityChange\",\"type\":\"int8\"},{\"internalType\":\"string\",\"name\":\"moodShift\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"evolutionWeight\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IPersonalityEvolution.PersonalityImpact\",\"name\":\"impact\",\"type\":\"tuple\"}],\"name\":\"PersonalityEvolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"milestone\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"traitValue\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"traitName\",\"type\":\"string\"}],\"name\":\"PersonalityMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes16[]\",\"name\":\"_sealedKeys\",\"type\":\"bytes16[]\"}],\"name\":\"PublishedSealedKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newStyle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"dominantTraits\",\"type\":\"string[]\"}],\"name\":\"ResponseStyleEvolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldStyle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newStyle\",\"type\":\"string\"}],\"name\":\"ResponseStyleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"YearlyReflectionAvailable\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AGENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agentMemories\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"memoryCoreHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currentDreamDailyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currentConvDailyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"lastDreamMonthlyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"lastConvMonthlyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastConsolidation\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"currentMonth\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"currentYear\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agentPersonalities\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intelligenceLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dreamCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversationCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"personalityInitialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalEvolutions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEvolutionDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"authorizeUsage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"authorizedUsersOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"canProcessDreamToday\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canProcess\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dreamMonthlyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"convMonthlyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"consolidateMonth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"consolidationStreak\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"emergencyAuthorizeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAgentMemory\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"memoryCoreHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currentDreamDailyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currentConvDailyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"lastDreamMonthlyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"lastConvMonthlyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastConsolidation\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"currentMonth\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"currentYear\",\"type\":\"uint16\"}],\"internalType\":\"struct IPersonalityEvolution.AgentMemory\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getConsolidationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streakBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyBirdBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEvolutionStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEvolutions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"evolutionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEvolution\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMemoryAccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"monthsAccessible\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memoryDepth\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPersonalityTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"internalType\":\"struct IPersonalityEvolution.PersonalityTraits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"hasMilestone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"achieved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"milestones\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"achieved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"achievedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"traitValue\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"proofs\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"descriptions\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAgent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"needsConsolidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isNeeded\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"currentMonth\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"currentYear\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"intelligenceBonus\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"specialMilestone\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"yearlyReflection\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dreamHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dreamAnalysisHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"creativityChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"analyticalChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"empathyChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"intuitionChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"resilienceChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"curiosityChange\",\"type\":\"int8\"},{\"internalType\":\"string\",\"name\":\"moodShift\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"evolutionWeight\",\"type\":\"uint8\"}],\"internalType\":\"struct IPersonalityEvolution.PersonalityImpact\",\"name\":\"impact\",\"type\":\"tuple\"}],\"name\":\"processDailyDream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conversationHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum IPersonalityEvolution.ContextType\",\"name\":\"contextType\",\"type\":\"uint8\"}],\"name\":\"recordConversation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"responseStyles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAgents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"}],\"name\":\"updateConversationMemory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"}],\"name\":\"updateDreamMemory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"}],\"name\":\"updateMemoryCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IERC7857DataVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Designed for direct deployment \\u2013 no upgrade proxy included.  For         upgradability, wrap this logic in a UUPS/Beacon proxy.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"AgentConversation(uint256,bytes32,uint8,uint256)\":{\"details\":\"Emitted when agent has a conversation (without personality evolution)\"},\"AuthorizedUsage(uint256,address)\":{\"details\":\"This emits when a user is authorized to use the data\"},\"Cloned(uint256,uint256,address,address)\":{\"details\":\"This emits when data is cloned\"},\"Minted(uint256,address,address,bytes32[],string[])\":{\"details\":\"This emits when a new functional NFT is minted\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"PersonalityEvolved(uint256,bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,string,uint256),(int8,int8,int8,int8,int8,int8,string,uint8))\":{\"details\":\"Emitted when agent personality evolves from dream processing\"},\"PersonalityMilestone(uint256,string,uint8,string)\":{\"details\":\"Emitted when agent reaches personality milestones\"},\"PublishedSealedKey(address,uint256,bytes16[])\":{\"details\":\"This emits when a sealed key is published\"},\"ResponseStyleEvolved(uint256,string,string[])\":{\"details\":\"Emitted when agent's response style evolves\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transferred(uint256,address,address)\":{\"details\":\"This emits when data is transferred with ownership\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"canProcessDreamToday(uint256)\":{\"params\":{\"tokenId\":\"Agent to check\"},\"returns\":{\"canProcess\":\"True if agent can process a dream today\"}},\"getAgentMemory(uint256)\":{\"params\":{\"tokenId\":\"Agent to query\"},\"returns\":{\"_0\":\"memory Current memory structure\"}},\"getConsolidationReward(uint256)\":{\"params\":{\"tokenId\":\"Agent to check\"},\"returns\":{\"baseReward\":\"Base intelligence reward\",\"earlyBirdBonus\":\"Bonus for early consolidation\",\"streakBonus\":\"Bonus from consolidation streak\",\"totalReward\":\"Total intelligence reward\"}},\"getEvolutionStats(uint256)\":{\"params\":{\"tokenId\":\"Agent to analyze\"},\"returns\":{\"evolutionRate\":\"Rate of personality change\",\"lastEvolution\":\"Timestamp of last evolution\",\"totalEvolutions\":\"Number of personality changes\"}},\"getMemoryAccess(uint256)\":{\"params\":{\"tokenId\":\"Agent to check\"},\"returns\":{\"memoryDepth\":\"Human-readable description\",\"monthsAccessible\":\"Number of months accessible \"}},\"getPersonalityTraits(uint256)\":{\"params\":{\"tokenId\":\"Agent to query\"},\"returns\":{\"_0\":\"Current personality traits\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"mintAgent(bytes[],string[],string,address)\":{\"params\":{\"agentName\":\"Unique display name (\\u226432 bytes)\",\"descriptions\":\"Data descriptions parallel to `proofs`\",\"proofs\":\"Optional ZK\\u2011proof blobs (pass `[]` to skip)\",\"to\":\"Recipient address (must NOT already own an agent)\"}},\"needsConsolidation(uint256)\":{\"params\":{\"tokenId\":\"Agent to check\"},\"returns\":{\"currentMonth\":\"Current month\",\"currentYear\":\"Current year\",\"isNeeded\":\"True if month has changed since last consolidation\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"processDailyDream(uint256,bytes32,bytes32,(int8,int8,int8,int8,int8,int8,string,uint8))\":{\"details\":\"ZK\\u2011verified dream *content* lives off\\u2011chain; contract stores only         hash + counters to keep gas low.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"updateConversationMemory(uint256,bytes32)\":{\"details\":\"Append\\u2011only daily hash for conversations.\"},\"updateDreamMemory(uint256,bytes32)\":{\"details\":\"Append\\u2011only daily hash for dreams; resets automatically on month change.\"}},\"stateVariables\":{\"verifier\":{\"return\":\"The address of the verifier contract\",\"returns\":{\"_0\":\"The address of the verifier contract\"}}},\"title\":\"DreamscapeAgent \\u2013 iNFT with Hierarchical Memory & Personality Evolution\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canProcessDreamToday(uint256)\":{\"notice\":\"Check if agent can process dream today (24h cooldown)\"},\"consolidateMonth(uint256,bytes32,bytes32,uint8,uint16)\":{\"notice\":\"User\\u2011driven monthly consolidation.  Merges daily files off\\u2011chain and         stores the finalised month hash on\\u2011chain, rewarding the agent.\"},\"getAgentMemory(uint256)\":{\"notice\":\"Get agent's hierarchical memory structure\"},\"getConsolidationReward(uint256)\":{\"notice\":\"Get consolidation reward preview\"},\"getEvolutionStats(uint256)\":{\"notice\":\"Get personality evolution statistics\"},\"getMemoryAccess(uint256)\":{\"notice\":\"Get memory access level based on intelligence\"},\"getPersonalityTraits(uint256)\":{\"notice\":\"Get agent's current personality traits\"},\"mintAgent(bytes[],string[],string,address)\":{\"notice\":\"Mint a *blank\\u2011slate* agent.  One per wallet.\"},\"needsConsolidation(uint256)\":{\"notice\":\"Check if consolidation is needed\"},\"processDailyDream(uint256,bytes32,bytes32,(int8,int8,int8,int8,int8,int8,string,uint8))\":{\"notice\":\"Called once per \\u00abdream\\u00bb; every 5th dream triggers evolution.\"},\"recordConversation(uint256,bytes32,uint8)\":{\"notice\":\"Lightweight conversation recording; boosts intelligence every 10th convo.\"},\"updateMemoryCore(uint256,bytes32)\":{\"notice\":\"Stores the yearly \\u00abmemory core\\u00bb hash and grants bonus INT.\"},\"verifier()\":{\"notice\":\"The verifier interface that this NFT uses\"}},\"notice\":\"Single\\u2011per\\u2011wallet autonomous agent that stores memories in a three\\u2011layer         hierarchy (daily \\u2192 monthly \\u2192 yearly) and evolves its personality from         analysed dreams & conversations.         This contract is a *lean* revision: we removed unbounded on\\u2011chain arrays         of raw hashes to save gas and instead rely on off\\u2011chain storage + a         rotating \\u00abcurrent\\u00bb hash per period.  All public getters needed by dApp         remain, but they now return an empty array and are marked *deprecated*.         The contract **still** complies with ERC\\u20117857 by preserving the original         ABI of `mintAgent(...)`; callers MAY pass empty arrays when proofs are         not needed.  Optional ZKP verification can be disabled by setting the         `verifier` address to zero at deployment.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DreamscapeAgent.sol\":\"DreamscapeAgent\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/DreamscapeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/*\\n * \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n *  IMPORTS\\n * \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n *  Interfaces                                                  OpenZeppelin utils\\n * \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n */\\n\\nimport \\\"./interfaces/IERC7857.sol\\\";               // ERC\\u20117857 base interface (iNFT standard)\\nimport \\\"./interfaces/IERC7857DataVerifier.sol\\\";    // Optional: ZK\\u2011proof verifier used at mint\\nimport \\\"./interfaces/IPersonalityEvolution.sol\\\";   // Trait & evolution data\\u2011model\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";  // protects against re\\u2011entrancy\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";   // role\\u2011based admin system\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";         // emergency stop\\n\\n/**\\n * @title  DreamscapeAgent \\u2013 iNFT with Hierarchical Memory & Personality Evolution\\n * @notice Single\\u2011per\\u2011wallet autonomous agent that stores memories in a three\\u2011layer\\n *         hierarchy (daily \\u2192 monthly \\u2192 yearly) and evolves its personality from\\n *         analysed dreams & conversations.\\n *\\n *         This contract is a *lean* revision: we removed unbounded on\\u2011chain arrays\\n *         of raw hashes to save gas and instead rely on off\\u2011chain storage + a\\n *         rotating \\u00abcurrent\\u00bb hash per period.  All public getters needed by dApp\\n *         remain, but they now return an empty array and are marked *deprecated*.\\n *\\n *         The contract **still** complies with ERC\\u20117857 by preserving the original\\n *         ABI of `mintAgent(...)`; callers MAY pass empty arrays when proofs are\\n *         not needed.  Optional ZKP verification can be disabled by setting the\\n *         `verifier` address to zero at deployment.\\n *\\n * @dev    Designed for direct deployment \\u2013 no upgrade proxy included.  For\\n *         upgradability, wrap this logic in a UUPS/Beacon proxy.\\n */\\ncontract DreamscapeAgent is\\n    IERC7857,\\n    IPersonalityEvolution,\\n    ReentrancyGuard,\\n    AccessControl,\\n    Pausable\\n{\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 CONSTANTS \\u2500\\u2500\\u2500\\u2500\\u2500 */\\n\\n    uint256 public constant MAX_AGENTS   = 1_000;      // test\\u2011net cap (adjust for main\\u2011net)\\n    uint256 public constant MINTING_FEE  = 0.1 ether;  // price per agent \\u2013 sent to `treasury`\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 IMMUTABLES \\u2500\\u2500\\u2500\\u2500 */\\n\\n    address public immutable treasury;                  // fee recipient\\n    IERC7857DataVerifier public immutable verifier;     // zero\\u2011address \\u21d2 skip proof checks\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 ROLES \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 */\\n\\n    bytes32 public constant ADMIN_ROLE    = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant VERIFIER_ROLE = keccak256(\\\"VERIFIER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE   = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 STORAGE \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 */\\n\\n    /**\\n     * @dev Core NFT data (no unbounded arrays \\u2013 only counters & flags)\\n     */\\n    struct DreamAgent {\\n        address  owner;            // current NFT owner\\n        string   agentName;        // unique, user\\u2011chosen name (max 32 bytes)\\n        uint256  createdAt;        // block.timestamp at mint\\n        uint256  lastUpdated;      // last on\\u2011chain write (dream, convo, memory\\u2026)\\n\\n        // Access control\\n        address[] authorizedUsers; // external EOAs permitted to operate the agent\\n\\n        // Intelligence & history counters\\n        uint256  intelligenceLevel;\\n        uint256  dreamCount;\\n        uint256  conversationCount;\\n\\n        // Personality evolution meta\\n        bool     personalityInitialized;\\n        uint256  totalEvolutions;\\n        uint256  lastEvolutionDate;\\n        string[] achievedMilestones;\\n    }\\n    \\n    /**\\n     * @dev Milestone record per agent & name (e.g. \\\"memory_master\\\")\\n     */\\n    struct MilestoneData {\\n        bool     achieved;\\n        uint256  achievedAt;\\n        uint8    traitValue; // value that unlocked the milestone (for UI)\\n    }\\n\\n\\n\\n    /**\\n     * @dev Rewards waiting for claim (set during monthly consolidation)\\n     */\\n    struct ConsolidationReward {\\n        uint256 intelligenceBonus;\\n        string  specialMilestone;\\n        bool    yearlyReflection;\\n    }\\n\\n    // \\u2500\\u2500\\u2500 Main mappings \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    mapping(uint256 => DreamAgent)                  public agents;             // tokenId \\u2192 agent data\\n    mapping(string  => bool)                        public nameExists;         // prevents duplicates\\n    mapping(address => uint256)                     public ownerToTokenId;     // \\\"one agent per wallet\\\"\\n\\n    mapping(uint256 => PersonalityTraits)           public agentPersonalities; // traits struct from interface\\n\\n    mapping(uint256 => AgentMemory)                 public agentMemories;      // hierarchical storage\\n    mapping(uint256 => ConsolidationReward)         public pendingRewards;     // waiting after consolidate\\n    mapping(uint256 => uint256)                     public consolidationStreak;// consecutive months consolidated\\n\\n    mapping(uint256 => mapping(string => MilestoneData)) public milestones;    // tokenId \\u2192 name \\u2192 data\\n    mapping(uint256 => string)                      public responseStyles;     // cached style for front\\u2011end\\n\\n    // \\u2500\\u2500\\u2500 Supply counters \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    uint256 public nextTokenId   = 1; // starts at 1 for gas efficient existence checks\\n    uint256 public totalAgents   = 0;\\n    uint256 public totalFeesCollected = 0;\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 EVENTS \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 */\\n\\n    // Core ERC\\u20117857\\n    // \\u2011 Minted / Transferred / AuthorizedUsage inherited from interface\\n\\n    // Dream & personality\\n    event PersonalityActivated  (uint256 indexed tokenId, PersonalityTraits traits, uint256 dreamCount);\\n    event ResponseStyleUpdated  (uint256 indexed tokenId, string oldStyle, string newStyle);\\n    event MilestoneUnlocked     (uint256 indexed tokenId, string milestone, uint8 value);\\n    event AgentEvolved          (uint256 indexed tokenId, uint256 oldLevel, uint256 newLevel);\\n    event DreamProcessed        (uint256 indexed tokenId, bytes32 dreamHash, uint256 intelligenceLevel);\\n\\n    // Hierarchical memory\\n    event MemoryUpdated         (uint256 indexed tokenId, string memoryType, bytes32 newHash, bytes32 oldHash);\\n    event ConsolidationNeeded   (uint256 indexed tokenId, uint8 month, uint16 year, string consolidationType);\\n    event ConsolidationCompleted(uint256 indexed tokenId, string period, uint256 bonus, string specialReward);\\n    event YearlyReflectionAvailable(uint256 indexed tokenId, uint16 year);\\n    event MemoryMilestone       (uint256 indexed tokenId, string achievement, uint256 totalInteractions);\\n\\n    // Economics\\n    event FeePaid               (uint256 indexed tokenId, address indexed payer, uint256 amount);\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 CONSTRUCTOR \\u2500\\u2500\\u2500 */\\n    \\n    constructor(address _verifier, address _treasury) {\\n        require(_treasury != address(0), \\\"treasury = zero addr\\\");\\n        treasury  = _treasury;\\n        verifier  = IERC7857DataVerifier(_verifier); // may be zero \\u2192 proofs disabled\\n\\n        // grant all roles to deployer\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(ADMIN_ROLE,          msg.sender);\\n        _grantRole(VERIFIER_ROLE,       msg.sender);\\n        _grantRole(PAUSER_ROLE,         msg.sender);\\n    }\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 MINT & INITIALISATION \\u2500\\u2500\\u2500\\u2500\\u2500 */\\n\\n    /**\\n     * @notice Mint a *blank\\u2011slate* agent.  One per wallet.\\n     * @param proofs        Optional ZK\\u2011proof blobs (pass `[]` to skip)\\n     * @param descriptions  Data descriptions parallel to `proofs`\\n     * @param agentName     Unique display name (\\u226432 bytes)\\n     * @param to            Recipient address (must NOT already own an agent)\\n     */\\n    function mintAgent(\\n        bytes[]  calldata proofs,\\n        string[] calldata descriptions,\\n        string   memory   agentName,\\n        address  to\\n    ) external payable nonReentrant whenNotPaused returns (uint256 tokenId) {\\n        /* \\u2500\\u2500 basic checks \\u2500\\u2500 */\\n        require(to != address(0),                \\\"invalid to addr\\\");\\n        require(ownerToTokenId[to] == 0,         \\\"wallet already has agent\\\");\\n        require(totalAgents < MAX_AGENTS,        \\\"max supply reached\\\");\\n        require(bytes(agentName).length > 0 && bytes(agentName).length <= 32, \\\"name length\\\");\\n        require(!nameExists[agentName],          \\\"name exists\\\");\\n        require(msg.value >= MINTING_FEE,        \\\"fee < 0.1 OG\\\");\\n\\n        /* \\u2500\\u2500 optional proof verification \\u2500\\u2500 */\\n        bytes32[] memory dataHashes;\\n        if (address(verifier) != address(0)) {\\n            require(descriptions.length == proofs.length, \\\"len mismatch\\\");\\n            PreimageProofOutput[] memory outs = verifier.verifyPreimage(proofs);\\n            dataHashes = new bytes32[](outs.length);\\n            for (uint256 i = 0; i < outs.length; ++i) {\\n                require(outs[i].isValid, \\\"invalid proof\\\");\\n                dataHashes[i] = outs[i].dataHash;\\n            }\\n        }\\n\\n        /* \\u2500\\u2500 name reservation \\u2500\\u2500 */\\n        nameExists[agentName] = true;\\n        \\n        /* \\u2500\\u2500 create agent \\u2500\\u2500 */\\n        tokenId = nextTokenId++;\\n        ownerToTokenId[to] = tokenId;\\n\\n        agents[tokenId] = DreamAgent({\\n            owner:                   to,\\n            agentName:               agentName,\\n            createdAt:               block.timestamp,\\n            lastUpdated:             block.timestamp,\\n            authorizedUsers:         new address[](0),\\n            intelligenceLevel:       1,\\n            dreamCount:              0,\\n            conversationCount:       0,\\n            personalityInitialized:  false,\\n            totalEvolutions:         0,\\n            lastEvolutionDate:       block.timestamp,\\n            achievedMilestones:      new string[](0)\\n        });\\n\\n        /* \\u2500\\u2500 neutral personality stub \\u2500\\u2500 */\\n        agentPersonalities[tokenId] = PersonalityTraits({\\n            creativity:     50,\\n            analytical:     50,\\n            empathy:        50,\\n            intuition:      50,\\n            resilience:     50,\\n            curiosity:      50,\\n            dominantMood:   \\\"neutral\\\",\\n            lastDreamDate:  0\\n        });\\n        responseStyles[tokenId] = \\\"neutral\\\";\\n        \\n        /* \\u2500\\u2500 memory initialisation \\u2500\\u2500 */\\n        agentMemories[tokenId] = AgentMemory({\\n            memoryCoreHash:        bytes32(0),\\n            currentDreamDailyHash: bytes32(0),\\n            currentConvDailyHash:  bytes32(0),\\n            lastDreamMonthlyHash:  bytes32(0),\\n            lastConvMonthlyHash:   bytes32(0),\\n            lastConsolidation:     block.timestamp,\\n            currentMonth:  _currentMonth(),\\n            currentYear:   _currentYear()\\n        });\\n\\n        /* \\u2500\\u2500 economics \\u2500\\u2500 */\\n        totalAgents          += 1;\\n        totalFeesCollected   += MINTING_FEE;\\n\\n        (bool sent, ) = treasury.call{value: MINTING_FEE}(\\\"\\\");\\n        require(sent, \\\"treasury transfer failed\\\");\\n        if (msg.value > MINTING_FEE) {\\n            (bool refund, ) = msg.sender.call{value: msg.value - MINTING_FEE}(\\\"\\\");\\n            require(refund, \\\"refund failed\\\");\\n        }\\n        \\n        /* \\u2500\\u2500 events \\u2500\\u2500 */\\n        emit Minted(tokenId, msg.sender, to, dataHashes, descriptions);\\n        emit FeePaid(tokenId, msg.sender, MINTING_FEE);\\n    }\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 PERSONALITY LOGIC \\u2500\\u2500\\u2500 */\\n\\n    /**\\n     * @notice Called once per \\u00abdream\\u00bb; every 5th dream triggers evolution.\\n     * @dev    ZK\\u2011verified dream *content* lives off\\u2011chain; contract stores only\\n     *         hash + counters to keep gas low.\\n     */\\n    function processDailyDream(\\n        uint256            tokenId,\\n        bytes32            dreamHash,\\n        bytes32            dreamAnalysisHash,\\n        PersonalityImpact  calldata impact\\n    ) external override whenNotPaused onlyOwnerOrAuthorized(tokenId) {\\n        _validatePersonalityImpact(impact);\\n\\n        DreamAgent storage agent = agents[tokenId];\\n        PersonalityTraits storage traits = agentPersonalities[tokenId];\\n\\n        // cooldown \\u2013 first dream is allowed instantly; afterwards 24h gap\\n        require(\\n            traits.lastDreamDate == 0 || block.timestamp >= traits.lastDreamDate + 24 hours,\\n            \\\"cooldown <24h\\\"\\n        );\\n\\n        // update counters\\n        agent.dreamCount      += 1;\\n        agent.lastUpdated      = block.timestamp;\\n        traits.lastDreamDate   = block.timestamp;\\n\\n        /* \\u2500\\u2500 1. incremental intelligence boost every 3 dreams \\u2500\\u2500 */\\n        if (agent.dreamCount % 3 == 0) {\\n            uint256 oldLvl = agent.intelligenceLevel;\\n            agent.intelligenceLevel += 1;\\n            emit AgentEvolved(tokenId, oldLvl, agent.intelligenceLevel);\\n        }\\n\\n        /* \\u2500\\u2500 2. personality evolution every 5 dreams \\u2500\\u2500 */\\n        if (agent.dreamCount % 5 == 0) {\\n            PersonalityTraits memory before = traits;\\n\\n            traits.creativity  = _updateTrait(traits.creativity,  impact.creativityChange);\\n            traits.analytical  = _updateTrait(traits.analytical,  impact.analyticalChange);\\n            traits.empathy     = _updateTrait(traits.empathy,     impact.empathyChange);\\n            traits.intuition   = _updateTrait(traits.intuition,   impact.intuitionChange);\\n            traits.resilience  = _updateTrait(traits.resilience,  impact.resilienceChange);\\n            traits.curiosity   = _updateTrait(traits.curiosity,   impact.curiosityChange);\\n            traits.dominantMood = impact.moodShift;\\n\\n            // first evolution \\u2192 consider personality \\u00abactivated\\u00bb\\n            if (!agent.personalityInitialized) {\\n                agent.personalityInitialized = true;\\n                emit PersonalityActivated(tokenId, traits, agent.dreamCount);\\n            }\\n\\n            agent.totalEvolutions += 1;\\n            agent.lastEvolutionDate = block.timestamp;\\n\\n            _checkPersonalityMilestones(tokenId, before, traits);\\n            _updateResponseStyle(tokenId);\\n\\n            emit PersonalityEvolved(tokenId, dreamHash, traits, impact);\\n        }\\n\\n        emit DreamProcessed(tokenId, dreamHash, agent.intelligenceLevel);\\n    }\\n\\n    /**\\n     * @notice Lightweight conversation recording; boosts intelligence every 10th convo.\\n     */\\n    function recordConversation(\\n        uint256    tokenId,\\n        bytes32    conversationHash,\\n        ContextType contextType\\n    ) external override whenNotPaused onlyOwnerOrAuthorized(tokenId) {\\n        DreamAgent storage agent = agents[tokenId];\\n\\n        agent.conversationCount += 1;\\n        agent.lastUpdated        = block.timestamp;\\n\\n        if (agent.conversationCount % 10 == 0) {\\n            uint256 oldLvl = agent.intelligenceLevel;\\n            agent.intelligenceLevel += 1;\\n            emit AgentEvolved(tokenId, oldLvl, agent.intelligenceLevel);\\n        }\\n\\n        emit AgentConversation(tokenId, conversationHash, contextType, agent.conversationCount);\\n    }\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 HIERARCHICAL MEMORY \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 */\\n\\n    /**\\n     * @dev Append\\u2011only daily hash for dreams; resets automatically on month change.\\n     */\\n    function updateDreamMemory(uint256 tokenId, bytes32 newHash)\\n        external whenNotPaused onlyOwnerOrAuthorized(tokenId)\\n    {\\n        AgentMemory storage mem = agentMemories[tokenId];\\n        bytes32 old = mem.currentDreamDailyHash;\\n        mem.currentDreamDailyHash = newHash;\\n        emit MemoryUpdated(tokenId, \\\"dream_daily\\\", newHash, old);\\n        _checkMonthChange(tokenId);\\n    }\\n\\n    /**\\n     * @dev Append\\u2011only daily hash for conversations.\\n     */\\n    function updateConversationMemory(uint256 tokenId, bytes32 newHash)\\n        external whenNotPaused onlyOwnerOrAuthorized(tokenId)\\n    {\\n        AgentMemory storage mem = agentMemories[tokenId];\\n        bytes32 old = mem.currentConvDailyHash;\\n        mem.currentConvDailyHash = newHash;\\n        emit MemoryUpdated(tokenId, \\\"conversation_daily\\\", newHash, old);\\n        _checkMonthChange(tokenId);\\n    }\\n\\n    /**\\n     * @notice User\\u2011driven monthly consolidation.  Merges daily files off\\u2011chain and\\n     *         stores the finalised month hash on\\u2011chain, rewarding the agent.\\n     */\\n    function consolidateMonth(\\n        uint256 tokenId,\\n        bytes32 dreamMonthlyHash,\\n        bytes32 convMonthlyHash,\\n        uint8   month,\\n        uint16  year\\n    ) external whenNotPaused onlyOwnerOrAuthorized(tokenId) {\\n        require(month >= 1 && month <= 12, \\\"invalid month\\\");\\n        require(year  >= 2024 && year  <= 2100, \\\"invalid year\\\");\\n\\n        AgentMemory storage mem = agentMemories[tokenId];\\n        require(mem.currentMonth != month || mem.currentYear != year, \\\"still current month\\\");\\n\\n        mem.lastDreamMonthlyHash = dreamMonthlyHash;\\n        mem.lastConvMonthlyHash  = convMonthlyHash;\\n        mem.lastConsolidation    = block.timestamp;\\n\\n        // streak logic\\n        consolidationStreak[tokenId] += 1;\\n        uint256 bonus = _calculateConsolidationBonus(tokenId);\\n        string memory special = _checkConsolidationMilestones(tokenId);\\n\\n        DreamAgent storage agent = agents[tokenId];\\n        uint256 oldLvl = agent.intelligenceLevel;\\n        agent.intelligenceLevel += bonus;\\n\\n        emit ConsolidationCompleted(tokenId, _formatPeriod(month, year), bonus, special);\\n        emit AgentEvolved(tokenId, oldLvl, agent.intelligenceLevel);\\n\\n        // yearly reflection flag\\n        if (month == 12) {\\n            pendingRewards[tokenId].yearlyReflection = true;\\n            emit YearlyReflectionAvailable(tokenId, year);\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the yearly \\u00abmemory core\\u00bb hash and grants bonus INT.\\n     */\\n    function updateMemoryCore(uint256 tokenId, bytes32 newHash)\\n        external whenNotPaused onlyOwnerOrAuthorized(tokenId)\\n    {\\n        AgentMemory storage mem = agentMemories[tokenId];\\n        bytes32 old = mem.memoryCoreHash;\\n        mem.memoryCoreHash = newHash;\\n        emit MemoryUpdated(tokenId, \\\"memory_core\\\", newHash, old);\\n\\n        if (pendingRewards[tokenId].yearlyReflection) {\\n            pendingRewards[tokenId].yearlyReflection = false;\\n            DreamAgent storage agent = agents[tokenId];\\n            uint256 oldLvl = agent.intelligenceLevel;\\n            agent.intelligenceLevel += 5;\\n            emit AgentEvolved(tokenId, oldLvl, agent.intelligenceLevel);\\n        }\\n    }\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 VIEW HELPERS \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 */\\n\\n    function getPersonalityTraits(uint256 tokenId)\\n        external view override returns (PersonalityTraits memory) {\\n        require(agents[tokenId].owner != address(0), \\\"agent !exist\\\");\\n        return agentPersonalities[tokenId];\\n    }\\n\\n    /**\\n     * @notice Get memory access level based on intelligence\\n     * @param tokenId Agent to check\\n     * @return monthsAccessible Number of months accessible \\n     * @return memoryDepth Human-readable description\\n     */\\n    function getMemoryAccess(uint256 tokenId) external view returns (\\n        uint256 monthsAccessible,\\n        string memory memoryDepth\\n    ) {\\n        require(agents[tokenId].owner != address(0), \\\"agent !exist\\\");\\n        uint256 intelligence = agents[tokenId].intelligenceLevel;\\n        \\n        if (intelligence >= 60) {\\n            monthsAccessible = 60;\\n            memoryDepth = \\\"5 years complete archive\\\";\\n        } else if (intelligence >= 48) {\\n            monthsAccessible = 48;\\n            memoryDepth = \\\"4 years\\\";\\n        } else if (intelligence >= 36) {\\n            monthsAccessible = 36;\\n            memoryDepth = \\\"3 years\\\";\\n        } else if (intelligence >= 24) {\\n            monthsAccessible = 24;\\n            memoryDepth = \\\"2 years\\\";\\n        } else if (intelligence >= 12) {\\n            monthsAccessible = 12;\\n            memoryDepth = \\\"annual\\\";\\n        } else if (intelligence >= 6) {\\n            monthsAccessible = 6;\\n            memoryDepth = \\\"half-year\\\";\\n        } else if (intelligence >= 3) {\\n            monthsAccessible = 3;\\n            memoryDepth = \\\"quarterly\\\";\\n        } else {\\n            monthsAccessible = 1;\\n            memoryDepth = \\\"current month only\\\";\\n        }\\n    }\\n\\n    /**\\n     * @notice Get agent's hierarchical memory structure\\n     * @param tokenId Agent to query\\n     * @return memory Current memory structure\\n     */\\n    function getAgentMemory(uint256 tokenId) external view returns (AgentMemory memory) {\\n        require(agents[tokenId].owner != address(0), \\\"agent !exist\\\");\\n        return agentMemories[tokenId];\\n    }\\n\\n    /**\\n     * @notice Check if consolidation is needed\\n     * @param tokenId Agent to check\\n     * @return isNeeded True if month has changed since last consolidation\\n     * @return currentMonth Current month\\n     * @return currentYear Current year\\n     */\\n    function needsConsolidation(uint256 tokenId) external view returns (\\n        bool isNeeded,\\n        uint8 currentMonth,\\n        uint16 currentYear\\n    ) {\\n        require(agents[tokenId].owner != address(0), \\\"agent !exist\\\");\\n        AgentMemory memory mem = agentMemories[tokenId];\\n        currentMonth = _currentMonth();\\n        currentYear = _currentYear();\\n        isNeeded = (mem.currentMonth != currentMonth || mem.currentYear != currentYear);\\n    }\\n\\n    /**\\n     * @notice Get consolidation reward preview\\n     * @param tokenId Agent to check\\n     * @return baseReward Base intelligence reward\\n     * @return streakBonus Bonus from consolidation streak\\n     * @return earlyBirdBonus Bonus for early consolidation\\n     * @return totalReward Total intelligence reward\\n     */\\n    function getConsolidationReward(uint256 tokenId) external view returns (\\n        uint256 baseReward,\\n        uint256 streakBonus,\\n        uint256 earlyBirdBonus,\\n        uint256 totalReward\\n    ) {\\n        require(agents[tokenId].owner != address(0), \\\"agent !exist\\\");\\n        baseReward = 2;\\n        \\n        uint256 streak = consolidationStreak[tokenId];\\n        if (streak >= 12) streakBonus = 5;\\n        else if (streak >= 6) streakBonus = 3;\\n        else if (streak >= 3) streakBonus = 1;\\n        else streakBonus = 0;\\n        \\n        AgentMemory memory mem = agentMemories[tokenId];\\n        if (block.timestamp <= mem.lastConsolidation + 3 days) {\\n            earlyBirdBonus = 1;\\n        } else {\\n            earlyBirdBonus = 0;\\n        }\\n        \\n        totalReward = baseReward + streakBonus + earlyBirdBonus;\\n    }\\n\\n    /**\\n     * @notice Check if agent can process dream today (24h cooldown)\\n     * @param tokenId Agent to check\\n     * @return canProcess True if agent can process a dream today\\n     */\\n    function canProcessDreamToday(uint256 tokenId) external view returns (bool canProcess) {\\n        require(agents[tokenId].owner != address(0), \\\"agent !exist\\\");\\n        PersonalityTraits memory t = agentPersonalities[tokenId];\\n        return t.lastDreamDate == 0 || block.timestamp >= t.lastDreamDate + 24 hours;\\n    }\\n\\n\\n\\n    function getEvolutionStats(uint256 tokenId)\\n        external view override returns (uint256 totalEvolutions, uint256 evolutionRate, uint256 lastEvolution)\\n    {\\n        DreamAgent memory a = agents[tokenId];\\n        totalEvolutions = a.totalEvolutions;\\n        lastEvolution   = a.lastEvolutionDate;\\n        uint256 daysSinceCreation = (block.timestamp - a.createdAt) / 1 days;\\n        evolutionRate = daysSinceCreation == 0 ? 0 : (totalEvolutions * 100) / daysSinceCreation;\\n    }\\n\\n    function hasMilestone(uint256 tokenId, string calldata name)\\n        external view override returns (bool achieved, uint256 at)\\n    {\\n        MilestoneData memory m = milestones[tokenId][name];\\n        return (m.achieved, m.achievedAt);\\n    }\\n\\n\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 ERC\\u20117857 TRANSFER ETC. \\u2500\\u2500\\u2500\\u2500\\u2500 */\\n    \\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        return agents[tokenId].owner;\\n    }\\n    \\n    function authorizedUsersOf(uint256 tokenId) external view override returns (address[] memory) {\\n        return agents[tokenId].authorizedUsers;\\n    }\\n    \\n    function authorizeUsage(uint256 tokenId, address user)\\n        external override onlyOwnerOrAdmin(tokenId) {\\n        require(user != address(0), \\\"zero user\\\");\\n        agents[tokenId].authorizedUsers.push(user);\\n        emit AuthorizedUsage(tokenId, user);\\n    }\\n    \\n    function transfer(address to, uint256 tokenId, bytes[] calldata) external override onlyOwnerOrAdmin(tokenId) {\\n        require(to != address(0), \\\"to = zero\\\");\\n        require(ownerToTokenId[to] == 0, \\\"to already owns agent\\\");\\n        \\n        address from = agents[tokenId].owner;\\n        ownerToTokenId[from] = 0;\\n        ownerToTokenId[to]   = tokenId;\\n        agents[tokenId].owner = to;\\n        agents[tokenId].lastUpdated = block.timestamp;\\n        emit Transferred(tokenId, from, to);\\n    }\\n    \\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 OTHER VIEWS \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 */\\n\\n    function totalSupply() external view returns (uint256) { return totalAgents; }\\n    \\n    function balanceOf(address owner) external view returns (uint256) {\\n        require(owner != address(0), \\\"zero owner\\\");\\n        return ownerToTokenId[owner] == 0 ? 0 : 1;\\n    }\\n\\n    function supportsInterface(bytes4 id) public view override returns (bool) {\\n        return\\n            id == type(IERC721).interfaceId ||\\n            id == type(IERC721Metadata).interfaceId ||\\n            id == type(IERC7857).interfaceId ||\\n            super.supportsInterface(id);\\n    }\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 ADMIN / EMERGENCY \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 */\\n\\n    function pause() external onlyRole(PAUSER_ROLE) { _pause(); }\\n    function unpause() external onlyRole(PAUSER_ROLE) { _unpause(); }\\n    \\n    function emergencyAuthorizeUser(uint256 tokenId, address user) external onlyRole(ADMIN_ROLE) {\\n        require(user != address(0), \\\"zero user\\\");\\n        agents[tokenId].authorizedUsers.push(user);\\n        emit AuthorizedUsage(tokenId, user);\\n    }\\n    \\n    function emergencyTransfer(uint256 tokenId, address to) external onlyRole(ADMIN_ROLE) {\\n        require(to != address(0), \\\"to = zero\\\");\\n        require(ownerToTokenId[to] == 0, \\\"to already owns\\\");\\n        \\n        address from = agents[tokenId].owner;\\n        ownerToTokenId[from] = 0;\\n        ownerToTokenId[to]   = tokenId;\\n        agents[tokenId].owner = to;\\n        agents[tokenId].lastUpdated = block.timestamp;\\n        emit Transferred(tokenId, from, to);\\n    }\\n    \\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 MODIFIERS & HELPERS \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 */\\n\\n    modifier onlyOwnerOrAuthorized(uint256 tokenId) {\\n        require(\\n            agents[tokenId].owner == msg.sender ||\\n            hasRole(ADMIN_ROLE, msg.sender)     ||\\n            _isAuthorizedUser(tokenId, msg.sender),\\n            \\\"not authorised\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrAdmin(uint256 tokenId) {\\n        require(\\n            agents[tokenId].owner == msg.sender || hasRole(ADMIN_ROLE, msg.sender),\\n            \\\"owner/admin only\\\"\\n        );\\n        _;\\n    }\\n\\n    function _isAuthorizedUser(uint256 tokenId, address user) internal view returns (bool) {\\n        address[] memory list = agents[tokenId].authorizedUsers;\\n        for (uint256 i = 0; i < list.length; ++i) if (list[i] == user) return true;\\n        return false;\\n    }\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 PRIVATE: PERSONALITY \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 */\\n\\n    function _validatePersonalityImpact(PersonalityImpact calldata i) internal pure {\\n        require(i.evolutionWeight > 0 && i.evolutionWeight <= 100, \\\"weight out of range\\\");\\n        require(bytes(i.moodShift).length > 0,                   \\\"empty mood\\\");\\n        require(_inRange(i.creativityChange)   && _inRange(i.analyticalChange) &&\\n                _inRange(i.empathyChange)      && _inRange(i.intuitionChange)  &&\\n                _inRange(i.resilienceChange)   && _inRange(i.curiosityChange),  unicode\\\"\\u0394 out of range\\\");\\n    }\\n    function _inRange(int8 x) private pure returns (bool) { return x >= -10 && x <= 10; }\\n\\n    function _updateTrait(uint8 current, int8 delta) internal pure returns (uint8) {\\n        int256 temp = int256(uint256(current)) + int256(delta);\\n        if (temp < 0)   temp = 0;\\n        if (temp > 100) temp = 100;\\n        return uint8(uint256(temp));\\n    }\\n\\n    function _updateResponseStyle(uint256 tokenId) internal {\\n        PersonalityTraits memory t = agentPersonalities[tokenId];\\n        string memory style;\\n        if (t.empathy > 70 && t.creativity > 60)      style = \\\"empathetic_creative\\\";\\n        else if (t.empathy > 70)                      style = \\\"empathetic\\\";\\n        else if (t.creativity > 70)                   style = \\\"creative\\\";\\n        else if (t.analytical > 70)                   style = \\\"analytical\\\";\\n        else if (t.intuition > 70)                    style = \\\"intuitive\\\";\\n        else if (t.resilience > 70)                   style = \\\"resilient\\\";\\n        else if (t.curiosity > 70)                    style = \\\"curious\\\";\\n        else                                         style = \\\"balanced\\\";\\n\\n        if (keccak256(bytes(responseStyles[tokenId])) != keccak256(bytes(style))) {\\n            string memory old = responseStyles[tokenId];\\n            responseStyles[tokenId] = style;\\n            emit ResponseStyleUpdated(tokenId, old, style);\\n            string[] memory dom = _getDominantTraitNames(tokenId);\\n            emit ResponseStyleEvolved(tokenId, style, dom);\\n        }\\n    }\\n\\n    function _getDominantTraitNames(uint256 tokenId) internal view returns (string[] memory names) {\\n        PersonalityTraits memory p = agentPersonalities[tokenId];\\n        uint8[6] memory v = [p.creativity, p.analytical, p.empathy, p.intuition, p.resilience, p.curiosity];\\n        string[6] memory n = [\\\"creativity\\\",\\\"analytical\\\",\\\"empathy\\\",\\\"intuition\\\",\\\"resilience\\\",\\\"curiosity\\\"];\\n        names = new string[](3);\\n        for (uint256 k; k < 3; ++k) {\\n            uint256 m = 0;\\n            for (uint256 j = 1; j < 6; ++j) if (v[j] > v[m]) m = j;\\n            names[k] = n[m];\\n            v[m] = 0; // prevent reuse\\n        }\\n    }\\n\\n    function _checkPersonalityMilestones(uint256 tokenId, PersonalityTraits memory old, PersonalityTraits memory nu) internal {\\n        if (old.empathy  < 85 && nu.empathy  >= 85) _unlockMilestone(tokenId, \\\"empathy_master\\\",  nu.empathy);\\n        if (old.creativity< 90 && nu.creativity>= 90) _unlockMilestone(tokenId, \\\"creative_genius\\\",nu.creativity);\\n        if (old.analytical< 90 && nu.analytical>= 90) _unlockMilestone(tokenId, \\\"logic_lord\\\",    nu.analytical);\\n        if (old.intuition< 90 && nu.intuition>= 90) _unlockMilestone(tokenId, \\\"spiritual_guide\\\",nu.intuition);\\n        bool balanced = nu.creativity>60 && nu.analytical>60 && nu.empathy>60 && nu.intuition>60 && nu.resilience>60 && nu.curiosity>60;\\n        if (balanced && !milestones[tokenId][\\\"balanced_soul\\\"].achieved) _unlockMilestone(tokenId, \\\"balanced_soul\\\", 60);\\n    }\\n\\n    function _unlockMilestone(uint256 id, string memory name, uint8 val) internal {\\n        milestones[id][name] = MilestoneData(true, block.timestamp, val);\\n        agents[id].achievedMilestones.push(name);\\n        emit PersonalityMilestone(id, name, val, \\\"\\\");\\n        emit MilestoneUnlocked(id, name, val);\\n    }\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 PRIVATE: MEMORY HELPERS \\u2500\\u2500\\u2500\\u2500 */\\n\\n    function _checkMonthChange(uint256 id) internal {\\n        AgentMemory storage m = agentMemories[id];\\n        uint8 cm = _currentMonth();\\n        uint16 cy = _currentYear();\\n        if (m.currentMonth == 0) { // first time \\u2013 initialise\\n            m.currentMonth = cm; m.currentYear = cy; return;\\n        }\\n        if (m.currentMonth != cm || m.currentYear != cy) {\\n            emit ConsolidationNeeded(id, m.currentMonth, m.currentYear, \\\"monthly\\\");\\n            m.currentMonth = cm; m.currentYear = cy;\\n            m.currentDreamDailyHash = bytes32(0);\\n            m.currentConvDailyHash  = bytes32(0);\\n            if (block.timestamp > m.lastConsolidation + 37 days) consolidationStreak[id] = 0; // lose streak\\n        }\\n    }\\n\\n    function _calculateConsolidationBonus(uint256 id) internal view returns (uint256 b) {\\n        uint256 st = consolidationStreak[id];\\n        b = 2;\\n        if      (st >= 12) b += 5;\\n        else if (st >= 6)  b += 3;\\n        else if (st >= 3)  b += 1;\\n        AgentMemory storage m = agentMemories[id];\\n        if (block.timestamp <= m.lastConsolidation + 3 days) b += 1; // early bird\\n    }\\n\\n    function _checkConsolidationMilestones(uint256 id) internal returns (string memory) {\\n        uint256 st = consolidationStreak[id];\\n        if (st == 3)  { _unlockMilestone(id, \\\"memory_keeper\\\", 3);   return \\\"Memory Keeper\\\"; }\\n        if (st == 6)  { _unlockMilestone(id, \\\"memory_guardian\\\", 6); return \\\"Memory Guardian\\\"; }\\n        if (st == 12) { _unlockMilestone(id, \\\"memory_master\\\",12);   return \\\"Memory Master\\\"; }\\n        if (st == 24) { _unlockMilestone(id, \\\"eternal_memory\\\",24);  return \\\"Eternal Memory\\\"; }\\n        uint256 tot = agents[id].dreamCount + agents[id].conversationCount;\\n        if (tot == 100) { emit MemoryMilestone(id, \\\"Century of Memories\\\", 100); return \\\"Century of Memories\\\"; }\\n        if (tot == 365) { emit MemoryMilestone(id, \\\"Year of Memories\\\",   365); return \\\"Year of Memories\\\"; }\\n        if (tot == 1000){ emit MemoryMilestone(id, \\\"Memory Millennial\\\", 1000);return \\\"Memory Millennial\\\"; }\\n        return \\\"\\\";\\n    }\\n\\n    function _formatPeriod(uint8 m, uint16 y) internal pure returns (string memory) {\\n        string[12] memory n = [\\\"January\\\",\\\"February\\\",\\\"March\\\",\\\"April\\\",\\\"May\\\",\\\"June\\\",\\\"July\\\",\\\"August\\\",\\\"September\\\",\\\"October\\\",\\\"November\\\",\\\"December\\\"];\\n        return string(abi.encodePacked(n[m-1], \\\" \\\", _uint2str(y)));\\n    }\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500 date helpers (approx.) \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 */\\n    function _currentMonth() internal view returns (uint8)  { return uint8((block.timestamp / 30 days) % 12) + 1; }\\n    function _currentYear()  internal view returns (uint16) { return uint16(2024 + (block.timestamp / 365 days)); }\\n\\n    /* \\u2500\\u2500\\u2500\\u2500\\u2500 misc util \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 */\\n    function _uint2str(uint256 x) internal pure returns (string memory) {\\n        if (x == 0) return \\\"0\\\";\\n        uint256 len; uint256 y = x;\\n        while (y != 0) { len++; y/=10; }\\n        bytes memory buf = new bytes(len);\\n        while (x != 0) { buf[--len] = bytes1(uint8(48 + x % 10)); x/=10; }\\n        return string(buf);\\n    }\\n}\\n\",\"keccak256\":\"0x8dc691e65b1115a07de7890cfd39197bb5f1a949eb9cb597bdd50a7e0f0f830f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC7857.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IERC7857DataVerifier.sol\\\";\\n\\ninterface IERC7857 {\\n    /// @dev This emits when a new functional NFT is minted\\n    event Minted(\\n        uint256 indexed _tokenId,\\n        address indexed _creator,\\n        address indexed _owner,\\n        bytes32[] _dataHashes,\\n        string[] _dataDescriptions\\n    );\\n\\n    /// @dev This emits when a user is authorized to use the data\\n    event AuthorizedUsage(uint256 indexed _tokenId, address indexed _user);\\n\\n    /// @dev This emits when data is transferred with ownership\\n    event Transferred(\\n        uint256 _tokenId,\\n        address indexed _from,\\n        address indexed _to\\n    );\\n\\n    /// @dev This emits when data is cloned\\n    event Cloned(\\n        uint256 indexed _tokenId,\\n        uint256 indexed _newTokenId,\\n        address _from,\\n        address _to\\n    );\\n\\n    /// @dev This emits when a sealed key is published\\n    event PublishedSealedKey(\\n        address indexed _to,\\n        uint256 indexed _tokenId,\\n        bytes16[] _sealedKeys\\n    );\\n\\n    /// @notice The verifier interface that this NFT uses\\n    /// @return The address of the verifier contract\\n    function verifier() external view returns (IERC7857DataVerifier);\\n\\n\\n\\n    /// @notice Transfer data with ownership\\n    /// @param _to Address to transfer data to\\n    /// @param _tokenId The token to transfer data for\\n    /// @param _proofs Proofs of data available for _to\\n    function transfer(\\n        address _to,\\n        uint256 _tokenId,\\n        bytes[] calldata _proofs\\n    ) external;\\n\\n\\n\\n\\n\\n\\n\\n    /// @notice Add authorized user to group\\n    /// @param _tokenId The token to add to group\\n    function authorizeUsage(uint256 _tokenId, address _user) external;\\n\\n    /// @notice Get token owner\\n    /// @param _tokenId The token identifier\\n    /// @return The current owner of the token\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Get the authorized users of a token\\n    /// @param _tokenId The token identifier\\n    /// @return The current authorized users of the token\\n    function authorizedUsersOf(\\n        uint256 _tokenId\\n    ) external view returns (address[] memory);\\n} \",\"keccak256\":\"0x68be7af6d81acbea56bf127dd741c1ae4c052baac9034be582f8044466228cd4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC7857DataVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nstruct PreimageProofOutput {\\n    bytes32 dataHash;\\n    bool isValid;\\n}\\n\\nstruct TransferValidityProofOutput {\\n    bytes32 oldDataHash;\\n    bytes32 newDataHash;\\n    bytes pubKey;\\n    bytes16 sealedKey;\\n    bool isValid;\\n}\\n\\ninterface IERC7857DataVerifier {\\n    /// @notice Verify preimage of data\\n    /// @param proofs Proof of data ownership\\n    /// @return Output of the preimage proof verification\\n    function verifyPreimage(\\n        bytes[] calldata proofs\\n    ) external view returns (PreimageProofOutput[] memory);\\n\\n    /// @notice Verify data transfer validity\\n    /// @param proofs Proof of data transfer validity\\n    /// @return Output of the transfer validity proof verification\\n    function verifyTransferValidity(\\n        bytes[] calldata proofs\\n    ) external view returns (TransferValidityProofOutput[] memory);\\n} \",\"keccak256\":\"0x78406bba1f9f687ee4e9fce1ce7391a3c9f94029c2e1a09f376e45f41cb3cf58\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPersonalityEvolution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title IPersonalityEvolution - Interface for agent personality evolution\\n/// @notice Defines the personality evolution system for Dreamscape iNFTs\\n/// @dev Implements personality trait development based on dream analysis\\ninterface IPersonalityEvolution {\\n    \\n    /// @notice Core personality traits structure\\n    /// @dev All traits range from 0-100, dominantMood is current emotional state\\n    struct PersonalityTraits {\\n        uint8 creativity;      // 0-100: Innovation, imagination, artistic thinking\\n        uint8 analytical;      // 0-100: Logic, problem-solving, systematic thinking  \\n        uint8 empathy;         // 0-100: Emotional understanding, compassion, support\\n        uint8 intuition;       // 0-100: Gut feelings, spiritual insights, wisdom\\n        uint8 resilience;      // 0-100: Stress handling, recovery, perseverance\\n        uint8 curiosity;       // 0-100: Learning desire, exploration, questioning\\n        string dominantMood;   // Current emotional state: \\\"peaceful\\\", \\\"anxious\\\", \\\"excited\\\", etc.\\n        uint256 lastDreamDate; // Timestamp of last dream processing (prevents multiple per day)\\n    }\\n    \\n    /// @notice Personality impact from dream analysis\\n    /// @dev Defines how a dream affects personality traits\\n    struct PersonalityImpact {\\n        int8 creativityChange;     // -10 to +10 change in creativity\\n        int8 analyticalChange;     // -10 to +10 change in analytical thinking\\n        int8 empathyChange;        // -10 to +10 change in empathy\\n        int8 intuitionChange;      // -10 to +10 change in intuition\\n        int8 resilienceChange;     // -10 to +10 change in resilience\\n        int8 curiosityChange;      // -10 to +10 change in curiosity\\n        string moodShift;          // New dominant mood\\n        uint8 evolutionWeight;     // 1-100: How much this dream affects personality\\n    }\\n    \\n    /// @notice Conversation context type for memory management\\n    enum ContextType {\\n        DREAM_DISCUSSION,    // Discussing previous dreams\\n        GENERAL_CHAT,        // General conversation\\n        PERSONALITY_QUERY,   // Asking about personality/traits\\n        THERAPEUTIC,         // Therapeutic conversation\\n        ADVICE_SEEKING      // Seeking advice/guidance\\n    }\\n    \\n    /// @notice Three-tier memory system structure\\n    /// @dev Each layer stores a single hash pointing to encrypted storage\\n    struct AgentMemory {\\n        bytes32 memoryCoreHash;        // Yearly summaries & agent essence\\n        bytes32 currentDreamDailyHash; // Append-only during current month\\n        bytes32 currentConvDailyHash;  // Append-only during current month\\n        bytes32 lastDreamMonthlyHash;  // Finalised hash after consolidation\\n        bytes32 lastConvMonthlyHash;   // Finalised hash after consolidation\\n        uint256 lastConsolidation;     // timestamp when consolidateMonth() last ran\\n        uint8   currentMonth;          // 1-12   (initialised at mint)\\n        uint16  currentYear;           // 2024+  (initialised at mint)\\n    }\\n    \\n    // Events\\n    \\n    /// @dev Emitted when agent personality evolves from dream processing\\n    event PersonalityEvolved(\\n        uint256 indexed tokenId,\\n        bytes32 indexed dreamHash,\\n        PersonalityTraits newPersonality,\\n        PersonalityImpact impact\\n    );\\n    \\n    /// @dev Emitted when agent has a conversation (without personality evolution)\\n    event AgentConversation(\\n        uint256 indexed tokenId,\\n        bytes32 indexed conversationHash,\\n        ContextType contextType,\\n        uint256 conversationCount\\n    );\\n    \\n    /// @dev Emitted when agent reaches personality milestones\\n    event PersonalityMilestone(\\n        uint256 indexed tokenId,\\n        string milestone,\\n        uint8 traitValue,\\n        string traitName\\n    );\\n    \\n    /// @dev Emitted when agent's response style evolves\\n    event ResponseStyleEvolved(\\n        uint256 indexed tokenId,\\n        string newStyle,\\n        string[] dominantTraits\\n    );\\n    \\n    // Core Functions\\n    \\n    /// @notice Process daily dream and evolve agent personality\\n    /// @param tokenId Agent to evolve\\n    /// @param dreamHash 0G Storage hash of encrypted dream data\\n    /// @param dreamAnalysisHash 0G Storage hash of AI analysis\\n    /// @param impact Personality changes from dream analysis\\n    function processDailyDream(\\n        uint256 tokenId,\\n        bytes32 dreamHash,\\n        bytes32 dreamAnalysisHash,\\n        PersonalityImpact calldata impact\\n    ) external;\\n    \\n    /// @notice Record conversation without personality evolution\\n    /// @param tokenId Agent having conversation\\n    /// @param conversationHash 0G Storage hash of conversation data\\n    /// @param contextType Type of conversation for context building\\n    function recordConversation(\\n        uint256 tokenId,\\n        bytes32 conversationHash,\\n        ContextType contextType\\n    ) external;\\n    \\n    /// @notice Get agent's current personality traits\\n    /// @param tokenId Agent to query\\n    /// @return traits Current personality traits\\n    function getPersonalityTraits(uint256 tokenId) \\n        external view returns (PersonalityTraits memory traits);\\n    \\n    /// @notice Get memory access level based on intelligence\\n    /// @param tokenId Agent to check\\n    /// @return monthsAccessible Number of months accessible \\n    /// @return memoryDepth Human-readable description\\n    function getMemoryAccess(uint256 tokenId) external view returns (\\n        uint256 monthsAccessible,\\n        string memory memoryDepth\\n    );\\n\\n    /// @notice Check if agent can process dream today (24h cooldown)\\n    /// @param tokenId Agent to check\\n    /// @return canProcess True if agent can process a dream today\\n    function canProcessDreamToday(uint256 tokenId) \\n        external view returns (bool canProcess);\\n\\n    /// @notice Check if consolidation is needed\\n    /// @param tokenId Agent to check\\n    /// @return isNeeded True if month has changed since last consolidation\\n    /// @return currentMonth Current month\\n    /// @return currentYear Current year\\n    function needsConsolidation(uint256 tokenId) external view returns (\\n        bool isNeeded,\\n        uint8 currentMonth,\\n        uint16 currentYear\\n    );\\n\\n    /// @notice Get consolidation reward preview\\n    /// @param tokenId Agent to check\\n    /// @return baseReward Base intelligence reward\\n    /// @return streakBonus Bonus from consolidation streak\\n    /// @return earlyBirdBonus Bonus for early consolidation\\n    /// @return totalReward Total intelligence reward\\n    function getConsolidationReward(uint256 tokenId) external view returns (\\n        uint256 baseReward,\\n        uint256 streakBonus,\\n        uint256 earlyBirdBonus,\\n        uint256 totalReward\\n    );\\n\\n    /// @notice Get agent's hierarchical memory structure\\n    /// @param tokenId Agent to query\\n    /// @return memory Current memory structure\\n    function getAgentMemory(uint256 tokenId) external view returns (AgentMemory memory);\\n    \\n    // Advanced Analytics\\n    \\n    /// @notice Get personality evolution statistics\\n    /// @param tokenId Agent to analyze\\n    /// @return totalEvolutions Number of personality changes\\n    /// @return evolutionRate Rate of personality change\\n    /// @return lastEvolution Timestamp of last evolution\\n    function getEvolutionStats(uint256 tokenId) \\n        external view returns (\\n            uint256 totalEvolutions,\\n            uint256 evolutionRate,\\n            uint256 lastEvolution\\n        );\\n    \\n\\n    \\n    /// @notice Check if agent has reached specific personality milestone\\n    /// @param tokenId Agent to check\\n    /// @param milestone Milestone to check (\\\"empathy_master\\\", \\\"creative_genius\\\", etc.)\\n    /// @return achieved True if milestone has been achieved\\n    /// @return achievedAt Timestamp when milestone was achieved (0 if not achieved)\\n    function hasMilestone(uint256 tokenId, string calldata milestone) \\n        external view returns (bool achieved, uint256 achievedAt);\\n    \\n    // Batch Operations\\n    \\n\\n} \",\"keccak256\":\"0x9e8627b9eca7a0bb344163a70ab1d75a2e22cff091fdaf56fc000b0341d0441c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0346200013357601f62005a0c38819003918201601f19168301916001600160401b038311848410176200013857808492604094855283398101031262000133576200005a602062000052836200014e565b92016200014e565b9060016000556001600c556000600d556000600e5560018060a01b039182811615620000ee576080521660a052620000923362000163565b506200009e33620001e4565b50620000aa3362000287565b50620000b63362000325565b506040516156289081620003c482396080518181816125820152612ee1015260a051818181612a3f015281816132250152613b7a0152f35b60405162461bcd60e51b815260206004820152601460248201527f7472656173757279203d207a65726f20616464720000000000000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200013357565b6001600160a01b031660008181527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604081205490919060ff16620001e05781805260016020526040822081835260205260408220600160ff198254161790553391600080516020620059ec8339815191528180a4600190565b5090565b6001600160a01b031660008181527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d3769460205260408120549091907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759060ff16620002825780835260016020526040832082845260205260408320600160ff19825416179055600080516020620059ec833981519152339380a4600190565b505090565b6001600160a01b031660008181527fb4fd2442cb0653849f414a2f81c1eb01ec27a0fc1bb28000d4ca51d98b75fd0360205260408120549091907f0ce23c3e399818cfee81a7ab0880f714e53d7672b08df0fa62f2843416e1ea099060ff16620002825780835260016020526040832082845260205260408320600160ff19825416179055600080516020620059ec833981519152339380a4600190565b6001600160a01b031660008181527fb9cbbae02fe941283ec0eefd7b121e3bc7f89fae077b27bdd75a7fd4cf1543a860205260408120549091907f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9060ff16620002825780835260016020526040832082845260205260408320600160ff19825416179055600080516020620059ec833981519152339380a460019056fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714613f5857508063074abfb714613e64578063140b79c814613e3857806318160ddd146107995780631aeb542f14613dc05780631f2e589e14613d17578063248a9ca314613ce85780632980471d14613ba95780632b7ac3f314613b645780632f2ff15d14613b255780633326ed82146139db578063359bf143146138eb57806336568abe146138a45780633db43fb31461372a5780633f4ba83a146136c05780634814f035146136865780634eb22e9e146135e25780634f6ed44c14612920578063513856c81461285c5780635436972c14612812578063556199111461270f57806358c812aa1461269c5780635c975abb146126795780635e1d7c2e146125fb5780635f292a32146125cf57806360c6d8ae146125b157806361d027b31461256c5780636352211e146125385780636a7468e91461233157806370a08231146122a857806375794a3c1461228a57806375b238fc1461226157806378136859146121665780637dcb2abf146120f857806382ca08ae14611b135780638456cb5914611ab9578063877789b91461198a57806391d148541461193d5780639ccff74914610885578063a217fddf14610869578063ab30be871461084c578063b7125e9b146107b7578063c505371214610799578063cc637afe14610738578063d547741f146106f9578063d642b4b1146106d6578063da97ca09146105b4578063dfdad7de14610445578063e32b178d1461034c578063e63ab1e914610311578063e7705db6146102d65763fa83d14e1461025b57600080fd5b346102d15760403660031901126102d1576102a960043561027a61400b565b9080600052600360205260018060a01b0360406000205416331480156102ab575b6102a490614895565b6148ec565b005b503360009081526000805160206155b3833981519152602052604090205460ff1661029b565b600080fd5b346102d15760003660031901126102d15760206040517f0ce23c3e399818cfee81a7ab0880f714e53d7672b08df0fa62f2843416e1ea098152f35b346102d15760003660031901126102d15760206040517f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8152f35b346102d1576020806003193601126102d157600435600060e060405161037181614122565b82815282858201528260408201528260608201528260808201528260a0820152606060c0820152015280600052600382526103ba60018060a01b03604060002054161515614802565b600052600681526103ce60406000206146fa565b9060405191818392835260ff809181845116818601528301511660408401528060408301511660608401528060608301511660808401528060808301511660a084015260a08201511660c083015260c081015160e061043a6101009283838701526101208601906141ef565b920151908301520390f35b346102d15760603660031901126102d15761045e614021565b6024356044356001600160401b0381116102d157610480903690600401614214565b50508060005260206003815260018060a01b038093816040600020541633148015610586575b6104af90614895565b16926104bc8415156149ae565b836000526005825260406000205461054957907f0ea8df787dde63a7bdc34d17097adf25749a3521f660e92dabdff8d6ee91d18a9183600052600382526040600020541692836000526005825260006040812055846000528060406000205580600052600382526040600020856001600160601b0360a01b825416178155600342910155604051908152a3005b60405162461bcd60e51b81526004810183905260156024820152741d1bc8185b1c9958591e481bdddb9cc81859d95b9d605a1b6044820152606490fd5b506000805160206155d38339815191526000908152600184526040808220338352855290205460ff166104a6565b346102d1576020806003193601126102d15761010090600435600060e06040516105dd81614122565b82815282858201528260408201528260608201528260808201528260a08201528260c08201520152806000526003825261062560018060a01b03604060002054161515614802565b600052600781526040600020906040519161063f83614122565b60ff81549384815260018301549284820193845260028101546040830190815260038201546060840190815260048301549160808501928352600660058501549460a0870195865201549760e060c0870196888b168852019761ffff809a60081c1689526040519a8b5251908a01525160408901525160608801525160808701525160a0860152511660c0840152511660e0820152f35b346102d15760003660031901126102d157602060405167016345785d8a00008152f35b346102d15760403660031901126102d1576102a960043561071861400b565b9080600052600160205261073360016040600020015461437e565b614424565b346102d15760203660031901126102d1576004356001600160401b0381116102d15760ff61078360206107708194369060040161425f565b81604051938285809451938492016141cc565b8101600481520301902054166040519015158152f35b346102d15760003660031901126102d1576020600d54604051908152f35b346102d15760203660031901126102d1576004356000818152600360205260409020546107ee906001600160a01b03161515614802565b600052600660205260e061080560406000206146fa565b01518015801561081d575b6020906040519015158152f35b5062015180810180911161083657602090421015610810565b634e487b7160e01b600052601160045260246000fd5b346102d15760003660031901126102d15760206040516103e88152f35b346102d15760003660031901126102d157602060405160008152f35b346102d1576003196080368201126102d1576001600160401b03606435116102d15761010090606435360301126102d1576108be61469f565b600435600052600360205260018060a01b036040600020541633148015611917575b8015611900575b6108f0906146bd565b60ff61090060e460643501614a46565b161515806118e6575b156118ab5761092260c46064350160643560040161476c565b9050156118795760046064350135600081900b90036102d15761094a60643560040135614a54565b80611859575b80611839575b8061181a575b806117fa575b806117da575b156117a3576004356000526003602052604060002060066020526040600020906002820154801590811561178b575b50156117565760068101546001810181116108365760010160068201554260038201554260028301556006810154600381061561170f575b6005900615610a15575b6005015460405190602435825260208201527f871f9739b79e9efd6285318758001f00502185ff0d254a080922cd80580c3e02604060043592a2005b610a1e826146fa565b825460ff610a3460643560040135828416614a70565b1660ff1982168117855560246064350135600081900b90036102d157610a8691610a7091606435602401359160ff19161760081c60ff16614a70565b845461ff00191660089190911b61ff0016178455565b825460101c60ff1660643560440135600081900b90036102d157610ab4610acc916044606435013590614a70565b845462ff0000191660109190911b62ff000016178455565b825460181c60ff16606480350135600081900b90036102d157610af8610b129160648035013590614a70565b845463ff000000191660189190911b63ff00000016178455565b825460201c60ff1660643560840135600081900b90036102d157610b40610b5c916084606435013590614a70565b845464ff00000000191660209190911b64ff0000000016178455565b825460281c60ff1660643560a40135600081900b90036102d157610b8a610ba89160a4606435013590614a70565b845465ff0000000000191660289190911b65ff000000000016178455565b610bbc60c46064350160643560040161476c565b906001600160401b03821161119a578190610be782610bde6001890154614037565b60018901614554565b600090601f831160011461169e57600092611693575b50508160011b916000199060031b1c19161760018401555b60088201805460ff81161561163a575b5050600982015460018101811161083657600101600983015542600a830155605a60ff6060610c53866146fa565b936055836040830151161080611629575b6115eb575b838382511610806115de575b6115a2575b83836020830151161080611592575b611558575b0151161080611546575b611506575b603c60ff8251161190816114f3575b816114e0575b816114cd575b816114ba575b816114a7575b508061146d575b61130f575b6004356000526006602052610ce860406000206146fa565b6046908160ff60408301511611808091611301575b156111b057505050604051610d1181614190565b6013815272656d70617468657469635f637265617469766560681b60208201525b600435600052600b602052610d54610d5b604060002060405192838092614071565b03826141ab565b602081519101208151602083012003610e59575b50610d856040519260408452604084019061479e565b9180830360208201526064356004013560000b83526024606435013560000b60208401526044606435013560000b604084015260648035013560000b60608401526084606435013560000b608084015260a4606435013560000b60a0840152610e0e610dfb60c4606435016064356004016144d3565b61010060c08701526101008601916144b2565b60e4606435013560ff81168091036102d15760e060059501527f4188327df0df4e6ad8674fc37ff48b2b049fdaae33e3c8e38275816040949af26024359280600435930390a36109d9565b600435600052600b602052610d54610e7b604060002060405192838092614071565b600435600052600b602052610e9482604060002061459b565b7f90f9e809e3805f30ac3fc3562ac1fb69527e27e23e063a99f43a92343f35c9d2610eca604051926040845260408401906141ef565b91808303602082015280610ee160043594866141ef565b0390a26004356000526006602052610efc60406000206146fa565b9060ff60a060405193610f0e8561415a565b82815116855282602082015116602086015282604082015116604086015282606082015116606086015282608082015116608086015201511660a0830152604051610f588161415a565b604051610f6481614190565b600a8152696372656174697669747960b01b60208201528152610f85614acc565b6020820152604051610f9681614190565b6007815266656d706174687960c81b60208201526040820152604051610fbb81614190565b600981526834b73a3ab4ba34b7b760b91b60208201526060820152604051610fe281614190565b600a815269726573696c69656e636560b01b6020820152608082015260405161100a81614190565b6009815268637572696f7369747960b81b602082015260a0820152604051928360808101106001600160401b0360808601111761119a57608084016040526003845260005b60608110611189575060005b600381106111075750505061107b604051916040835260408301906141ef565b8181036020830152825180825260208201916020808360051b8301019501926000915b8383106110da575050505050807fff8866d78ff3fc4f37232c9d6da12c9b2168edd42074faa52ea90054f0abcf6d91600435930390a282610d6f565b90919293956020806110f8600193601f198682030187528a516141ef565b9801930193019193929061109e565b600060015b6006811061115157509060006111468361112961114c9588614af2565b51611134858b614513565b5261113f848a614513565b5085614af2565b52614504565b61105b565b60ff61115d8286614af2565b511660ff61116b8487614af2565b511610611181575b61117c90614504565b61110c565b905080611173565b80606060208093880101520161104f565b634e487b7160e01b600052604160045260246000fd5b156111df5750506040516111c381614190565b600a815269656d706174686574696360b01b6020820152610d32565b8160ff825116116000146112155750506040516111fb81614190565b6008815267637265617469766560c01b6020820152610d32565b8160ff60208301511611600014611235575050611230614acc565b610d32565b8160ff6060830151161160001461126f57505060405161125481614190565b6009815268696e7475697469766560b81b6020820152610d32565b8160ff608083015116116000146112a957505060405161128e81614190565b60098152681c995cda5b1a595b9d60ba1b6020820152610d32565b60a0015160ff1611156112db576040516112c281614190565b6007815266637572696f757360c81b6020820152610d32565b6040516112e781614190565b600881526718985b185b98d95960c21b6020820152610d32565b50603c60ff83511611610cfd565b60405161131b81614190565b600d81526c18985b185b98d95917dcdbdd5b609a1b602082015260405161134181614107565b6001815260ff600260208301924284526040810193603c8552600435600052600a60205261138c6113766040600020886142a6565b92511515839060ff801983541691151516179055565b5160018201550191511660ff198254161790556004356000526003602052600b6040600020018054600160401b81101561119a576113cf916001820181556148d4565b61145757816113dd9161459b565b6040516060815260008051602061557383398151915261140060608301846141ef565b91603c6020820152600081840393846040840152526020600435930190a2600080516020615553833981519152611442604051926040845260408401906141ef565b91603c602082015280600435930390a2610cd0565b634e487b7160e01b600052600060045260246000fd5b50600435600052600a60205260ff602d6040600020604051906c18985b185b98d95917dcdbdd5b609a1b8252600d82015220541615610ccb565b603c915060a060ff910151161183610cc4565b9050603c60ff6080830151161190610cbe565b9050603c60ff6060830151161190610cb8565b9050603c60ff6040830151161190610cb2565b9050603c60ff6020830151161190610cac565b61154160ff60608301511660405161151d81614190565b600f81526e73706972697475616c5f677569646560881b6020820152600435614b03565b610c9d565b50605a60ff6060830151161015610c98565b61158d8360208701511660405161156e81614190565b600a8152691b1bd9da58d7db1bdc9960b21b6020820152600435614b03565b610c8e565b5083836020870151161015610c89565b6115d9838651166040516115b581614190565b600f81526e63726561746976655f67656e69757360881b6020820152600435614b03565b610c7a565b5083838651161015610c75565b6116248360408701511660405161160181614190565b600e81526d32b6b830ba343cafb6b0b9ba32b960911b6020820152600435614b03565b610c69565b506055836040870151161015610c64565b60019060ff191617905560068201547f3699e9591a9a800af90ffae86552b9fa46719da5dbb81727a2bd1ee93c1f57ac6040516040815261167e604082018761479e565b92602082015280600435930390a28380610c25565b013590508580610bfd565b909250600186016000526020600020906000935b601f19841685106116f7576001945083601f198116106116dd575b505050811b016001840155610c15565b0135600019600384901b60f8161c191690558580806116cd565b818101358355602094850194600190930192016116b2565b600582015490600182018211610836578160016005930183850155600160405191808352016020820152600080516020615593833981519152604060043592a290506109cf565b60405162461bcd60e51b815260206004820152600d60248201526c0c6deded8c8deeedc40786468d609b1b6044820152606490fd5b90506201518081018091116108365742101583610997565b60405162461bcd60e51b815260206004820152600f60248201526ece94206f7574206f662072616e676560881b6044820152606490fd5b5060a460643501358060000b81036102d1576117f590614a54565b610968565b50608460643501358060000b81036102d15761181590614a54565b610962565b506064803501358060000b81036102d15761183490614a54565b61095c565b50604460643501358060000b81036102d15761185490614a54565b610956565b50602460643501358060000b81036102d15761187490614a54565b610950565b60405162461bcd60e51b815260206004820152600a602482015269195b5c1d1e481b5bdbd960b21b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272776569676874206f7574206f662072616e676560681b6044820152606490fd5b50606460ff6118f860e4833501614a46565b161115610909565b506108f0611910336004356149e6565b90506108e7565b503360009081526000805160206155b3833981519152602052604090205460ff166108e0565b346102d15760403660031901126102d15761195661400b565b600435600052600160205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346102d1576020806003193601126102d15760043560008181526003835260409020546119c1906001600160a01b03161515614802565b6000908152600982526040902054600c8110611a9157506005905b6007815260406000206040516119f181614122565b8154815260018201548382015260028201546040820152600382015460608201526004820154608082015260e061ffff60066005850154948560a0860152015460ff811660c085015260081c169101526203f4808101809111610836574211611a89576001915b80600201928360021161083657611a7181608095614662565b91604051936002855284015260408301526060820152f35b600091611a58565b60068110611aa257506003906119dc565b600311611ab1576001906119dc565b6000906119dc565b346102d15760003660031901126102d157611ad2614322565b611ada61469f565b600160ff1960025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b346102d15760a03660031901126102d15760043560643560ff81168091036102d1576084359061ffff908183168093036102d157611b4f61469f565b8360005260039160209280845260018060a01b0360406000205416331480156120c8575b80156120b3575b611b83906146bd565b6001831015806120a8575b15612073576107e885101580612067575b15612033578560005260078452604060002091856006840154918560ff84161492831593612023575b50505015611fe857602490813581840155604435600484015560059283429101558660005260098552604060002080549060018201809211611fb0575560008781526009865260409020546002908290600c8110611fc5575050838101809111611f9b575b876000526007865283604060002001546203f4808101809111611fb057421115611f8e575b611c5b88614d87565b91886000528087528460406000200193845495611c788488614662565b80965560405192611c888461413e565b604051611c9481614190565b60078152664a616e7561727960c81b8b8201528452604051611cb581614190565b6008815267466562727561727960c01b8b8201528a850152604051611cd981614190565b8281526409ac2e4c6d60db1b8b8201526040850152604051611cfa81614190565b82815264105c1c9a5b60da1b8b820152606085015260405190611d1c82614190565b8152624d617960e81b8a8201526080840152604051611d3a81614190565b60048152634a756e6560e01b8a82015260a0840152604051611d5b81614190565b60048152634a756c7960e01b8a82015260c0840152604051611d7c81614190565b6006815265105d59dd5cdd60d21b8a82015260e0840152604051611d9f81614190565b600981526829b2b83a32b6b132b960b91b8a820152610100840152604051611dc681614190565b600781526627b1ba37b132b960c91b8a820152610120840152604051611deb81614190565b60088152672737bb32b6b132b960c11b8a820152610140840152604051611e1181614190565b60088152672232b1b2b6b132b960c11b8a82015261016084015260001988019160ff8311611f7a57600c60ff84161015611f6657507f06f9bc160d6aa05f662af6ffef695374f8b5bfc09362dcd998b9deb9c1436519611efc8b611f0c8c8f9a9699604099611ee9600c9f9e9a611ea58f9a916000805160206155938339815191529f611fe0906021941b16015197615491565b968d519781611ebd8a935180928a80870191016141cc565b8201600160fd1b88820152611eda825180938a87850191016141cc565b010360018101885201866141ab565b8a519586956060875260608701906141ef565b928501528382038a8501526141ef565b0390a2825191825287820152a214611f2057005b7fae7fce676281a763ee71049f846d28ee4796c9195fd81fc1c7e78fbae4a4d4759183600052600882526002604060002001600160ff19825416179055604051908152a2005b634e487b7160e01b60009081526032600452fd5b634e487b7160e01b60009081526011600452fd5b6001810180911115611c52575b82634e487b7160e01b60005260116004526000fd5b83634e487b7160e01b60005260116004526000fd5b60068110611fdc57508101809111611f9b57611c2d565b10611c2d575080611c2d565b60405162461bcd60e51b81526004810185905260136024820152720e6e8d2d8d840c6eae4e4cadce840dadedce8d606b1b6044820152606490fd5b60081c1614159050858880611bc8565b60405162461bcd60e51b815260048101859052600c60248201526b34b73b30b634b2103cb2b0b960a11b6044820152606490fd5b50610834851115611b9f565b60405162461bcd60e51b815260048101859052600d60248201526c0d2dcecc2d8d2c840dadedce8d609b1b6044820152606490fd5b50600c831115611b8e565b50611b836120c133886149e6565b9050611b7a565b506000805160206155d383398151915260005260018452604060002033600052845260ff60406000205416611b73565b346102d15760203660031901126102d15760043560005260086020526040600020805460ff60026040519361213b856121348160018501614071565b03866141ab565b01541661215a60405193849384526060602085015260608401906141ef565b90151560408301520390f35b346102d1576102a960a07f10c6861248a0d0f4376512cb8e7482a88a8865601494eb1fd99ec02dfc29583361219a36613ff5565b90928392916121a761469f565b836000526003602052600180831b03604060002054163314801561223b575b8015612226575b6121d6906146bd565b8360005260076020526002604060002001818154915560405191606083526012606084015271636f6e766572736174696f6e5f6461696c7960701b608084015260208301526040820152a2614c25565b506121d661223433866149e6565b90506121cd565b503360009081526000805160206155b3833981519152602052604090205460ff166121c6565b346102d15760003660031901126102d15760206040516000805160206155d38339815191528152f35b346102d15760003660031901126102d1576020600c54604051908152f35b346102d15760203660031901126102d1576001600160a01b036122c9614021565b1680156122ff576000526005602052604060002054156000146122f657602060005b60ff60405191168152f35b602060016122eb565b60405162461bcd60e51b815260206004820152600a6024820152693d32b9379037bbb732b960b11b6044820152606490fd5b346102d1576020806003193601126102d1576004356000818152600383526040902054612368906001600160a01b03161515614802565b6000908152600382526040902060050154603c81106123d75750603c6123d360405161239381614190565b601881527f3520796561727320636f6d706c65746520617263686976650000000000000000848201525b60408051948594855284015260408301906141ef565b0390f35b60308110612409575060306123d36040516123f181614190565b60078152663420796561727360c81b848201526123bd565b6024811061243b575060246123d360405161242381614190565b60078152663320796561727360c81b848201526123bd565b6018811061246d575060186123d360405161245581614190565b60078152663220796561727360c81b848201526123bd565b600c811061249e5750600c6123d360405161248781614190565b6006815265185b9b9d585b60d21b848201526123bd565b600681106124d2575060066123d36040516124b881614190565b60098152683430b63316bcb2b0b960b91b848201526123bd565b6003116125045760036123d36040516124ea81614190565b6009815268717561727465726c7960b81b848201526123bd565b60016123d360405161251581614190565b601281527163757272656e74206d6f6e7468206f6e6c7960701b848201526123bd565b346102d15760203660031901126102d1576004356000526003602052602060018060a01b0360406000205416604051908152f35b346102d15760003660031901126102d1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102d15760003660031901126102d1576020600e54604051908152f35b346102d15760203660031901126102d15760043560005260096020526020604060002054604051908152f35b346102d15760203660031901126102d1576004356000526007602052610100604060002061ffff815491600181015490600281015460038201546004830154916006600585015494015494604051978852602088015260408701526060860152608085015260a084015260ff811660c084015260081c1660e0820152f35b346102d15760003660031901126102d157602060ff600254166040519015158152f35b346102d15760403660031901126102d1576024356001600160401b0381116102d1576126e76126d1606092369060040161425f565b600435600052600a6020526040600020906142a6565b60ff8154169060ff600260018301549201541690604051921515835260208301526040820152f35b346102d15760403660031901126102d15760043561272b61400b565b906127346142cc565b6001600160a01b039182169161274b8315156149ae565b82600052602090600582526040600020546127db57907f0ea8df787dde63a7bdc34d17097adf25749a3521f660e92dabdff8d6ee91d18a9183600052600382526040600020541692836000526005825260006040812055846000528060406000205580600052600382526040600020856001600160601b0360a01b825416178155600342910155604051908152a3005b60405162461bcd60e51b815260048101839052600f60248201526e746f20616c7265616479206f776e7360881b6044820152606490fd5b346102d15760203660031901126102d157600435600052600b6020526123d3610d54612848604060002060405192838092614071565b6040519182916020835260208301906141ef565b346102d15760203660031901126102d1576004356000526003602052604060002060018060a01b03815416604051916128a38361289c8160018501614071565b03846141ab565b6002810154906003810154906005810154600682015460078301549060ff60088501541692600a6009860154950154956128ef6040519a8b9a8b526101408060208d01528b01906141ef565b9760408a01526060890152608088015260a087015260c0860152151560e08501526101008401526101208301520390f35b60803660031901126102d1576004356001600160401b0381116102d15761294b903690600401614214565b906024356001600160401b0381116102d15761296b903690600401614214565b91906044356001600160401b0381116102d15761298c90369060040161425f565b606435949093906001600160a01b03861686036102d1576002600054146135d05760026000556129ba61469f565b6001600160a01b03861615613599576001600160a01b038616600090815260056020526040902054613554576103e8600d54101561351a578451801515908161350e575b50156134db5760ff6040516020818851612a1b8183858d016141cc565b8101600481520301902054166134a85767016345785d8a00003410613474576060937f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166131cb575b50506040516020818651612a838183858b016141cc565b81016004815203019020600160ff19825416179055600c5493612aa585614504565b600c5560018060a01b038616600052600560205284604060002055604051612acc81614175565b6000815260405190612add82614175565b6000825260405192612aee8461413e565b60018060a01b038916845260208401524260408401524260608401526080830152600160a0830152600060c0830152600060e0830152600061010083015260006101208301524261014083015261016082015284600052600360205260406000209060018060a01b038151166001600160601b0360a01b835416178255612b7c60208201516001840161459b565b604081015160028301556060810151600383015560808101518051906001600160401b03821161119a57600160401b821161119a5760209060048501548360048701558084106131ab575b500160048401600052602060002060005b83811061318e57505050508060a0610160920151600584015560c0810151600684015560e08101516007840155612c256101008201511515600885019060ff801983541691151516179055565b6101208101516009840155610140810151600a840155015190815191600160401b831161119a57600b82015483600b840155808410613115575b506020600b9101910160005260206000206000915b8383106130f85750505050604051612c8b81614122565b603280825280602083015280604083015280606083015280608083015260a0820152604051612cb981614190565b60078152661b995d5d1c985b60ca1b602082015260c0820152600060e0820152846000526006602052600260e060406000209260ff81511660ff19855416178455612d1c60ff602083015116859061ff0082549160081b169061ff001916179055565b6040810151845462ff0000191660109190911b62ff0000161784556060810151845463ff000000191660189190911b63ff000000161784556080810151845464ff00000000191660209190911b64ff000000001617845560a0810151845465ff0000000000191660289190911b65ff000000000016178455612da560c08201516001860161459b565b015191015583600052600b6020526040600020612dc28154614037565b601f81116130d6575b50600e661b995d5d1c985b60ca1b019055612ea8612de761545d565b612def615477565b60ff60405192612dfe84614122565b60008452600060208501526000604085015260006060850152600060808501524260a08501521660c083015261ffff908160e084019116815287600052600760205260ff60c060066040600020865181556020870151600182015560408701516002820155606087015160038201556080870151600482015560a08701516005820155019401511660ff19845416178355511662ffff0082549160081b169062ffff001916179055565b600d546001810180911161083657600d55600e5467016345785d8a0000810180911161083657600e55600080808067016345785d8a00007f00000000000000000000000000000000000000000000000000000000000000005af1612f0a61466f565b50156130915767016345785d8a00003411613033575b9190604051926040840160408552835180915260206060860194019060005b81811061301d575050508383036020850152808352602083019260208260051b82010193836000925b848410612fe5576020896001600160a01b038c1633827f531bd8ca2b17505aaa50d843fabe2dfd9a3bb9e20c511d2288b24bd484861b028d8d038ea460405167016345785d8a00008152817f6fe296e805108cd514fea415210be4016149b01eeb08effbe130951b6a5f6c0b843393a36001600055604051908152f35b90919293949560208061300d600193601f198682030188526130078b886144d3565b906144b2565b9801940194019294939190612f68565b8251865260209586019590920191600101612f3f565b67016345785d89ffff19340134811161083657600080808093335af161305761466f565b50612f205760405162461bcd60e51b815260206004820152600d60248201526c1c99599d5b990819985a5b1959609a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f7472656173757279207472616e73666572206661696c656400000000000000006044820152606490fd5b6130f29082600052601f6020600020910160051c81019061453d565b86612dcb565b60016020826131098394518661459b565b01920192019190612c74565b600b83016000526020600020908482015b8183018110613136575050612c5f565b8061314360019254614037565b80613150575b5001613126565b601f908181118414613169575050600081555b8c613149565b61318560009284845260208420920160051c820185830161453d565b81835555613163565b82516001600160a01b031681830155602090920191600101612bd8565b6131c590600487016000528484600020918201910161453d565b8a612bc7565b9080969394508295920361344057604051809663c2a93e3760e01b825280602483016020600485015252604482019060448160051b8401019380926000915b83831061340d57505050505080600092038160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa9485156134015760009561330b575b508451926132638461449b565b9361327160405195866141ab565b808552613280601f199161449b565b01366020860137839060005b87518110156132fd5760206132a1828a614513565b510151156132c857806132b76132c3928a614513565b51516111468289614513565b61328c565b60405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b210383937b7b360991b6044820152606490fd5b509295509250928580612a6c565b9094503d806000833e61331e81836141ab565b60208282810103126102d1578151906001600160401b0382116102d157808301601f8385010112156102d15781830151906133588261449b565b9361336660405195866141ab565b828552602085019382820160208560061b8385010101116102d15793602085830101945b60208560061b828501010186106133a8575050505050509385613256565b60408685850103126102d1576040518060408101106001600160401b0360408301111761119a576040810160405286518152602087015180151581036102d157602093828592836040950152815201960195915061338a565b6040513d6000823e3d90fd5b919395602061342f819260019496986043199082030187526130078a876144d3565b97019301930190928a94929361320a565b60405162461bcd60e51b815260206004820152600c60248201526b0d8cadc40dad2e6dac2e8c6d60a31b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b666565203c20302e31204f4760a01b6044820152606490fd5b60405162461bcd60e51b815260206004820152600b60248201526a6e616d652065786973747360a81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600b60248201526a0dcc2daca40d8cadccee8d60ab1b6044820152606490fd5b602091501115876129fe565b60405162461bcd60e51b81526020600482015260126024820152711b585e081cdd5c1c1b1e481c995858da195960721b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f77616c6c657420616c726561647920686173206167656e7400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e34b73b30b634b2103a379030b2323960891b6044820152606490fd5b604051633ee5aeb560e01b8152600490fd5b346102d15760203660031901126102d1576004356000526006602052604060002080546002604051926136238461361c8160018501614071565b03856141ab565b015461367c60405193849360ff908181168652818160081c166020870152818160101c166040870152818160181c166060870152818160201c16608087015260281c1660a08501526101008060c08601528401906141ef565b9060e08301520390f35b346102d15760203660031901126102d1576001600160a01b036136a7614021565b1660005260056020526020604060002054604051908152f35b346102d15760003660031901126102d1576136d9614322565b60025460ff8116156137185760ff19166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b604051638dfc202b60e01b8152600490fd5b346102d1576020806003193601126102d1576004356000526003815260406000206040516137578161413e565b81546001600160a01b031681526040516001919061377b81610d5481878701614071565b8482015260028301549160408201928352600384015460608301526137a26004850161483d565b6080830152600584015460a0830152600684015460c0830152600784015460e083015260ff60088501541615156101008301526009840154916101208101928352600b600a860154956101408301968752019182546138008161449b565b9361380e60405195866141ab565b8185526000908152888120898087015b84841061387f5750505050505061016001525191519051420342811161083657620151809004928361386257606093506000905b6040519384528301526040820152f35b606483029383850460641484151715610836576060940490613852565b8591829160405161389481610d548189614071565b8152019201920191908a9061381e565b346102d15760403660031901126102d1576138bd61400b565b336001600160a01b038216036138d9576102a990600435614424565b60405163334bd91960e11b8152600490fd5b346102d15760203660031901126102d157600435600081815260036020526040902054613922906001600160a01b03161515614802565b60005260076020526060604060002060066040519161394083614122565b80548352600181015460208401526002810154604084015260038101548484015260048101546080840152600581015460a0840152015460e060c083019260ff83168452019161ffff809260081c16835261399961545d565b60ff806139a4615477565b9351169116809114938415946139cb575b5060405193151584526020840152166040820152f35b51831683831614159350856139b5565b346102d1576139e936613ff5565b6139f161469f565b81600052817f10c6861248a0d0f4376512cb8e7482a88a8865601494eb1fd99ec02dfc29583360a060209360038552600180831b036040600020541633148015613af5575b8015613ae0575b613a46906146bd565b8360005260078552604060002081815491556040519160608352600b60608401526a6d656d6f72795f636f726560a81b6080840152868301526040820152a281600052600881526002604060002001805460ff8116613aa157005b60ff19169055600381526005604060002001805460058101808211610836576000805160206155938339815191529381604094558351928352820152a2005b50613a46613aee33866149e6565b9050613a3d565b506000805160206155d383398151915260005260018552604060002033600052855260ff60406000205416613a36565b346102d15760403660031901126102d1576102a9600435613b4461400b565b90806000526001602052613b5f60016040600020015461437e565b6143a4565b346102d15760003660031901126102d1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102d15760603660031901126102d15760443560043560058210156102d157613bd161469f565b8060005260206003815260018060a01b036040600020541633148015613cb8575b8015613ca3575b613c02906146bd565b816000526003815260406000209060078201918254926001840180941161083657839055426003820155600a830615613c6a575b506040519384528301527fae9f8ea4031d27c12e1fca7c2bfaaef9034ff66849251188e28970cd44d1c590604060243593a3005b6005018054906001820190818311610836578592826000805160206155938339815191529360409355825191825285820152a284613c36565b50613c02613cb133846149e6565b9050613bf9565b506000805160206155d383398151915260005260018152604060002033600052815260ff60406000205416613bf2565b346102d15760203660031901126102d15760043560005260016020526020600160406000200154604051908152f35b346102d15760403660031901126102d1576001600160401b036024358181116102d157366023820112156102d15780600401359182116102d15736602483830101116102d1576020602491604093600435600052600a83528460002090808651958694018437820190815203019020815190613d9282614107565b60ff8154161515918281528360ff600260018501549485602086015201541691015282519182526020820152f35b346102d1576020806003193601126102d15760043560005260038152613dec600460406000200161483d565b906040519181839283018184528251809152816040850193019160005b828110613e1857505050500390f35b83516001600160a01b031685528695509381019392810192600101613e09565b346102d15760403660031901126102d1576102a9613e5461400b565b613e5c6142cc565b6004356148ec565b346102d1576102a960a07f10c6861248a0d0f4376512cb8e7482a88a8865601494eb1fd99ec02dfc295833613e9836613ff5565b9092839291613ea561469f565b836000526003602052600180831b036040600020541633148015613f32575b8015613f1d575b613ed4906146bd565b836000526007602052600160406000200181815491556040519160608352600b60608401526a647265616d5f6461696c7960a81b608084015260208301526040820152a2614c25565b50613ed4613f2b33866149e6565b9050613ecb565b503360009081526000805160206155b3833981519152602052604090205460ff16613ec4565b346102d15760203660031901126102d1576004359063ffffffff60e01b82168092036102d1576020916380ac58cd60e01b8114908115613fe4575b8115613fd3575b8115613fa8575b5015158152f35b637965db0b60e01b811491508115613fc2575b5083613fa1565b6301ffc9a760e01b14905083613fbb565b633bcd582960e11b81149150613f9a565b635b5e139f60e01b81149150613f93565b60409060031901126102d1576004359060243590565b602435906001600160a01b03821682036102d157565b600435906001600160a01b03821682036102d157565b90600182811c92168015614067575b602083101461405157565b634e487b7160e01b600052602260045260246000fd5b91607f1691614046565b906000929180549161408283614037565b9182825260019384811690816000146140e457506001146140a4575b50505050565b90919394506000526020928360002092846000945b8386106140d057505050500101903880808061409e565b8054858701830152940193859082016140b9565b9294505050602093945060ff191683830152151560051b0101903880808061409e565b606081019081106001600160401b0382111761119a57604052565b61010081019081106001600160401b0382111761119a57604052565b61018081019081106001600160401b0382111761119a57604052565b60c081019081106001600160401b0382111761119a57604052565b602081019081106001600160401b0382111761119a57604052565b604081019081106001600160401b0382111761119a57604052565b90601f801991011681019081106001600160401b0382111761119a57604052565b60005b8381106141df5750506000910152565b81810151838201526020016141cf565b90602091614208815180928185528580860191016141cc565b601f01601f1916010190565b9181601f840112156102d1578235916001600160401b0383116102d1576020808501948460051b0101116102d157565b6001600160401b03811161119a57601f01601f191660200190565b81601f820112156102d15780359061427682614244565b9261428460405194856141ab565b828452602083830101116102d157816000926020809301838601378301015290565b6020906142c09282604051948386809551938492016141cc565b82019081520301902090565b3360009081526000805160206155b383398151915260205260409020546000805160206155d38339815191529060ff16156143045750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527fb9cbbae02fe941283ec0eefd7b121e3bc7f89fae077b27bdd75a7fd4cf1543a860205260409020547f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9060ff16156143045750565b80600052600160205260406000203360005260205260ff60406000205416156143045750565b906000918083526001602052604083209160018060a01b03169182845260205260ff6040842054161560001461441f5780835260016020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b906000918083526001602052604083209160018060a01b03169182845260205260ff60408420541660001461441f578083526001602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6001600160401b03811161119a5760051b60200190565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e19823603018112156102d15701602081359101916001600160401b0382116102d15781360383136102d157565b60001981146108365760010190565b80518210156145275760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b818110614548575050565b6000815560010161453d565b9190601f811161456357505050565b61458f926000526020600020906020601f840160051c83019310614591575b601f0160051c019061453d565b565b9091508190614582565b91909182516001600160401b03811161119a576145c2816145bc8454614037565b84614554565b602080601f83116001146145fe5750819293946000926145f3575b50508160011b916000199060031b1c1916179055565b0151905038806145dd565b90601f198316958460005282600020926000905b88821061464a57505083600195969710614631575b505050811b019055565b015160001960f88460031b161c19169055388080614627565b80600185968294968601518155019501930190614612565b9190820180921161083657565b3d1561469a573d9061468082614244565b9161468e60405193846141ab565b82523d6000602084013e565b606090565b60ff600254166146ab57565b60405163d93c066560e01b8152600490fd5b156146c457565b60405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5cd95960921b6044820152606490fd5b9060405161470781614122565b60e060028294805460ff908181168652818160081c166020870152818160101c166040870152818160181c166060870152818160201c16608087015260281c1660a085015260405161476081610d548160018601614071565b60c08501520154910152565b903590601e19813603018212156102d157018035906001600160401b0382116102d1576020019181360383136102d157565b90815460ff908181168352818160081c166020840152818160101c166040840152818160181c166060840152818160201c16608084015260281c1660a082015260e060026147f96101008060c0860152840160018601614071565b93015491015290565b1561480957565b60405162461bcd60e51b815260206004820152600c60248201526b1859d95b9d0808595e1a5cdd60a21b6044820152606490fd5b9060405191828154918282526020928383019160005283600020936000905b8282106148725750505061458f925003836141ab565b85546001600160a01b03168452600195860195889550938101939091019061485c565b1561489c57565b60405162461bcd60e51b815260206004820152601060248201526f6f776e65722f61646d696e206f6e6c7960801b6044820152606490fd5b80548210156145275760005260206000200190600090565b6001600160a01b0391821691821561497d57600090828252600360205260046040832001805490600160401b82101561496957816149529160017f32a4407627195670dd4c989ee38441e11ab643ccd4759c25d9c0bd6a635039db9695940181556148d4565b819291549060031b9187831b921b191617905580a3565b634e487b7160e01b84526041600452602484fd5b60405162461bcd60e51b81526020600482015260096024820152683d32b937903ab9b2b960b91b6044820152606490fd5b156149b557565b60405162461bcd60e51b8152602060048201526009602482015268746f203d207a65726f60b81b6044820152606490fd5b60005260036020526149fe600460406000200161483d565b9060005b8251811015614a3e576001600160a01b0380614a1e8386614513565b511690831614614a3657614a3190614504565b614a02565b505050600190565b505050600090565b3560ff811681036102d15790565b60000b6009198112159081614a67575090565b600a9150131590565b60ff1690600090810b91818382019384129112908015821691151617614ab857808212614ab0575b5060648113614aa8575b60ff1690565b506064614aa2565b905038614a98565b634e487b7160e01b81526011600452602490fd5b60405190614ad982614190565b600a825269185b985b1e5d1a58d85b60b21b6020830152565b9060068110156145275760051b0190565b90929192604080948151614b1681614107565b6001815260209160ff60028484019342855282878201941694858552614b4a61137660009d8e8d8152600a8b52208b6142a6565b5160018201550191511660ff1982541617905584875260038252600b83882001805490600160401b821015614c115790614b89916001820181556148d4565b614bfd5794600080516020615573833981519152819798614bb9876000805160206155538339815191529961459b565b8486519160608352614bce606084018a6141ef565b90868385015283820391828a860152520190a2614bf483519484869586528501906141ef565b918301520390a2565b634e487b7160e01b88526004889052602488fd5b634e487b7160e01b89526041600452602489fd5b600090808252600760205260408220614c3c61545d565b90614c45615477565b916006820192835460ff811615614d5f575083549360ff8086169316808414801590614d4b575b614c7b575b5050505050505050565b600595877f730360d9766138aaf0bfbcb8ba19e14d040c069cb9b8daab2e5c3576d2b545e660a0614cf79760405190815261ffff8560081c1660208201526060604082015260076060820152666d6f6e74686c7960c81b6080820152a260ff19161781559062ffff0082549160081b169062ffff001916179055565b83600182015583600282015501546230c7808101809111614d37574211614d24575b808080808080614c71565b8152600960205260408120553880614d19565b634e487b7160e01b83526011600452602483fd5b5061ffff808416908760081c161415614c6c565b62ffffff191660ff929092169190911760089190911b62ffff0016179091555061458f915050565b6000908082526020600981526040918284205460039081811461532b57600681146151ea57600c81146150ad57601814614f47578185528252614dd68385206007600682015491015490614662565b9060648214614ed95761016d808314614e7057506103e8809214614e07575050505190614e0282614175565b815290565b90929193507f85b48c5b9cdd55cc3a41e735f9aa599cffba8d8c300f240111645d63939d2c2a608083518481526011858201527013595b5bdc9e48135a5b1b195b9b9a585b607a1b9586606083015287820152a25191614e6683614190565b6011835282015290565b9392945090507f85b48c5b9cdd55cc3a41e735f9aa599cffba8d8c300f240111645d63939d2c2a608083518481526010858201526f59656172206f66204d656d6f7269657360801b9586606083015287820152a25191614ecf83614190565b6010835282015290565b92919350508051918183526013828401527f85b48c5b9cdd55cc3a41e735f9aa599cffba8d8c300f240111645d63939d2c2a60807243656e74757279206f66204d656d6f7269657360681b94856060820152606487820152a25191614f3d83614190565b6013835282015290565b8392939594955190614f5882614190565b600e82526d657465726e616c5f6d656d6f727960901b858301528460ff60028651614f8281614107565b600181528a614faa6113768a87850193428552600a8287019960188b528d83525220896142a6565b5160018201550191511660ff198254161790558287528452600b83872001805490600160401b8210156150995790614fe7916001820181556148d4565b6150855781836000805160206155738339815191526d457465726e616c204d656d6f727960901b97989961502d600080516020615553833981519152966150679661459b565b898851916060835261504260608401876141ef565b9060188385015283820391828c860152520190a28451918291868352868301906141ef565b6018888301520390a2519161507b83614190565b600e835282015290565b634e487b7160e01b87526004879052602487fd5b634e487b7160e01b88526041600452602488fd5b5083929395949551906150bf82614190565b600d82526c36b2b6b7b93cafb6b0b9ba32b960991b858301528460ff600286516150e881614107565b600181528a6151106113768a87850193428552600a82870199600c8b528d83525220896142a6565b5160018201550191511660ff198254161790558287528452600b83872001805490600160401b821015615099579061514d916001820181556148d4565b6150855781836000805160206155738339815191526c26b2b6b7b93c9026b0b9ba32b960991b979899615192600080516020615553833981519152966151cc9661459b565b89885191606083526151a760608401876141ef565b90600c8385015283820391828c860152520190a28451918291868352868301906141ef565b600c888301520390a251916151e083614190565b600d835282015290565b5083929395949551906151fc82614190565b600f82526e36b2b6b7b93cafb3bab0b93234b0b760891b858301528460ff6002865161522781614107565b600181528a61524f6113768a87850193428552600a8287019960068b528d83525220896142a6565b5160018201550191511660ff198254161790558287528452600b83872001805490600160401b821015615099579061528c916001820181556148d4565b6150855781836000805160206155738339815191526e26b2b6b7b93c9023bab0b93234b0b760891b9798996152d36000805160206155538339815191529661530d9661459b565b89885191606083526152e860608401876141ef565b9060068385015283820391828c860152520190a28451918291868352868301906141ef565b6006888301520390a2519161532183614190565b600f835282015290565b50839293959495519061533d82614190565b600d82526c36b2b6b7b93cafb5b2b2b832b960991b858301528460ff6002865161536681614107565b600181528a61538d6113768a87850193428552600a828701998b8b528d83525220896142a6565b5160018201550191511660ff19825416179055828752808552600b84882001805490600160401b821015614c1157906153cb916001820181556148d4565b614bfd579161544a91846000805160206155738339815191526c26b2b6b7b93c9025b2b2b832b960991b98999a615411856000805160206155538339815191529861459b565b8a8951916060835261542660608401886141ef565b90868385015283820391828d860152520190a28551928392878452878401906141ef565b90888301520390a251916151e083614190565b600160ff600c62278d00420406160160ff81116108365790565b6107e86301e13380420481018091116108365761ffff1690565b801561553457600081805b61552057506154aa81614244565b916154b860405193846141ab565b818352601f196154c783614244565b01908060209236848701375b6154dd5750505090565b600a90603093828206850180951161083657801561083657600019019385518510156145275760f81b6001600160f81b03191660001a85850184015304806154d3565b9061552c600a91614504565b91048061549c565b5060405161554181614190565b60018152600360fc1b60208201529056fe4d4ca4452701c64d62e210aa5b23f7d376cf2d485ebc4fee8528e048afb0e2cfd0ba61587fc16fc1a3274fc4cd4ecf1243baadf9d8dde73ab61d5a7af1474ff406bbb7cb56b5f3845ce5ad015d25cbf87ed1c37c635e2082acb2610598f15cc750efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d37694a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212203902c240aebaebed5c47d3d0f843224da3025ffc9de696da39ad394c10704d6664736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Designed for direct deployment – no upgrade proxy included.  For         upgradability, wrap this logic in a UUPS/Beacon proxy.",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "AgentConversation(uint256,bytes32,uint8,uint256)": {
        "details": "Emitted when agent has a conversation (without personality evolution)"
      },
      "AuthorizedUsage(uint256,address)": {
        "details": "This emits when a user is authorized to use the data"
      },
      "Cloned(uint256,uint256,address,address)": {
        "details": "This emits when data is cloned"
      },
      "Minted(uint256,address,address,bytes32[],string[])": {
        "details": "This emits when a new functional NFT is minted"
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "PersonalityEvolved(uint256,bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,string,uint256),(int8,int8,int8,int8,int8,int8,string,uint8))": {
        "details": "Emitted when agent personality evolves from dream processing"
      },
      "PersonalityMilestone(uint256,string,uint8,string)": {
        "details": "Emitted when agent reaches personality milestones"
      },
      "PublishedSealedKey(address,uint256,bytes16[])": {
        "details": "This emits when a sealed key is published"
      },
      "ResponseStyleEvolved(uint256,string,string[])": {
        "details": "Emitted when agent's response style evolves"
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transferred(uint256,address,address)": {
        "details": "This emits when data is transferred with ownership"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "canProcessDreamToday(uint256)": {
        "params": {
          "tokenId": "Agent to check"
        },
        "returns": {
          "canProcess": "True if agent can process a dream today"
        }
      },
      "getAgentMemory(uint256)": {
        "params": {
          "tokenId": "Agent to query"
        },
        "returns": {
          "_0": "memory Current memory structure"
        }
      },
      "getConsolidationReward(uint256)": {
        "params": {
          "tokenId": "Agent to check"
        },
        "returns": {
          "baseReward": "Base intelligence reward",
          "earlyBirdBonus": "Bonus for early consolidation",
          "streakBonus": "Bonus from consolidation streak",
          "totalReward": "Total intelligence reward"
        }
      },
      "getEvolutionStats(uint256)": {
        "params": {
          "tokenId": "Agent to analyze"
        },
        "returns": {
          "evolutionRate": "Rate of personality change",
          "lastEvolution": "Timestamp of last evolution",
          "totalEvolutions": "Number of personality changes"
        }
      },
      "getMemoryAccess(uint256)": {
        "params": {
          "tokenId": "Agent to check"
        },
        "returns": {
          "memoryDepth": "Human-readable description",
          "monthsAccessible": "Number of months accessible "
        }
      },
      "getPersonalityTraits(uint256)": {
        "params": {
          "tokenId": "Agent to query"
        },
        "returns": {
          "_0": "Current personality traits"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "mintAgent(bytes[],string[],string,address)": {
        "params": {
          "agentName": "Unique display name (≤32 bytes)",
          "descriptions": "Data descriptions parallel to `proofs`",
          "proofs": "Optional ZK‑proof blobs (pass `[]` to skip)",
          "to": "Recipient address (must NOT already own an agent)"
        }
      },
      "needsConsolidation(uint256)": {
        "params": {
          "tokenId": "Agent to check"
        },
        "returns": {
          "currentMonth": "Current month",
          "currentYear": "Current year",
          "isNeeded": "True if month has changed since last consolidation"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "processDailyDream(uint256,bytes32,bytes32,(int8,int8,int8,int8,int8,int8,string,uint8))": {
        "details": "ZK‑verified dream *content* lives off‑chain; contract stores only         hash + counters to keep gas low."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "updateConversationMemory(uint256,bytes32)": {
        "details": "Append‑only daily hash for conversations."
      },
      "updateDreamMemory(uint256,bytes32)": {
        "details": "Append‑only daily hash for dreams; resets automatically on month change."
      }
    },
    "stateVariables": {
      "verifier": {
        "return": "The address of the verifier contract",
        "returns": {
          "_0": "The address of the verifier contract"
        }
      }
    },
    "title": "DreamscapeAgent – iNFT with Hierarchical Memory & Personality Evolution",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canProcessDreamToday(uint256)": {
        "notice": "Check if agent can process dream today (24h cooldown)"
      },
      "consolidateMonth(uint256,bytes32,bytes32,uint8,uint16)": {
        "notice": "User‑driven monthly consolidation.  Merges daily files off‑chain and         stores the finalised month hash on‑chain, rewarding the agent."
      },
      "getAgentMemory(uint256)": {
        "notice": "Get agent's hierarchical memory structure"
      },
      "getConsolidationReward(uint256)": {
        "notice": "Get consolidation reward preview"
      },
      "getEvolutionStats(uint256)": {
        "notice": "Get personality evolution statistics"
      },
      "getMemoryAccess(uint256)": {
        "notice": "Get memory access level based on intelligence"
      },
      "getPersonalityTraits(uint256)": {
        "notice": "Get agent's current personality traits"
      },
      "mintAgent(bytes[],string[],string,address)": {
        "notice": "Mint a *blank‑slate* agent.  One per wallet."
      },
      "needsConsolidation(uint256)": {
        "notice": "Check if consolidation is needed"
      },
      "processDailyDream(uint256,bytes32,bytes32,(int8,int8,int8,int8,int8,int8,string,uint8))": {
        "notice": "Called once per «dream»; every 5th dream triggers evolution."
      },
      "recordConversation(uint256,bytes32,uint8)": {
        "notice": "Lightweight conversation recording; boosts intelligence every 10th convo."
      },
      "updateMemoryCore(uint256,bytes32)": {
        "notice": "Stores the yearly «memory core» hash and grants bonus INT."
      },
      "verifier()": {
        "notice": "The verifier interface that this NFT uses"
      }
    },
    "notice": "Single‑per‑wallet autonomous agent that stores memories in a three‑layer         hierarchy (daily → monthly → yearly) and evolves its personality from         analysed dreams & conversations.         This contract is a *lean* revision: we removed unbounded on‑chain arrays         of raw hashes to save gas and instead rely on off‑chain storage + a         rotating «current» hash per period.  All public getters needed by dApp         remain, but they now return an empty array and are marked *deprecated*.         The contract **still** complies with ERC‑7857 by preserving the original         ABI of `mintAgent(...)`; callers MAY pass empty arrays when proofs are         not needed.  Optional ZKP verification can be disabled by setting the         `verifier` address to zero at deployment.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 672,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 26,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 562,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 862,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "agents",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(DreamAgent)841_storage)"
      },
      {
        "astId": 866,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "nameExists",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 870,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "ownerToTokenId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 875,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "agentPersonalities",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(PersonalityTraits)4044_storage)"
      },
      {
        "astId": 880,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "agentMemories",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(AgentMemory)4087_storage)"
      },
      {
        "astId": 885,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "pendingRewards",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(ConsolidationReward)857_storage)"
      },
      {
        "astId": 889,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "consolidationStreak",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 896,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "milestones",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_struct(MilestoneData)849_storage))"
      },
      {
        "astId": 900,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "responseStyles",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 903,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 906,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "totalAgents",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 909,
        "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
        "label": "totalFeesCollected",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(MilestoneData)849_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct DreamscapeAgent.MilestoneData)",
        "numberOfBytes": "32",
        "value": "t_struct(MilestoneData)849_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_struct(MilestoneData)849_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(string => struct DreamscapeAgent.MilestoneData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(MilestoneData)849_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(AgentMemory)4087_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPersonalityEvolution.AgentMemory)",
        "numberOfBytes": "32",
        "value": "t_struct(AgentMemory)4087_storage"
      },
      "t_mapping(t_uint256,t_struct(ConsolidationReward)857_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DreamscapeAgent.ConsolidationReward)",
        "numberOfBytes": "32",
        "value": "t_struct(ConsolidationReward)857_storage"
      },
      "t_mapping(t_uint256,t_struct(DreamAgent)841_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DreamscapeAgent.DreamAgent)",
        "numberOfBytes": "32",
        "value": "t_struct(DreamAgent)841_storage"
      },
      "t_mapping(t_uint256,t_struct(PersonalityTraits)4044_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPersonalityEvolution.PersonalityTraits)",
        "numberOfBytes": "32",
        "value": "t_struct(PersonalityTraits)4044_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AgentMemory)4087_storage": {
        "encoding": "inplace",
        "label": "struct IPersonalityEvolution.AgentMemory",
        "members": [
          {
            "astId": 4072,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "memoryCoreHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4074,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "currentDreamDailyHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 4076,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "currentConvDailyHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 4078,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "lastDreamMonthlyHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 4080,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "lastConvMonthlyHash",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 4082,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "lastConsolidation",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4084,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "currentMonth",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 4086,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "currentYear",
            "offset": 1,
            "slot": "6",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(ConsolidationReward)857_storage": {
        "encoding": "inplace",
        "label": "struct DreamscapeAgent.ConsolidationReward",
        "members": [
          {
            "astId": 852,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "intelligenceBonus",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 854,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "specialMilestone",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 856,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "yearlyReflection",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DreamAgent)841_storage": {
        "encoding": "inplace",
        "label": "struct DreamscapeAgent.DreamAgent",
        "members": [
          {
            "astId": 816,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 818,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "agentName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 820,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "createdAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 822,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 825,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "authorizedUsers",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 827,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "intelligenceLevel",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 829,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "dreamCount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 831,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "conversationCount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 833,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "personalityInitialized",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 835,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "totalEvolutions",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 837,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "lastEvolutionDate",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 840,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "achievedMilestones",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(MilestoneData)849_storage": {
        "encoding": "inplace",
        "label": "struct DreamscapeAgent.MilestoneData",
        "members": [
          {
            "astId": 844,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "achieved",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 846,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "achievedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 848,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "traitValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PersonalityTraits)4044_storage": {
        "encoding": "inplace",
        "label": "struct IPersonalityEvolution.PersonalityTraits",
        "members": [
          {
            "astId": 4029,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "creativity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4031,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "analytical",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4033,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "empathy",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4035,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "intuition",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4037,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "resilience",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4039,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "curiosity",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4041,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "dominantMood",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4043,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "lastDreamDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/DreamscapeAgent.sol:DreamscapeAgent",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
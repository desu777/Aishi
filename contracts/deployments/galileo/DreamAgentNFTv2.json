{
  "address": "0x2BA644C34A39F610C8d9beB9757220Fb7D7d728b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "conversationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum IPersonalityEvolution.ContextType",
          "name": "contextType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversationCount",
          "type": "uint256"
        }
      ],
      "name": "AgentConversation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLevel",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLevel",
          "type": "uint256"
        }
      ],
      "name": "AgentEvolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "AuthorizedUsage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "Cloned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dreamHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "intelligenceLevel",
          "type": "uint256"
        }
      ],
      "name": "DreamProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "milestone",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "traitValue",
          "type": "uint8"
        }
      ],
      "name": "MilestoneUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "_dataHashes",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "_dataDescriptions",
          "type": "string[]"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "creativity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "analytical",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "empathy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "intuition",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "resilience",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "curiosity",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dominantMood",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastDreamDate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IPersonalityEvolution.PersonalityTraits",
          "name": "newPersonality",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dreamsSoFar",
          "type": "uint256"
        }
      ],
      "name": "PersonalityActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dreamHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "creativity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "analytical",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "empathy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "intuition",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "resilience",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "curiosity",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dominantMood",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastDreamDate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IPersonalityEvolution.PersonalityTraits",
          "name": "newPersonality",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int8",
              "name": "creativityChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "analyticalChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "empathyChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "intuitionChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "resilienceChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "curiosityChange",
              "type": "int8"
            },
            {
              "internalType": "string",
              "name": "moodShift",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "evolutionWeight",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IPersonalityEvolution.PersonalityImpact",
          "name": "impact",
          "type": "tuple"
        }
      ],
      "name": "PersonalityEvolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "milestone",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "traitValue",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "traitName",
          "type": "string"
        }
      ],
      "name": "PersonalityMilestone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes16[]",
          "name": "_sealedKeys",
          "type": "bytes16[]"
        }
      ],
      "name": "PublishedSealedKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newStyle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "dominantTraits",
          "type": "string[]"
        }
      ],
      "name": "ResponseStyleEvolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldStyle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newStyle",
          "type": "string"
        }
      ],
      "name": "ResponseStyleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "Transferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_AGENTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERIFIER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agentPersonalities",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "creativity",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "analytical",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "empathy",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "intuition",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "resilience",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "curiosity",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "dominantMood",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "lastDreamDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agents",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intelligenceLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dreamCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "conversationCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "personalityInitialized",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalEvolutions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastEvolutionDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "authorizeUsage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "authorizedUsersOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "calculatePersonalityRarity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rarityScore",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "canProcessDreamToday",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canProcess",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "clonePublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "conversationHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dreamAnalysisHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dreamHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "emergencyAuthorizeUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "emergencyTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAgentName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getConversationHistory",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "conversationHashesArray",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCreationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDominantTraits",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "traits",
          "type": "string[]"
        },
        {
          "internalType": "uint8[]",
          "name": "values",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getDreamHistory",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "dreamHashesArray",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getEvolutionStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalEvolutions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "evolutionRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastEvolution",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "getPersonalitySummaries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "creativity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "analytical",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "empathy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "intuition",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "resilience",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "curiosity",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dominantMood",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastDreamDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPersonalityEvolution.PersonalityTraits[]",
          "name": "summaries",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPersonalityTraits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "creativity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "analytical",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "empathy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "intuition",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "resilience",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "curiosity",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dominantMood",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastDreamDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPersonalityEvolution.PersonalityTraits",
          "name": "traits",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getResponseStyle",
      "outputs": [
        {
          "internalType": "string",
          "name": "style",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "primaryTrait",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "milestone",
          "type": "string"
        }
      ],
      "name": "hasMilestone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "achieved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "achievedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "milestones",
      "outputs": [
        {
          "internalType": "bool",
          "name": "achieved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "achievedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "traitValue",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "proofs",
          "type": "bytes[]"
        },
        {
          "internalType": "string[]",
          "name": "descriptions",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintAgent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nameExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "dreamHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "dreamAnalysisHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "int8",
              "name": "creativityChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "analyticalChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "empathyChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "intuitionChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "resilienceChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "curiosityChange",
              "type": "int8"
            },
            {
              "internalType": "string",
              "name": "moodShift",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "evolutionWeight",
              "type": "uint8"
            }
          ],
          "internalType": "struct IPersonalityEvolution.PersonalityImpact",
          "name": "impact",
          "type": "tuple"
        }
      ],
      "name": "processDailyDream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "conversationHash",
          "type": "bytes32"
        },
        {
          "internalType": "enum IPersonalityEvolution.ContextType",
          "name": "contextType",
          "type": "uint8"
        }
      ],
      "name": "recordConversation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "responseStyles",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAgents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeesCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferPublic",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IERC7857DataVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4d3ef36594f468bc5cd94a881519c3764db2d715f951e136a38a86954b5c577",
  "receipt": {
    "to": null,
    "from": "0x232CA04565A7aAffff9b715D88562E48715e9185",
    "contractAddress": "0x2BA644C34A39F610C8d9beB9757220Fb7D7d728b",
    "transactionIndex": 29,
    "gasUsed": "5149075",
    "logsBloom": "0x0000000400000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000002002000000000000000000000000000000002000000000000000000080000000000000000080000000000000000000000000000000000000000000000c000000000000000000000000000000000000010000800000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000101000004100002000000020000000000000000000000000000000000000000400000000000000000000000000",
    "blockHash": "0x8ae091b389684f504fe81eaf0f03a690609ff7f79383ec15a11ac8803939c0e4",
    "transactionHash": "0xb4d3ef36594f468bc5cd94a881519c3764db2d715f951e136a38a86954b5c577",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 3418692,
        "transactionHash": "0xb4d3ef36594f468bc5cd94a881519c3764db2d715f951e136a38a86954b5c577",
        "address": "0x2BA644C34A39F610C8d9beB9757220Fb7D7d728b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185"
        ],
        "data": "0x",
        "logIndex": 54,
        "blockHash": "0x8ae091b389684f504fe81eaf0f03a690609ff7f79383ec15a11ac8803939c0e4"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 3418692,
        "transactionHash": "0xb4d3ef36594f468bc5cd94a881519c3764db2d715f951e136a38a86954b5c577",
        "address": "0x2BA644C34A39F610C8d9beB9757220Fb7D7d728b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0x8ae091b389684f504fe81eaf0f03a690609ff7f79383ec15a11ac8803939c0e4"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 3418692,
        "transactionHash": "0xb4d3ef36594f468bc5cd94a881519c3764db2d715f951e136a38a86954b5c577",
        "address": "0x2BA644C34A39F610C8d9beB9757220Fb7D7d728b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0ce23c3e399818cfee81a7ab0880f714e53d7672b08df0fa62f2843416e1ea09",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0x8ae091b389684f504fe81eaf0f03a690609ff7f79383ec15a11ac8803939c0e4"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 3418692,
        "transactionHash": "0xb4d3ef36594f468bc5cd94a881519c3764db2d715f951e136a38a86954b5c577",
        "address": "0x2BA644C34A39F610C8d9beB9757220Fb7D7d728b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185",
          "0x000000000000000000000000232ca04565a7aaffff9b715d88562e48715e9185"
        ],
        "data": "0x",
        "logIndex": 57,
        "blockHash": "0x8ae091b389684f504fe81eaf0f03a690609ff7f79383ec15a11ac8803939c0e4"
      }
    ],
    "blockNumber": 3418692,
    "cumulativeGasUsed": "8113908",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3ab9784ac2D04D1f1aAd0B435b61e456d0744cA4",
    "0x0f13e85B575964B8b4b77E37d43A6aE9E354e94C"
  ],
  "numDeployments": 2,
  "solcInputHash": "0bbabe4b617081c8a5c3db1cac786708",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"conversationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IPersonalityEvolution.ContextType\",\"name\":\"contextType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversationCount\",\"type\":\"uint256\"}],\"name\":\"AgentConversation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLevel\",\"type\":\"uint256\"}],\"name\":\"AgentEvolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AuthorizedUsage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Cloned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dreamHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intelligenceLevel\",\"type\":\"uint256\"}],\"name\":\"DreamProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"milestone\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"traitValue\",\"type\":\"uint8\"}],\"name\":\"MilestoneUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"_dataHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_dataDescriptions\",\"type\":\"string[]\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IPersonalityEvolution.PersonalityTraits\",\"name\":\"newPersonality\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dreamsSoFar\",\"type\":\"uint256\"}],\"name\":\"PersonalityActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dreamHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IPersonalityEvolution.PersonalityTraits\",\"name\":\"newPersonality\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"creativityChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"analyticalChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"empathyChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"intuitionChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"resilienceChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"curiosityChange\",\"type\":\"int8\"},{\"internalType\":\"string\",\"name\":\"moodShift\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"evolutionWeight\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IPersonalityEvolution.PersonalityImpact\",\"name\":\"impact\",\"type\":\"tuple\"}],\"name\":\"PersonalityEvolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"milestone\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"traitValue\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"traitName\",\"type\":\"string\"}],\"name\":\"PersonalityMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes16[]\",\"name\":\"_sealedKeys\",\"type\":\"bytes16[]\"}],\"name\":\"PublishedSealedKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newStyle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"dominantTraits\",\"type\":\"string[]\"}],\"name\":\"ResponseStyleEvolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldStyle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newStyle\",\"type\":\"string\"}],\"name\":\"ResponseStyleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AGENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agentPersonalities\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intelligenceLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dreamCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversationCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"personalityInitialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalEvolutions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEvolutionDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"authorizeUsage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"authorizedUsersOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"calculatePersonalityRarity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rarityScore\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"canProcessDreamToday\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canProcess\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clonePublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conversationHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dreamAnalysisHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dreamHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"emergencyAuthorizeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAgentName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getConversationHistory\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"conversationHashesArray\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDominantTraits\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"traits\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"values\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getDreamHistory\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dreamHashesArray\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEvolutionStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEvolutions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"evolutionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEvolution\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getPersonalitySummaries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"internalType\":\"struct IPersonalityEvolution.PersonalityTraits[]\",\"name\":\"summaries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPersonalityTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"internalType\":\"struct IPersonalityEvolution.PersonalityTraits\",\"name\":\"traits\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getResponseStyle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"style\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primaryTrait\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"milestone\",\"type\":\"string\"}],\"name\":\"hasMilestone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"achieved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"achievedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"milestones\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"achieved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"achievedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"traitValue\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"proofs\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"descriptions\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAgent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dreamHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dreamAnalysisHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"creativityChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"analyticalChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"empathyChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"intuitionChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"resilienceChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"curiosityChange\",\"type\":\"int8\"},{\"internalType\":\"string\",\"name\":\"moodShift\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"evolutionWeight\",\"type\":\"uint8\"}],\"internalType\":\"struct IPersonalityEvolution.PersonalityImpact\",\"name\":\"impact\",\"type\":\"tuple\"}],\"name\":\"processDailyDream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conversationHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum IPersonalityEvolution.ContextType\",\"name\":\"contextType\",\"type\":\"uint8\"}],\"name\":\"recordConversation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"responseStyles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAgents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferPublic\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IERC7857DataVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements ERC-7857 with comprehensive personality evolution system\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"AgentConversation(uint256,bytes32,uint8,uint256)\":{\"details\":\"Emitted when agent has a conversation (without personality evolution)\"},\"AuthorizedUsage(uint256,address)\":{\"details\":\"This emits when a user is authorized to use the data\"},\"Cloned(uint256,uint256,address,address)\":{\"details\":\"This emits when data is cloned\"},\"Minted(uint256,address,address,bytes32[],string[])\":{\"details\":\"This emits when a new functional NFT is minted\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"PersonalityEvolved(uint256,bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,string,uint256),(int8,int8,int8,int8,int8,int8,string,uint8))\":{\"details\":\"Emitted when agent personality evolves from dream processing\"},\"PersonalityMilestone(uint256,string,uint8,string)\":{\"details\":\"Emitted when agent reaches personality milestones\"},\"PublishedSealedKey(address,uint256,bytes16[])\":{\"details\":\"This emits when a sealed key is published\"},\"ResponseStyleEvolved(uint256,string,string[])\":{\"details\":\"Emitted when agent's response style evolves\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transferred(uint256,address,address)\":{\"details\":\"This emits when data is transferred with ownership\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"owner\":\"Address to check\"},\"returns\":{\"_0\":\"Number of agents owned\"}},\"calculatePersonalityRarity(uint256)\":{\"params\":{\"tokenId\":\"Agent to analyze\"},\"returns\":{\"rarityScore\":\"Rarity score based on trait distribution\"}},\"canProcessDreamToday(uint256)\":{\"params\":{\"tokenId\":\"Agent to check\"},\"returns\":{\"canProcess\":\"True if agent can process a dream today\"}},\"clone(address,uint256,bytes[])\":{\"params\":{\"to\":\"Address to clone agent for\",\"tokenId\":\"Agent to clone\"},\"returns\":{\"newTokenId\":\"The cloned agent token ID\"}},\"emergencyAuthorizeUser(uint256,address)\":{\"details\":\"Only ADMIN_ROLE can use this in emergencies\",\"params\":{\"tokenId\":\"Agent to authorize user for\",\"user\":\"User to authorize\"}},\"emergencyTransfer(uint256,address)\":{\"details\":\"Only ADMIN_ROLE can use this in emergencies\",\"params\":{\"to\":\"New owner\",\"tokenId\":\"Agent to transfer\"}},\"getAgentName(uint256)\":{\"params\":{\"tokenId\":\"Agent to query\"},\"returns\":{\"_0\":\"Agent name\"}},\"getConversationHistory(uint256,uint256)\":{\"params\":{\"limit\":\"Maximum number of conversations to return (0 = all)\",\"tokenId\":\"Agent to query\"},\"returns\":{\"conversationHashesArray\":\"Array of conversation storage hashes\"}},\"getCreationTime(uint256)\":{\"params\":{\"tokenId\":\"Agent to query\"},\"returns\":{\"_0\":\"Creation timestamp\"}},\"getDominantTraits(uint256)\":{\"params\":{\"tokenId\":\"Agent to analyze\"},\"returns\":{\"traits\":\"Array of dominant trait names\",\"values\":\"Array of corresponding trait values\"}},\"getDreamHistory(uint256,uint256)\":{\"params\":{\"limit\":\"Maximum number of dreams to return (0 = all)\",\"tokenId\":\"Agent to query\"},\"returns\":{\"dreamHashesArray\":\"Array of dream storage hashes\"}},\"getEvolutionStats(uint256)\":{\"params\":{\"tokenId\":\"Agent to analyze\"},\"returns\":{\"evolutionRate\":\"Rate of personality change\",\"lastEvolution\":\"Timestamp of last evolution\",\"totalEvolutions\":\"Number of personality changes\"}},\"getPersonalitySummaries(uint256[])\":{\"params\":{\"tokenIds\":\"Array of agent IDs\"},\"returns\":{\"summaries\":\"Array of personality summaries\"}},\"getPersonalityTraits(uint256)\":{\"params\":{\"tokenId\":\"Agent to query\"},\"returns\":{\"traits\":\"Current personality traits (neutral if not evolved yet)\"}},\"getResponseStyle(uint256)\":{\"params\":{\"tokenId\":\"Agent to analyze\"},\"returns\":{\"primaryTrait\":\"Most dominant trait influencing style\",\"style\":\"Response style description\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasMilestone(uint256,string)\":{\"params\":{\"milestone\":\"Milestone to check\",\"tokenId\":\"Agent to check\"},\"returns\":{\"achieved\":\"True if milestone has been achieved\",\"achievedAt\":\"Timestamp when milestone was achieved\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"mintAgent(bytes[],string[],string,address)\":{\"params\":{\"agentName\":\"User-given name for the agent\",\"descriptions\":\"Data type descriptions\",\"proofs\":\"Ownership proofs for initial data\",\"to\":\"Address to mint agent for\"},\"returns\":{\"tokenId\":\"The newly minted agent token ID\"}},\"pause()\":{\"details\":\"Only accounts with PAUSER_ROLE can pause\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"processDailyDream(uint256,bytes32,bytes32,(int8,int8,int8,int8,int8,int8,string,uint8))\":{\"params\":{\"dreamAnalysisHash\":\"0G Storage hash of AI analysis\",\"dreamHash\":\"0G Storage hash of encrypted dream data\",\"impact\":\"Personality changes from dream analysis (only used every 5th dream)\",\"tokenId\":\"Agent to evolve\"}},\"recordConversation(uint256,bytes32,uint8)\":{\"params\":{\"contextType\":\"Type of conversation for context building\",\"conversationHash\":\"0G Storage hash of conversation data\",\"tokenId\":\"Agent having conversation\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface identifier\"},\"returns\":{\"_0\":\"True if supported\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"Token to get URI for\"},\"returns\":{\"_0\":\"Simplified metadata string\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"Total number of minted agents\"}},\"transfer(address,uint256,bytes[])\":{\"params\":{\"to\":\"New owner address\",\"tokenId\":\"Agent to transfer\"}},\"unpause()\":{\"details\":\"Only accounts with PAUSER_ROLE can unpause\"}},\"stateVariables\":{\"verifier\":{\"return\":\"The address of the verifier contract\",\"returns\":{\"_0\":\"The address of the verifier contract\"}}},\"title\":\"DreamAgentNFTv2 - Enhanced Personality Evolution iNFTs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Get balance of owner\"},\"calculatePersonalityRarity(uint256)\":{\"notice\":\"Calculate personality rarity score\"},\"canProcessDreamToday(uint256)\":{\"notice\":\"Check if agent can process dream today (24h cooldown)\"},\"clone(address,uint256,bytes[])\":{\"notice\":\"Clone agent with personality preservation\"},\"emergencyAuthorizeUser(uint256,address)\":{\"notice\":\"Emergency admin function to authorize user\"},\"emergencyTransfer(uint256,address)\":{\"notice\":\"Emergency admin function to transfer agent\"},\"getAgentName(uint256)\":{\"notice\":\"Get agent's name\"},\"getConversationHistory(uint256,uint256)\":{\"notice\":\"Get agent's conversation history hashes\"},\"getCreationTime(uint256)\":{\"notice\":\"Get agent's creation timestamp\"},\"getDominantTraits(uint256)\":{\"notice\":\"Get agent's dominant personality traits (top 3)\"},\"getDreamHistory(uint256,uint256)\":{\"notice\":\"Get agent's dream history hashes\"},\"getEvolutionStats(uint256)\":{\"notice\":\"Get personality evolution statistics\"},\"getPersonalitySummaries(uint256[])\":{\"notice\":\"Get multiple agents' personality summaries\"},\"getPersonalityTraits(uint256)\":{\"notice\":\"Get agent's current personality traits\"},\"getResponseStyle(uint256)\":{\"notice\":\"Get agent's response style based on personality\"},\"hasMilestone(uint256,string)\":{\"notice\":\"Check if agent has reached specific personality milestone\"},\"mint(bytes[],string[],address)\":{\"notice\":\"Standard ERC-7857 mint function (use mintAgent instead)\"},\"mintAgent(bytes[],string[],string,address)\":{\"notice\":\"Mint new dream agent (starts as blank slate)\"},\"pause()\":{\"notice\":\"Pause contract operations\"},\"processDailyDream(uint256,bytes32,bytes32,(int8,int8,int8,int8,int8,int8,string,uint8))\":{\"notice\":\"Process daily dream and evolve agent personality (every 5th dream)\"},\"recordConversation(uint256,bytes32,uint8)\":{\"notice\":\"Record conversation without personality evolution\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if contract supports interface\"},\"tokenURI(uint256)\":{\"notice\":\"Get simplified token URI for metadata\"},\"totalSupply()\":{\"notice\":\"Get total supply of agents\"},\"transfer(address,uint256,bytes[])\":{\"notice\":\"Transfer agent with personality preservation\"},\"unpause()\":{\"notice\":\"Unpause contract operations\"},\"verifier()\":{\"notice\":\"The verifier interface that this NFT uses\"}},\"notice\":\"Advanced dream agents that develop unique personalities based on user dreams\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DreamAgentNFTv2.sol\":\"DreamAgentNFTv2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/DreamAgentNFTv2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IERC7857.sol\\\";\\nimport \\\"./interfaces/IERC7857DataVerifier.sol\\\";\\nimport \\\"./interfaces/IPersonalityEvolution.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n/// @title DreamAgentNFTv2 - Enhanced Personality Evolution iNFTs\\n/// @notice Advanced dream agents that develop unique personalities based on user dreams\\n/// @dev Implements ERC-7857 with comprehensive personality evolution system\\ncontract DreamAgentNFTv2 is IERC7857, IPersonalityEvolution, ReentrancyGuard, AccessControl, Pausable {\\n    \\n    // Data types for dream agents (from v1)\\n    string constant DREAM_PATTERNS = \\\"dream_patterns\\\";\\n    string constant EMOTIONAL_PROFILE = \\\"emotional_profile\\\";\\n    string constant AGENT_INTELLIGENCE = \\\"agent_intelligence\\\";\\n    string constant PERSONALITY_DATA = \\\"personality_data\\\";\\n    \\n    // Maximum supply for testnet\\n    uint256 public constant MAX_AGENTS = 1000;\\n    \\n    // Minting fee: 0.1 OG\\n    uint256 public constant MINTING_FEE = 0.1 ether;\\n    \\n    // Treasury address for collecting fees\\n    address public immutable treasury;\\n    \\n    // Access control roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant VERIFIER_ROLE = keccak256(\\\"VERIFIER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    \\n    // Access control modifiers\\n    modifier onlyOwnerOrAuthorized(uint256 tokenId) {\\n        require(\\n            agents[tokenId].owner == msg.sender || \\n            hasRole(ADMIN_ROLE, msg.sender) ||\\n            _isAuthorizedUser(tokenId, msg.sender),\\n            \\\"Unauthorized access\\\"\\n        );\\n        _;\\n    }\\n    \\n    modifier onlyOwnerOrAdmin(uint256 tokenId) {\\n        require(\\n            agents[tokenId].owner == msg.sender || \\n            hasRole(ADMIN_ROLE, msg.sender),\\n            \\\"Not agent owner or admin\\\"\\n        );\\n        _;\\n    }\\n    \\n    /// @notice Enhanced Dream Agent structure with personality system\\n    struct DreamAgent {\\n        address owner;\\n        string agentName;\\n        uint256 createdAt;\\n        uint256 lastUpdated;\\n        string[] dataDescriptions;\\n        bytes32[] dataHashes;\\n        address[] authorizedUsers;\\n        uint256 intelligenceLevel;\\n        uint256 dreamCount;\\n        uint256 conversationCount;\\n        \\n        // New personality fields\\n        bool personalityInitialized;  // Whether personality traits are set\\n        uint256 totalEvolutions;      // Total personality changes\\n        uint256 lastEvolutionDate;    // When personality last evolved\\n        string[] achievedMilestones;  // Personality milestones reached\\n    }\\n    \\n    /// @notice Personality milestone tracking\\n    struct MilestoneData {\\n        bool achieved;\\n        uint256 achievedAt;\\n        uint8 traitValue;\\n    }\\n    \\n\\n    \\n    // Contract state\\n    mapping(uint256 => DreamAgent) public agents;\\n    mapping(string => bool) public nameExists;\\n    uint256 public nextTokenId = 1;\\n    uint256 public totalAgents = 0;\\n    uint256 public totalFeesCollected = 0;\\n    \\n    // Personality system state\\n    mapping(uint256 => PersonalityTraits) public agentPersonalities;\\n    mapping(uint256 => bytes32[]) public dreamHashes;\\n    mapping(uint256 => bytes32[]) public conversationHashes;\\n    mapping(uint256 => bytes32[]) public dreamAnalysisHashes;\\n    \\n    // Milestone tracking\\n    mapping(uint256 => mapping(string => MilestoneData)) public milestones;\\n    \\n    // Response style mappings\\n    mapping(uint256 => string) public responseStyles;\\n    \\n    // Contract metadata\\n    string public name = \\\"Dreamscape AI Agents v2\\\";\\n    string public symbol = \\\"DREAMv2\\\";\\n    \\n    // Verifier for proof validation\\n    IERC7857DataVerifier public immutable verifier;\\n    \\n    // Enhanced events from IPersonalityEvolution (already defined there)\\n    \\n    // Additional v2-specific events\\n    event PersonalityActivated(uint256 indexed tokenId, PersonalityTraits newPersonality, uint256 dreamsSoFar);\\n    event MilestoneUnlocked(uint256 indexed tokenId, string milestone, uint8 traitValue);\\n    event ResponseStyleUpdated(uint256 indexed tokenId, string oldStyle, string newStyle);\\n    \\n    // Unique contract event (not in IERC7857)\\n    event FeePaid(uint256 indexed tokenId, address indexed payer, uint256 amount);\\n    // Evolution events\\n    event AgentEvolved(uint256 indexed tokenId, uint256 oldLevel, uint256 newLevel);\\n    event DreamProcessed(uint256 indexed tokenId, bytes32 dreamHash, uint256 intelligenceLevel);\\n    \\n    constructor(address _verifier, address _treasury) {\\n        require(_verifier != address(0), \\\"Verifier cannot be zero address\\\");\\n        require(_treasury != address(0), \\\"Treasury cannot be zero address\\\");\\n        verifier = IERC7857DataVerifier(_verifier);\\n        treasury = _treasury;\\n        \\n        // Initialize access control\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(ADMIN_ROLE, msg.sender);\\n        _grantRole(VERIFIER_ROLE, msg.sender);\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n    }\\n    \\n    /// @notice Mint new dream agent (starts as blank slate)\\n    /// @param proofs Ownership proofs for initial data\\n    /// @param descriptions Data type descriptions\\n    /// @param agentName User-given name for the agent\\n    /// @param to Address to mint agent for\\n    /// @return tokenId The newly minted agent token ID\\n    function mintAgent(\\n        bytes[] calldata proofs,\\n        string[] calldata descriptions,\\n        string memory agentName,\\n        address to\\n    ) external payable nonReentrant whenNotPaused returns (uint256 tokenId) {\\n        require(to != address(0), \\\"Invalid address\\\");\\n        require(descriptions.length == proofs.length, \\\"Length mismatch\\\");\\n        require(totalAgents < MAX_AGENTS, \\\"Max limit reached\\\");\\n        require(bytes(agentName).length > 0 && bytes(agentName).length <= 32, \\\"Invalid name\\\");\\n        require(!nameExists[agentName], \\\"Name exists\\\");\\n        require(msg.value >= MINTING_FEE, \\\"Insufficient payment\\\");\\n        \\n        // Verify proofs\\n        PreimageProofOutput[] memory proofOutputs = verifier.verifyPreimage(proofs);\\n        bytes32[] memory dataHashes = new bytes32[](proofOutputs.length);\\n        \\n        for (uint256 i = 0; i < proofOutputs.length; i++) {\\n            require(proofOutputs[i].isValid, \\\"Invalid proof\\\");\\n            dataHashes[i] = proofOutputs[i].dataHash;\\n        }\\n        \\n        // Reserve the name\\n        nameExists[agentName] = true;\\n        \\n        // Create new agent\\n        tokenId = nextTokenId++;\\n        agents[tokenId] = DreamAgent({\\n            owner: to,\\n            agentName: agentName,\\n            createdAt: block.timestamp,\\n            lastUpdated: block.timestamp,\\n            dataDescriptions: descriptions,\\n            dataHashes: dataHashes,\\n            authorizedUsers: new address[](0),\\n            intelligenceLevel: 1,\\n            dreamCount: 0,\\n            conversationCount: 0,\\n            personalityInitialized: false, // Agent starts as blank slate\\n            totalEvolutions: 0,\\n            lastEvolutionDate: block.timestamp,\\n            achievedMilestones: new string[](0)\\n        });\\n        \\n        // Initialize neutral personality (blank slate)\\n        agentPersonalities[tokenId] = PersonalityTraits({\\n            creativity: 50,\\n            analytical: 50,\\n            empathy: 50,\\n            intuition: 50,\\n            resilience: 50,\\n            curiosity: 50,\\n            dominantMood: \\\"neutral\\\",\\n            lastDreamDate: 0 // Allow immediate first dream\\n        });\\n        \\n        // Set neutral response style\\n        responseStyles[tokenId] = \\\"neutral\\\";\\n        \\n        totalAgents++;\\n        totalFeesCollected += MINTING_FEE;\\n        \\n        // Transfer minting fee to treasury\\n        (bool success, ) = treasury.call{value: MINTING_FEE}(\\\"\\\");\\n        require(success, \\\"Treasury payment failed\\\");\\n        \\n        // Refund excess payment\\n        if (msg.value > MINTING_FEE) {\\n            (bool refundSuccess, ) = msg.sender.call{value: msg.value - MINTING_FEE}(\\\"\\\");\\n            require(refundSuccess, \\\"Refund failed\\\");\\n        }\\n        \\n        // Emit standard ERC-7857 Minted event defined in interface\\n        emit Minted(tokenId, msg.sender, to, dataHashes, descriptions);\\n        emit FeePaid(tokenId, msg.sender, MINTING_FEE);\\n        \\n        return tokenId;\\n    }\\n    \\n    /// @notice Process daily dream and evolve agent personality (every 5th dream)\\n    /// @param tokenId Agent to evolve\\n    /// @param dreamHash 0G Storage hash of encrypted dream data\\n    /// @param dreamAnalysisHash 0G Storage hash of AI analysis\\n    /// @param impact Personality changes from dream analysis (only used every 5th dream)\\n    function processDailyDream(\\n        uint256 tokenId,\\n        bytes32 dreamHash,\\n        bytes32 dreamAnalysisHash,\\n        PersonalityImpact calldata impact\\n    ) external override whenNotPaused onlyOwnerOrAuthorized(tokenId) {\\n        require(canProcessDreamToday(tokenId), \\\"Daily dream already processed\\\");\\n        \\n        // Validate impact values\\n        _validatePersonalityImpact(impact);\\n        \\n        // Store dream and analysis hashes\\n        dreamHashes[tokenId].push(dreamHash);\\n        dreamAnalysisHashes[tokenId].push(dreamAnalysisHash);\\n        \\n        // Update agent metadata\\n        agents[tokenId].dreamCount++;\\n        agents[tokenId].lastUpdated = block.timestamp;\\n        \\n        // Update timestamp for cooldown\\n        PersonalityTraits storage personality = agentPersonalities[tokenId];\\n        personality.lastDreamDate = block.timestamp;\\n        \\n        // Check if it's time for personality evolution (every 5th dream)\\n        bool shouldEvolve = agents[tokenId].dreamCount % 5 == 0;\\n        \\n        if (shouldEvolve) {\\n            // Validate impact for evolution\\n            _validatePersonalityImpact(impact);\\n            \\n            // Apply personality evolution\\n            PersonalityTraits memory oldPersonality = personality;\\n            \\n            // Update traits with bounds checking\\n            personality.creativity = _updateTrait(personality.creativity, impact.creativityChange);\\n            personality.analytical = _updateTrait(personality.analytical, impact.analyticalChange);\\n            personality.empathy = _updateTrait(personality.empathy, impact.empathyChange);\\n            personality.intuition = _updateTrait(personality.intuition, impact.intuitionChange);\\n            personality.resilience = _updateTrait(personality.resilience, impact.resilienceChange);\\n            personality.curiosity = _updateTrait(personality.curiosity, impact.curiosityChange);\\n            \\n            // Update mood\\n            personality.dominantMood = impact.moodShift;\\n            \\n            // Mark personality as initialized after first evolution\\n            if (!agents[tokenId].personalityInitialized) {\\n                agents[tokenId].personalityInitialized = true;\\n                emit PersonalityActivated(tokenId, personality, agents[tokenId].dreamCount);\\n            }\\n            \\n            // Update evolution metadata\\n            agents[tokenId].totalEvolutions++;\\n            agents[tokenId].lastEvolutionDate = block.timestamp;\\n            \\n            // Check for personality milestones\\n            _checkPersonalityMilestones(tokenId, oldPersonality, personality);\\n            \\n            // Update response style if needed\\n            string memory newStyle = _determineResponseStyle(personality);\\n            if (keccak256(bytes(responseStyles[tokenId])) != keccak256(bytes(newStyle))) {\\n                string memory oldStyle = responseStyles[tokenId];\\n                responseStyles[tokenId] = newStyle;\\n                emit ResponseStyleUpdated(tokenId, oldStyle, newStyle);\\n                \\n                // Emit response style evolution\\n                string[] memory dominantTraits = _getDominantTraitNames(tokenId);\\n                emit ResponseStyleEvolved(tokenId, newStyle, dominantTraits);\\n            }\\n            \\n            emit PersonalityEvolved(tokenId, dreamHash, personality, impact);\\n        }\\n        \\n        // Intelligence evolution (every 3 dreams)\\n        if (agents[tokenId].dreamCount % 3 == 0) {\\n            agents[tokenId].intelligenceLevel++;\\n            emit AgentEvolved(tokenId, agents[tokenId].intelligenceLevel - 1, agents[tokenId].intelligenceLevel);\\n        }\\n        \\n        emit DreamProcessed(tokenId, dreamHash, agents[tokenId].intelligenceLevel);\\n    }\\n    \\n    /// @notice Record conversation without personality evolution\\n    /// @param tokenId Agent having conversation\\n    /// @param conversationHash 0G Storage hash of conversation data\\n    /// @param contextType Type of conversation for context building\\n    function recordConversation(\\n        uint256 tokenId,\\n        bytes32 conversationHash,\\n        ContextType contextType\\n    ) external override whenNotPaused onlyOwnerOrAuthorized(tokenId) {\\n        \\n        // Store conversation hash\\n        conversationHashes[tokenId].push(conversationHash);\\n        agents[tokenId].conversationCount++;\\n        agents[tokenId].lastUpdated = block.timestamp;\\n        \\n        // Small intelligence boost from conversations (1 point every 10 conversations)\\n        if (agents[tokenId].conversationCount % 10 == 0) {\\n            agents[tokenId].intelligenceLevel++;\\n            emit AgentEvolved(tokenId, agents[tokenId].intelligenceLevel - 1, agents[tokenId].intelligenceLevel);\\n        }\\n        \\n        emit AgentConversation(tokenId, conversationHash, contextType, agents[tokenId].conversationCount);\\n    }\\n    \\n    /// @notice Get agent's current personality traits\\n    /// @param tokenId Agent to query\\n    /// @return traits Current personality traits (neutral if not evolved yet)\\n    function getPersonalityTraits(uint256 tokenId) \\n        external view override returns (PersonalityTraits memory traits) {\\n        require(agents[tokenId].owner != address(0), \\\"Agent does not exist\\\");\\n        return agentPersonalities[tokenId];\\n    }\\n    \\n    /// @notice Get agent's dream history hashes\\n    /// @param tokenId Agent to query\\n    /// @param limit Maximum number of dreams to return (0 = all)\\n    /// @return dreamHashesArray Array of dream storage hashes\\n    function getDreamHistory(uint256 tokenId, uint256 limit) \\n        external view override returns (bytes32[] memory dreamHashesArray) {\\n        bytes32[] storage allDreams = dreamHashes[tokenId];\\n        \\n        if (limit == 0 || limit >= allDreams.length) {\\n            return allDreams;\\n        }\\n        \\n        // Return most recent dreams\\n        dreamHashesArray = new bytes32[](limit);\\n        uint256 startIndex = allDreams.length - limit;\\n        for (uint256 i = 0; i < limit; i++) {\\n            dreamHashesArray[i] = allDreams[startIndex + i];\\n        }\\n    }\\n    \\n    /// @notice Get agent's conversation history hashes\\n    /// @param tokenId Agent to query\\n    /// @param limit Maximum number of conversations to return (0 = all)\\n    /// @return conversationHashesArray Array of conversation storage hashes\\n    function getConversationHistory(uint256 tokenId, uint256 limit) \\n        external view override returns (bytes32[] memory conversationHashesArray) {\\n        bytes32[] storage allConversations = conversationHashes[tokenId];\\n        \\n        if (limit == 0 || limit >= allConversations.length) {\\n            return allConversations;\\n        }\\n        \\n        // Return most recent conversations\\n        conversationHashesArray = new bytes32[](limit);\\n        uint256 startIndex = allConversations.length - limit;\\n        for (uint256 i = 0; i < limit; i++) {\\n            conversationHashesArray[i] = allConversations[startIndex + i];\\n        }\\n    }\\n    \\n    /// @notice Check if agent can process dream today (24h cooldown)\\n    /// @param tokenId Agent to check\\n    /// @return canProcess True if agent can process a dream today\\n    function canProcessDreamToday(uint256 tokenId) \\n        public view override returns (bool canProcess) {\\n        if (!agents[tokenId].personalityInitialized) return false;\\n        return block.timestamp > agentPersonalities[tokenId].lastDreamDate + 1 days;\\n    }\\n    \\n    /// @notice Calculate personality rarity score\\n    /// @param tokenId Agent to analyze\\n    /// @return rarityScore Rarity score based on trait distribution\\n    function calculatePersonalityRarity(uint256 tokenId) \\n        external view override returns (uint256 rarityScore) {\\n        require(agents[tokenId].owner != address(0), \\\"Agent does not exist\\\");\\n        \\n        PersonalityTraits memory traits = agentPersonalities[tokenId];\\n        \\n        // Base rarity from trait variance\\n        uint256 traitVariance = _calculateTraitVariance(traits);\\n        \\n        // Bonus for dominant traits (>80)\\n        uint256 dominantTraits = _countDominantTraits(traits);\\n        \\n        // Penalty for balanced personalities (all traits 40-60)\\n        uint256 balancePenalty = _calculateBalancePenalty(traits);\\n        \\n        // Evolution bonus\\n        uint256 evolutionBonus = agents[tokenId].totalEvolutions * 10;\\n        \\n        rarityScore = traitVariance + dominantTraits * 100 - balancePenalty + evolutionBonus;\\n    }\\n    \\n    /// @notice Get agent's dominant personality traits (top 3)\\n    /// @param tokenId Agent to analyze\\n    /// @return traits Array of dominant trait names\\n    /// @return values Array of corresponding trait values\\n    function getDominantTraits(uint256 tokenId) \\n        external view override returns (string[] memory traits, uint8[] memory values) {\\n        require(agents[tokenId].owner != address(0), \\\"Agent does not exist\\\");\\n        \\n        PersonalityTraits memory personality = agentPersonalities[tokenId];\\n        \\n        // Create arrays for sorting\\n        string[6] memory allTraits = [\\\"creativity\\\", \\\"analytical\\\", \\\"empathy\\\", \\\"intuition\\\", \\\"resilience\\\", \\\"curiosity\\\"];\\n        uint8[6] memory allValues = [\\n            personality.creativity,\\n            personality.analytical,\\n            personality.empathy,\\n            personality.intuition,\\n            personality.resilience,\\n            personality.curiosity\\n        ];\\n        \\n        // Sort and get top 3\\n        traits = new string[](3);\\n        values = new uint8[](3);\\n        \\n        for (uint256 i = 0; i < 3; i++) {\\n            uint256 maxIndex = 0;\\n            for (uint256 j = 1; j < 6; j++) {\\n                if (allValues[j] > allValues[maxIndex]) {\\n                    maxIndex = j;\\n                }\\n            }\\n            traits[i] = allTraits[maxIndex];\\n            values[i] = allValues[maxIndex];\\n            allValues[maxIndex] = 0; // Remove from next iteration\\n        }\\n    }\\n    \\n    /// @notice Get agent's response style based on personality\\n    /// @param tokenId Agent to analyze\\n    /// @return style Response style description\\n    /// @return primaryTrait Most dominant trait influencing style\\n    function getResponseStyle(uint256 tokenId) \\n        external view override returns (string memory style, string memory primaryTrait) {\\n        require(agents[tokenId].owner != address(0), \\\"Agent does not exist\\\");\\n        \\n        style = responseStyles[tokenId];\\n        PersonalityTraits memory personality = agentPersonalities[tokenId];\\n        \\n        // Find primary trait\\n        uint8 maxValue = 0;\\n        if (personality.creativity > maxValue) {\\n            maxValue = personality.creativity;\\n            primaryTrait = \\\"creativity\\\";\\n        }\\n        if (personality.analytical > maxValue) {\\n            maxValue = personality.analytical;\\n            primaryTrait = \\\"analytical\\\";\\n        }\\n        if (personality.empathy > maxValue) {\\n            maxValue = personality.empathy;\\n            primaryTrait = \\\"empathy\\\";\\n        }\\n        if (personality.intuition > maxValue) {\\n            maxValue = personality.intuition;\\n            primaryTrait = \\\"intuition\\\";\\n        }\\n        if (personality.resilience > maxValue) {\\n            maxValue = personality.resilience;\\n            primaryTrait = \\\"resilience\\\";\\n        }\\n        if (personality.curiosity > maxValue) {\\n            primaryTrait = \\\"curiosity\\\";\\n        }\\n    }\\n    \\n    // ... [Continue with remaining interface functions and internal helpers]\\n    \\n    // Internal helper functions\\n    \\n    /// @notice Validate personality traits are within bounds\\n    /// @param traits Personality traits to validate\\n    function _validatePersonalityTraits(PersonalityTraits calldata traits) internal pure {\\n        require(traits.creativity <= 100, \\\"Invalid creativity value\\\");\\n        require(traits.analytical <= 100, \\\"Invalid analytical value\\\");\\n        require(traits.empathy <= 100, \\\"Invalid empathy value\\\");\\n        require(traits.intuition <= 100, \\\"Invalid intuition value\\\");\\n        require(traits.resilience <= 100, \\\"Invalid resilience value\\\");\\n        require(traits.curiosity <= 100, \\\"Invalid curiosity value\\\");\\n        require(bytes(traits.dominantMood).length > 0, \\\"Empty mood string\\\");\\n    }\\n    \\n    /// @notice Validate personality impact values\\n    /// @param impact Personality impact to validate\\n    function _validatePersonalityImpact(PersonalityImpact calldata impact) internal pure {\\n        require(impact.creativityChange >= -10 && impact.creativityChange <= 10, \\\"Invalid change\\\");\\n        require(impact.analyticalChange >= -10 && impact.analyticalChange <= 10, \\\"Invalid change\\\");\\n        require(impact.empathyChange >= -10 && impact.empathyChange <= 10, \\\"Invalid change\\\");\\n        require(impact.intuitionChange >= -10 && impact.intuitionChange <= 10, \\\"Invalid change\\\");\\n        require(impact.resilienceChange >= -10 && impact.resilienceChange <= 10, \\\"Invalid change\\\");\\n        require(impact.curiosityChange >= -10 && impact.curiosityChange <= 10, \\\"Invalid change\\\");\\n        require(impact.evolutionWeight > 0 && impact.evolutionWeight <= 100, \\\"Invalid weight\\\");\\n        require(bytes(impact.moodShift).length > 0, \\\"Empty mood\\\");\\n    }\\n    \\n    /// @notice Update trait with bounds checking\\n    /// @param currentValue Current trait value\\n    /// @param change Change amount\\n    /// @return newValue Updated trait value\\n    function _updateTrait(uint8 currentValue, int8 change) internal pure returns (uint8 newValue) {\\n        // Convert to int256 for safe arithmetic\\n        int256 temp = int256(uint256(currentValue)) + int256(change);\\n        \\n        // Clamp between 0 and 100\\n        if (temp < 0) temp = 0;\\n        if (temp > 100) temp = 100;\\n        newValue = uint8(uint256(temp));\\n    }\\n    \\n    /// @notice Determine response style based on personality traits\\n    /// @param traits Personality traits\\n    /// @return style Response style description\\n    function _determineResponseStyle(PersonalityTraits memory traits) internal pure returns (string memory style) {\\n        if (traits.empathy > 70 && traits.creativity > 60) {\\n            return \\\"empathetic_creative\\\";\\n        } else if (traits.empathy > 70) {\\n            return \\\"empathetic\\\";\\n        } else if (traits.creativity > 70) {\\n            return \\\"creative\\\";\\n        } else if (traits.analytical > 70) {\\n            return \\\"analytical\\\";\\n        } else if (traits.intuition > 70) {\\n            return \\\"intuitive\\\";\\n        } else if (traits.resilience > 70) {\\n            return \\\"resilient\\\";\\n        } else if (traits.curiosity > 70) {\\n            return \\\"curious\\\";\\n        } else {\\n            return \\\"balanced\\\";\\n        }\\n    }\\n    \\n    /// @notice Get dominant trait names for an agent\\n    /// @param tokenId Agent to analyze\\n    /// @return dominantTraits Array of dominant trait names\\n    function _getDominantTraitNames(uint256 tokenId) internal view returns (string[] memory dominantTraits) {\\n        PersonalityTraits memory personality = agentPersonalities[tokenId];\\n        dominantTraits = new string[](3);\\n        \\n        // Find top 3 traits\\n        uint8[6] memory values = [\\n            personality.creativity,\\n            personality.analytical,\\n            personality.empathy,\\n            personality.intuition,\\n            personality.resilience,\\n            personality.curiosity\\n        ];\\n        string[6] memory names = [\\\"creativity\\\", \\\"analytical\\\", \\\"empathy\\\", \\\"intuition\\\", \\\"resilience\\\", \\\"curiosity\\\"];\\n        \\n        // Simple sorting for top 3\\n        for (uint256 i = 0; i < 3; i++) {\\n            uint256 maxIndex = 0;\\n            for (uint256 j = 1; j < 6; j++) {\\n                if (values[j] > values[maxIndex]) {\\n                    maxIndex = j;\\n                }\\n            }\\n            dominantTraits[i] = names[maxIndex];\\n            values[maxIndex] = 0; // Remove from next iteration\\n        }\\n    }\\n    \\n    /// @notice Check personality milestones after evolution\\n    /// @param tokenId Agent to check\\n    /// @param oldPersonality Previous personality state\\n    /// @param newPersonality New personality state\\n    function _checkPersonalityMilestones(\\n        uint256 tokenId,\\n        PersonalityTraits memory oldPersonality,\\n        PersonalityTraits memory newPersonality\\n    ) internal {\\n        // Check empathy master milestone\\n        if (oldPersonality.empathy < 85 && newPersonality.empathy >= 85) {\\n            _unlockMilestone(tokenId, \\\"empathy_master\\\", newPersonality.empathy);\\n        }\\n        \\n        // Check creative genius milestone\\n        if (oldPersonality.creativity < 90 && newPersonality.creativity >= 90) {\\n            _unlockMilestone(tokenId, \\\"creative_genius\\\", newPersonality.creativity);\\n        }\\n        \\n        // Check logic lord milestone\\n        if (oldPersonality.analytical < 90 && newPersonality.analytical >= 90) {\\n            _unlockMilestone(tokenId, \\\"logic_lord\\\", newPersonality.analytical);\\n        }\\n        \\n        // Check spiritual guide milestone\\n        if (oldPersonality.intuition < 90 && newPersonality.intuition >= 90) {\\n            _unlockMilestone(tokenId, \\\"spiritual_guide\\\", newPersonality.intuition);\\n        }\\n        \\n        // Check balanced soul milestone (all traits > 60)\\n        bool isBalanced = newPersonality.creativity > 60 &&\\n                         newPersonality.analytical > 60 &&\\n                         newPersonality.empathy > 60 &&\\n                         newPersonality.intuition > 60 &&\\n                         newPersonality.resilience > 60 &&\\n                         newPersonality.curiosity > 60;\\n        \\n        if (isBalanced && !milestones[tokenId][\\\"balanced_soul\\\"].achieved) {\\n            _unlockMilestone(tokenId, \\\"balanced_soul\\\", 60);\\n        }\\n    }\\n    \\n    /// @notice Unlock a personality milestone\\n    /// @param tokenId Agent unlocking milestone\\n    /// @param milestone Milestone name\\n    /// @param traitValue Associated trait value\\n    function _unlockMilestone(uint256 tokenId, string memory milestone, uint8 traitValue) internal {\\n        milestones[tokenId][milestone] = MilestoneData({\\n            achieved: true,\\n            achievedAt: block.timestamp,\\n            traitValue: traitValue\\n        });\\n        \\n        agents[tokenId].achievedMilestones.push(milestone);\\n        \\n        emit PersonalityMilestone(tokenId, milestone, traitValue, \\\"\\\");\\n        emit MilestoneUnlocked(tokenId, milestone, traitValue);\\n    }\\n    \\n    /// @notice Calculate trait variance for rarity scoring\\n    /// @param traits Personality traits\\n    /// @return variance Trait variance score\\n    function _calculateTraitVariance(PersonalityTraits memory traits) internal pure returns (uint256 variance) {\\n        uint256[6] memory values = [\\n            uint256(traits.creativity),\\n            uint256(traits.analytical),\\n            uint256(traits.empathy),\\n            uint256(traits.intuition),\\n            uint256(traits.resilience),\\n            uint256(traits.curiosity)\\n        ];\\n        \\n        // Calculate mean\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < 6; i++) {\\n            sum += values[i];\\n        }\\n        uint256 mean = sum / 6;\\n        \\n        // Calculate variance\\n        uint256 varianceSum = 0;\\n        for (uint256 i = 0; i < 6; i++) {\\n            uint256 diff = values[i] > mean ? values[i] - mean : mean - values[i];\\n            varianceSum += diff * diff;\\n        }\\n        variance = varianceSum / 6;\\n    }\\n    \\n    /// @notice Count dominant traits (>80) for rarity scoring\\n    /// @param traits Personality traits\\n    /// @return count Number of dominant traits\\n    function _countDominantTraits(PersonalityTraits memory traits) internal pure returns (uint256 count) {\\n        if (traits.creativity > 80) count++;\\n        if (traits.analytical > 80) count++;\\n        if (traits.empathy > 80) count++;\\n        if (traits.intuition > 80) count++;\\n        if (traits.resilience > 80) count++;\\n        if (traits.curiosity > 80) count++;\\n    }\\n    \\n    /// @notice Calculate balance penalty for rarity scoring\\n    /// @param traits Personality traits\\n    /// @return penalty Balance penalty score\\n    function _calculateBalancePenalty(PersonalityTraits memory traits) internal pure returns (uint256 penalty) {\\n        bool isBalanced = traits.creativity >= 40 && traits.creativity <= 60 &&\\n                         traits.analytical >= 40 && traits.analytical <= 60 &&\\n                         traits.empathy >= 40 && traits.empathy <= 60 &&\\n                         traits.intuition >= 40 && traits.intuition <= 60 &&\\n                         traits.resilience >= 40 && traits.resilience <= 60 &&\\n                         traits.curiosity >= 40 && traits.curiosity <= 60;\\n        \\n        return isBalanced ? 200 : 0; // Penalty for being too balanced\\n    }\\n    \\n    /// @notice Calculate absolute difference between two uint8 values\\n    /// @param a First value\\n    /// @param b Second value\\n    /// @return diff Absolute difference\\n    function _absDiff(uint8 a, uint8 b) internal pure returns (uint256 diff) {\\n        return a > b ? a - b : b - a;\\n    }\\n    \\n    // Missing interface functions\\n    \\n    /// @notice Get personality evolution statistics\\n    /// @param tokenId Agent to analyze\\n    /// @return totalEvolutions Number of personality changes\\n    /// @return evolutionRate Rate of personality change\\n    /// @return lastEvolution Timestamp of last evolution\\n    function getEvolutionStats(uint256 tokenId) \\n        external view override returns (\\n            uint256 totalEvolutions,\\n            uint256 evolutionRate,\\n            uint256 lastEvolution\\n        ) {\\n        require(agents[tokenId].owner != address(0), \\\"Agent does not exist\\\");\\n        \\n        totalEvolutions = agents[tokenId].totalEvolutions;\\n        lastEvolution = agents[tokenId].lastEvolutionDate;\\n        \\n        // Calculate evolution rate (evolutions per day)\\n        if (block.timestamp > agents[tokenId].createdAt) {\\n            uint256 daysSinceCreation = (block.timestamp - agents[tokenId].createdAt) / 1 days;\\n            evolutionRate = daysSinceCreation > 0 ? (totalEvolutions * 100) / daysSinceCreation : 0;\\n        } else {\\n            evolutionRate = 0;\\n        }\\n    }\\n    \\n\\n    \\n    /// @notice Check if agent has reached specific personality milestone\\n    /// @param tokenId Agent to check\\n    /// @param milestone Milestone to check\\n    /// @return achieved True if milestone has been achieved\\n    /// @return achievedAt Timestamp when milestone was achieved\\n    function hasMilestone(uint256 tokenId, string calldata milestone) \\n        external view override returns (bool achieved, uint256 achievedAt) {\\n        MilestoneData memory m = milestones[tokenId][milestone];\\n        return (m.achieved, m.achievedAt);\\n    }\\n    \\n    /// @notice Get multiple agents' personality summaries\\n    /// @param tokenIds Array of agent IDs\\n    /// @return summaries Array of personality summaries\\n    function getPersonalitySummaries(uint256[] calldata tokenIds) \\n        external view override returns (PersonalityTraits[] memory summaries) {\\n        summaries = new PersonalityTraits[](tokenIds.length);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (agents[tokenIds[i]].owner != address(0)) {\\n                summaries[i] = agentPersonalities[tokenIds[i]];\\n            }\\n        }\\n    }\\n    \\n    /// @notice Get trait value by name\\n    /// @param tokenId Agent ID\\n    /// @param traitName Trait name\\n    /// @return value Trait value\\n    function _getTraitValue(uint256 tokenId, string memory traitName) internal view returns (uint8 value) {\\n        PersonalityTraits memory traits = agentPersonalities[tokenId];\\n        \\n        if (keccak256(bytes(traitName)) == keccak256(bytes(\\\"creativity\\\"))) return traits.creativity;\\n        if (keccak256(bytes(traitName)) == keccak256(bytes(\\\"analytical\\\"))) return traits.analytical;\\n        if (keccak256(bytes(traitName)) == keccak256(bytes(\\\"empathy\\\"))) return traits.empathy;\\n        if (keccak256(bytes(traitName)) == keccak256(bytes(\\\"intuition\\\"))) return traits.intuition;\\n        if (keccak256(bytes(traitName)) == keccak256(bytes(\\\"resilience\\\"))) return traits.resilience;\\n        if (keccak256(bytes(traitName)) == keccak256(bytes(\\\"curiosity\\\"))) return traits.curiosity;\\n        \\n        return 0; // Invalid trait name\\n    }\\n    \\n    // ERC-7857 standard functions (simplified for personality preservation)\\n    \\n    /// @notice Transfer agent with personality preservation\\n    /// @param to New owner address\\n    /// @param tokenId Agent to transfer\\n    function transfer(address to, uint256 tokenId, bytes[] calldata /* proofs */) external override onlyOwnerOrAdmin(tokenId) {\\n        require(to != address(0), \\\"Cannot transfer to zero address\\\");\\n        \\n        address from = agents[tokenId].owner;\\n        agents[tokenId].owner = to;\\n        agents[tokenId].lastUpdated = block.timestamp;\\n        \\n        emit Transferred(tokenId, from, to);\\n    }\\n    \\n    /// @notice Clone agent with personality preservation\\n    /// @param to Address to clone agent for\\n    /// @param tokenId Agent to clone\\n    /// @return newTokenId The cloned agent token ID\\n    function clone(address to, uint256 tokenId, bytes[] calldata /* proofs */) \\n        external payable override nonReentrant whenNotPaused onlyOwnerOrAdmin(tokenId) returns (uint256 newTokenId) {\\n        require(to != address(0), \\\"Cannot clone to zero address\\\");\\n        require(totalAgents < MAX_AGENTS, \\\"Maximum agents limit reached\\\");\\n        require(msg.value >= MINTING_FEE, \\\"Insufficient payment for cloning\\\");\\n        \\n        // Create cloned agent with preserved personality\\n        newTokenId = nextTokenId++;\\n        agents[newTokenId] = agents[tokenId]; // Copy all data\\n        agents[newTokenId].owner = to;\\n        agents[newTokenId].createdAt = block.timestamp;\\n        agents[newTokenId].lastUpdated = block.timestamp;\\n        agents[newTokenId].dreamCount = 0; // Reset for new owner\\n        agents[newTokenId].conversationCount = 0;\\n        agents[newTokenId].totalEvolutions = 0;\\n        \\n        // Preserve personality but reset evolution tracking\\n        agentPersonalities[newTokenId] = agentPersonalities[tokenId];\\n        agentPersonalities[newTokenId].lastDreamDate = 0; // Allow immediate dreams\\n        \\n        totalAgents++;\\n        totalFeesCollected += MINTING_FEE;\\n        \\n        // Handle payment\\n        (bool success, ) = treasury.call{value: MINTING_FEE}(\\\"\\\");\\n        require(success, \\\"Treasury payment failed\\\");\\n        \\n        if (msg.value > MINTING_FEE) {\\n            (bool refundSuccess, ) = msg.sender.call{value: msg.value - MINTING_FEE}(\\\"\\\");\\n            require(refundSuccess, \\\"Refund failed\\\");\\n        }\\n        \\n        emit Cloned(tokenId, newTokenId, msg.sender, to);\\n        // Emit standard Minted for clone\\n        emit Minted(newTokenId, msg.sender, to, agents[tokenId].dataHashes, agents[tokenId].dataDescriptions);\\n        emit FeePaid(newTokenId, msg.sender, MINTING_FEE);\\n    }\\n    \\n    // Standard ERC-7857 functions\\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        return agents[tokenId].owner;\\n    }\\n    \\n    function authorizedUsersOf(uint256 tokenId) external view override returns (address[] memory) {\\n        return agents[tokenId].authorizedUsers;\\n    }\\n    \\n    function authorizeUsage(uint256 tokenId, address user) external override onlyOwnerOrAdmin(tokenId) {\\n        require(user != address(0), \\\"Cannot authorize zero address\\\");\\n        \\n        agents[tokenId].authorizedUsers.push(user);\\n        emit AuthorizedUsage(tokenId, user);\\n    }\\n    \\n    // Legacy/unused functions\\n    function transferPublic(address, uint256) external pure override {\\n        revert(\\\"Public transfer not implemented\\\");\\n    }\\n    \\n    function clonePublic(address, uint256) external payable override returns (uint256) {\\n        revert(\\\"Public clone not implemented\\\");\\n    }\\n    \\n    \\n    /// @notice Standard ERC-7857 mint function (use mintAgent instead)\\n    function mint(\\n        bytes[] calldata /* proofs */,\\n        string[] calldata /* dataDescriptions */,\\n        address /* to */\\n    ) external payable override returns (uint256 /* tokenId */) {\\n        revert(\\\"Use mintAgent(proofs, descriptions, agentName, to) instead\\\");\\n    }\\n    \\n    // Missing ERC-7857 and NFT standard functions\\n    \\n    /// @notice Get total supply of agents\\n    /// @return Total number of minted agents\\n    function totalSupply() external view returns (uint256) {\\n        return totalAgents;\\n    }\\n    \\n    /// @notice Get balance of owner\\n    /// @param owner Address to check\\n    /// @return Number of agents owned\\n    function balanceOf(address owner) external view returns (uint256) {\\n        require(owner != address(0), \\\"Invalid address\\\");\\n        uint256 balance = 0;\\n        for (uint256 i = 1; i < nextTokenId; i++) {\\n            if (agents[i].owner == owner) {\\n                balance++;\\n            }\\n        }\\n        return balance;\\n    }\\n    \\n    /// @notice Get simplified token URI for metadata\\n    /// @param tokenId Token to get URI for\\n    /// @return Simplified metadata string\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        require(agents[tokenId].owner != address(0), \\\"Token does not exist\\\");\\n        \\n        DreamAgent memory agent = agents[tokenId];\\n        PersonalityTraits memory personality = agentPersonalities[tokenId];\\n        \\n        return string(abi.encodePacked(\\n            'data:application/json,{\\\"name\\\":\\\"', agent.agentName, '\\\",',\\n            '\\\"description\\\":\\\"Dreamscape AI Agent\\\",',\\n            '\\\"attributes\\\":[',\\n            '{\\\"trait_type\\\":\\\"Intelligence\\\",\\\"value\\\":', _toString(agent.intelligenceLevel), '},',\\n            '{\\\"trait_type\\\":\\\"Dreams\\\",\\\"value\\\":', _toString(agent.dreamCount), '},',\\n            '{\\\"trait_type\\\":\\\"Creativity\\\",\\\"value\\\":', _toString(personality.creativity), '},',\\n            '{\\\"trait_type\\\":\\\"Empathy\\\",\\\"value\\\":', _toString(personality.empathy), '}',\\n            ']}'\\n        ));\\n    }\\n    \\n    /// @notice Check if contract supports interface\\n    /// @param interfaceId Interface identifier\\n    /// @return True if supported\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == 0x01ffc9a7 || // ERC165\\n               interfaceId == 0x80ac58cd || // ERC721\\n               interfaceId == 0x5b5e139f || // ERC721Metadata\\n               super.supportsInterface(interfaceId); // AccessControl interfaces\\n    }\\n    \\n    /// @notice Get agent's creation timestamp\\n    /// @param tokenId Agent to query\\n    /// @return Creation timestamp\\n    function getCreationTime(uint256 tokenId) external view returns (uint256) {\\n        return agents[tokenId].createdAt;\\n    }\\n    \\n    /// @notice Get agent's name\\n    /// @param tokenId Agent to query\\n    /// @return Agent name\\n    function getAgentName(uint256 tokenId) external view returns (string memory) {\\n        return agents[tokenId].agentName;\\n    }\\n    \\n    // Emergency controls\\n    \\n    /// @notice Pause contract operations\\n    /// @dev Only accounts with PAUSER_ROLE can pause\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n    \\n    /// @notice Unpause contract operations\\n    /// @dev Only accounts with PAUSER_ROLE can unpause\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n    \\n    /// @notice Emergency admin function to authorize user\\n    /// @param tokenId Agent to authorize user for\\n    /// @param user User to authorize\\n    /// @dev Only ADMIN_ROLE can use this in emergencies\\n    function emergencyAuthorizeUser(uint256 tokenId, address user) external onlyRole(ADMIN_ROLE) {\\n        require(user != address(0), \\\"Cannot authorize zero address\\\");\\n        agents[tokenId].authorizedUsers.push(user);\\n        emit AuthorizedUsage(tokenId, user);\\n    }\\n    \\n    /// @notice Emergency admin function to transfer agent\\n    /// @param tokenId Agent to transfer\\n    /// @param to New owner\\n    /// @dev Only ADMIN_ROLE can use this in emergencies\\n    function emergencyTransfer(uint256 tokenId, address to) external onlyRole(ADMIN_ROLE) {\\n        require(to != address(0), \\\"Cannot transfer to zero address\\\");\\n        address from = agents[tokenId].owner;\\n        agents[tokenId].owner = to;\\n        agents[tokenId].lastUpdated = block.timestamp;\\n        emit Transferred(tokenId, from, to);\\n    }\\n    \\n    // Helper functions removed to reduce contract size\\n    \\n    /// @notice Check if user is authorized to use agent\\n    /// @param tokenId Agent to check\\n    /// @param user User to check\\n    /// @return True if user is authorized\\n    function _isAuthorizedUser(uint256 tokenId, address user) internal view returns (bool) {\\n        address[] memory authorizedUsers = agents[tokenId].authorizedUsers;\\n        for (uint256 i = 0; i < authorizedUsers.length; i++) {\\n            if (authorizedUsers[i] == user) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    \\n    /// @notice Convert uint to string\\n    /// @param value Number to convert\\n    /// @return String representation\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) return \\\"0\\\";\\n        \\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        \\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        \\n        return string(buffer);\\n    }\\n    \\n    // Base64 encoding removed to reduce contract size\\n} \",\"keccak256\":\"0x838ba853059b4a39376fd5e0c742af975b0ff4828e6cc6af7c7befda556a6cf1\",\"license\":\"MIT\"},\"contracts/interfaces/IERC7857.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IERC7857DataVerifier.sol\\\";\\n\\ninterface IERC7857 {\\n    /// @dev This emits when a new functional NFT is minted\\n    event Minted(\\n        uint256 indexed _tokenId,\\n        address indexed _creator,\\n        address indexed _owner,\\n        bytes32[] _dataHashes,\\n        string[] _dataDescriptions\\n    );\\n\\n    /// @dev This emits when a user is authorized to use the data\\n    event AuthorizedUsage(uint256 indexed _tokenId, address indexed _user);\\n\\n    /// @dev This emits when data is transferred with ownership\\n    event Transferred(\\n        uint256 _tokenId,\\n        address indexed _from,\\n        address indexed _to\\n    );\\n\\n    /// @dev This emits when data is cloned\\n    event Cloned(\\n        uint256 indexed _tokenId,\\n        uint256 indexed _newTokenId,\\n        address _from,\\n        address _to\\n    );\\n\\n    /// @dev This emits when a sealed key is published\\n    event PublishedSealedKey(\\n        address indexed _to,\\n        uint256 indexed _tokenId,\\n        bytes16[] _sealedKeys\\n    );\\n\\n    /// @notice The verifier interface that this NFT uses\\n    /// @return The address of the verifier contract\\n    function verifier() external view returns (IERC7857DataVerifier);\\n\\n    /// @notice Mint new functional NFT with functional data ownership proof\\n    /// @param _proofs Proof of data ownership\\n    /// @param _dataDescriptions Descriptions of the data\\n    /// @return _tokenId The ID of the newly minted token\\n    /// @param _to The address to mint the token for, if _to is not set, the token will be minted for the caller\\n    function mint(\\n        bytes[] calldata _proofs,\\n        string[] calldata _dataDescriptions,\\n        address _to\\n    ) external payable returns (uint256 _tokenId);\\n\\n    /// @notice Transfer data with ownership\\n    /// @param _to Address to transfer data to\\n    /// @param _tokenId The token to transfer data for\\n    /// @param _proofs Proofs of data available for _to\\n    function transfer(\\n        address _to,\\n        uint256 _tokenId,\\n        bytes[] calldata _proofs\\n    ) external;\\n\\n    /// @notice Clone data\\n    /// @param _to Address to clone data to\\n    /// @param _tokenId The token to clone data for\\n    /// @param _proofs Proofs of data available for _to\\n    /// @return _newTokenId The ID of the newly cloned token\\n    function clone(\\n        address _to,\\n        uint256 _tokenId,\\n        bytes[] calldata _proofs\\n    ) external payable returns (uint256 _newTokenId);\\n\\n    /// @notice Transfer public data with ownership\\n    /// @param _to Address to transfer data to\\n    /// @param _tokenId The token to transfer data for\\n    function transferPublic(address _to, uint256 _tokenId) external;\\n\\n    /// @notice Clone public data\\n    /// @param _to Address to clone data to\\n    /// @param _tokenId The token to clone data for\\n    /// @return _newTokenId The ID of the newly cloned token\\n    function clonePublic(\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable returns (uint256 _newTokenId);\\n\\n    /// @notice Add authorized user to group\\n    /// @param _tokenId The token to add to group\\n    function authorizeUsage(uint256 _tokenId, address _user) external;\\n\\n    /// @notice Get token owner\\n    /// @param _tokenId The token identifier\\n    /// @return The current owner of the token\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Get the authorized users of a token\\n    /// @param _tokenId The token identifier\\n    /// @return The current authorized users of the token\\n    function authorizedUsersOf(\\n        uint256 _tokenId\\n    ) external view returns (address[] memory);\\n} \",\"keccak256\":\"0xc25994f72e646e15966c0da0e269a3beb79da86ce66452a733dff8ef054d0b32\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC7857DataVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nstruct PreimageProofOutput {\\n    bytes32 dataHash;\\n    bool isValid;\\n}\\n\\nstruct TransferValidityProofOutput {\\n    bytes32 oldDataHash;\\n    bytes32 newDataHash;\\n    bytes pubKey;\\n    bytes16 sealedKey;\\n    bool isValid;\\n}\\n\\ninterface IERC7857DataVerifier {\\n    /// @notice Verify preimage of data\\n    /// @param proofs Proof of data ownership\\n    /// @return Output of the preimage proof verification\\n    function verifyPreimage(\\n        bytes[] calldata proofs\\n    ) external view returns (PreimageProofOutput[] memory);\\n\\n    /// @notice Verify data transfer validity\\n    /// @param proofs Proof of data transfer validity\\n    /// @return Output of the transfer validity proof verification\\n    function verifyTransferValidity(\\n        bytes[] calldata proofs\\n    ) external view returns (TransferValidityProofOutput[] memory);\\n} \",\"keccak256\":\"0x78406bba1f9f687ee4e9fce1ce7391a3c9f94029c2e1a09f376e45f41cb3cf58\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPersonalityEvolution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title IPersonalityEvolution - Interface for agent personality evolution\\n/// @notice Defines the personality evolution system for Dreamscape iNFTs\\n/// @dev Implements personality trait development based on dream analysis\\ninterface IPersonalityEvolution {\\n    \\n    /// @notice Core personality traits structure\\n    /// @dev All traits range from 0-100, dominantMood is current emotional state\\n    struct PersonalityTraits {\\n        uint8 creativity;      // 0-100: Innovation, imagination, artistic thinking\\n        uint8 analytical;      // 0-100: Logic, problem-solving, systematic thinking  \\n        uint8 empathy;         // 0-100: Emotional understanding, compassion, support\\n        uint8 intuition;       // 0-100: Gut feelings, spiritual insights, wisdom\\n        uint8 resilience;      // 0-100: Stress handling, recovery, perseverance\\n        uint8 curiosity;       // 0-100: Learning desire, exploration, questioning\\n        string dominantMood;   // Current emotional state: \\\"peaceful\\\", \\\"anxious\\\", \\\"excited\\\", etc.\\n        uint256 lastDreamDate; // Timestamp of last dream processing (prevents multiple per day)\\n    }\\n    \\n    /// @notice Personality impact from dream analysis\\n    /// @dev Defines how a dream affects personality traits\\n    struct PersonalityImpact {\\n        int8 creativityChange;     // -10 to +10 change in creativity\\n        int8 analyticalChange;     // -10 to +10 change in analytical thinking\\n        int8 empathyChange;        // -10 to +10 change in empathy\\n        int8 intuitionChange;      // -10 to +10 change in intuition\\n        int8 resilienceChange;     // -10 to +10 change in resilience\\n        int8 curiosityChange;      // -10 to +10 change in curiosity\\n        string moodShift;          // New dominant mood\\n        uint8 evolutionWeight;     // 1-100: How much this dream affects personality\\n    }\\n    \\n    /// @notice Conversation context type for memory management\\n    enum ContextType {\\n        DREAM_DISCUSSION,    // Discussing previous dreams\\n        GENERAL_CHAT,        // General conversation\\n        PERSONALITY_QUERY,   // Asking about personality/traits\\n        THERAPEUTIC,         // Therapeutic conversation\\n        ADVICE_SEEKING      // Seeking advice/guidance\\n    }\\n    \\n    // Events\\n    \\n    /// @dev Emitted when agent personality evolves from dream processing\\n    event PersonalityEvolved(\\n        uint256 indexed tokenId,\\n        bytes32 indexed dreamHash,\\n        PersonalityTraits newPersonality,\\n        PersonalityImpact impact\\n    );\\n    \\n    /// @dev Emitted when agent has a conversation (without personality evolution)\\n    event AgentConversation(\\n        uint256 indexed tokenId,\\n        bytes32 indexed conversationHash,\\n        ContextType contextType,\\n        uint256 conversationCount\\n    );\\n    \\n    /// @dev Emitted when agent reaches personality milestones\\n    event PersonalityMilestone(\\n        uint256 indexed tokenId,\\n        string milestone,\\n        uint8 traitValue,\\n        string traitName\\n    );\\n    \\n    /// @dev Emitted when agent's response style evolves\\n    event ResponseStyleEvolved(\\n        uint256 indexed tokenId,\\n        string newStyle,\\n        string[] dominantTraits\\n    );\\n    \\n    // Core Functions\\n    \\n    /// @notice Process daily dream and evolve agent personality\\n    /// @param tokenId Agent to evolve\\n    /// @param dreamHash 0G Storage hash of encrypted dream data\\n    /// @param dreamAnalysisHash 0G Storage hash of AI analysis\\n    /// @param impact Personality changes from dream analysis\\n    function processDailyDream(\\n        uint256 tokenId,\\n        bytes32 dreamHash,\\n        bytes32 dreamAnalysisHash,\\n        PersonalityImpact calldata impact\\n    ) external;\\n    \\n    /// @notice Record conversation without personality evolution\\n    /// @param tokenId Agent having conversation\\n    /// @param conversationHash 0G Storage hash of conversation data\\n    /// @param contextType Type of conversation for context building\\n    function recordConversation(\\n        uint256 tokenId,\\n        bytes32 conversationHash,\\n        ContextType contextType\\n    ) external;\\n    \\n    /// @notice Get agent's current personality traits\\n    /// @param tokenId Agent to query\\n    /// @return traits Current personality traits\\n    function getPersonalityTraits(uint256 tokenId) \\n        external view returns (PersonalityTraits memory traits);\\n    \\n    /// @notice Get agent's dream history hashes\\n    /// @param tokenId Agent to query\\n    /// @param limit Maximum number of dreams to return (0 = all)\\n    /// @return dreamHashes Array of dream storage hashes\\n    function getDreamHistory(uint256 tokenId, uint256 limit) \\n        external view returns (bytes32[] memory dreamHashes);\\n    \\n    /// @notice Get agent's conversation history hashes\\n    /// @param tokenId Agent to query\\n    /// @param limit Maximum number of conversations to return (0 = all)\\n    /// @return conversationHashes Array of conversation storage hashes\\n    function getConversationHistory(uint256 tokenId, uint256 limit) \\n        external view returns (bytes32[] memory conversationHashes);\\n    \\n    /// @notice Check if agent can process dream today (24h cooldown)\\n    /// @param tokenId Agent to check\\n    /// @return canProcess True if agent can process a dream today\\n    function canProcessDreamToday(uint256 tokenId) \\n        external view returns (bool canProcess);\\n    \\n    /// @notice Calculate personality rarity score\\n    /// @param tokenId Agent to analyze\\n    /// @return rarityScore Rarity score based on trait distribution\\n    function calculatePersonalityRarity(uint256 tokenId) \\n        external view returns (uint256 rarityScore);\\n    \\n    /// @notice Get agent's dominant personality traits (top 3)\\n    /// @param tokenId Agent to analyze\\n    /// @return traits Array of dominant trait names\\n    /// @return values Array of corresponding trait values\\n    function getDominantTraits(uint256 tokenId) \\n        external view returns (string[] memory traits, uint8[] memory values);\\n    \\n    /// @notice Get agent's response style based on personality\\n    /// @param tokenId Agent to analyze\\n    /// @return style Response style description\\n    /// @return primaryTrait Most dominant trait influencing style\\n    function getResponseStyle(uint256 tokenId) \\n        external view returns (string memory style, string memory primaryTrait);\\n    \\n    // Advanced Analytics\\n    \\n    /// @notice Get personality evolution statistics\\n    /// @param tokenId Agent to analyze\\n    /// @return totalEvolutions Number of personality changes\\n    /// @return evolutionRate Rate of personality change\\n    /// @return lastEvolution Timestamp of last evolution\\n    function getEvolutionStats(uint256 tokenId) \\n        external view returns (\\n            uint256 totalEvolutions,\\n            uint256 evolutionRate,\\n            uint256 lastEvolution\\n        );\\n    \\n\\n    \\n    /// @notice Check if agent has reached specific personality milestone\\n    /// @param tokenId Agent to check\\n    /// @param milestone Milestone to check (\\\"empathy_master\\\", \\\"creative_genius\\\", etc.)\\n    /// @return achieved True if milestone has been achieved\\n    /// @return achievedAt Timestamp when milestone was achieved (0 if not achieved)\\n    function hasMilestone(uint256 tokenId, string calldata milestone) \\n        external view returns (bool achieved, uint256 achievedAt);\\n    \\n    // Batch Operations\\n    \\n    /// @notice Get multiple agents' personality summaries\\n    /// @param tokenIds Array of agent IDs\\n    /// @return summaries Array of personality summaries\\n    function getPersonalitySummaries(uint256[] calldata tokenIds) \\n        external view returns (PersonalityTraits[] memory summaries);\\n} \",\"keccak256\":\"0x58e761ce7f351360999f1b88b1521c32f7aa9a6c87a255d60a87040c5324ac6c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0346200026257601f9062005da638819003838101601f1916830191906001600160401b038311848410176200026757808492604094855283398101031262000262576200005c602062000054836200027d565b92016200027d565b91600160008181558160055580600655806007556200007d600e5462000292565b83811162000215575b507f447265616d7363617065204149204167656e747320763200000000000000002e600e55600f54620000b99062000292565b90838211620001e9575b5050600e66222922a0a6bb1960c91b01600f55506001600160a01b03918216918215620001a45783161562000160575060a0526080526200010433620002cf565b50620001103362000350565b506200011c33620003f3565b50620001283362000491565b506040516158569081620005308239608051818181611c5a015281816122cb0152612b28015260a05181818161265301526139340152f35b6064906040519062461bcd60e51b82526020600483015260248201527f54726561737572792063616e6e6f74206265207a65726f2061646472657373006044820152fd5b60405162461bcd60e51b815260206004820152602481018390527f56657269666965722063616e6e6f74206265207a65726f2061646472657373006044820152606490fd5b600f81528360208220920160051c8201915b8281106200020a5750620000c3565b8181558301620001fb565b600e8252830160051c7fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd9081019083905b8281106200025657505062000086565b83815501839062000246565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200026257565b90600182811c92168015620002c4575b6020831014620002ae57565b634e487b7160e01b600052602260045260246000fd5b91607f1691620002a2565b6001600160a01b031660008181527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604081205490919060ff166200034c5781805260016020526040822081835260205260408220600160ff19825416179055339160008051602062005d868339815191528180a4600190565b5090565b6001600160a01b031660008181527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d3769460205260408120549091907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759060ff16620003ee5780835260016020526040832082845260205260408320600160ff1982541617905560008051602062005d86833981519152339380a4600190565b505090565b6001600160a01b031660008181527fb4fd2442cb0653849f414a2f81c1eb01ec27a0fc1bb28000d4ca51d98b75fd0360205260408120549091907f0ce23c3e399818cfee81a7ab0880f714e53d7672b08df0fa62f2843416e1ea099060ff16620003ee5780835260016020526040832082845260205260408320600160ff1982541617905560008051602062005d86833981519152339380a4600190565b6001600160a01b031660008181527fb9cbbae02fe941283ec0eefd7b121e3bc7f89fae077b27bdd75a7fd4cf1543a860205260408120549091907f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9060ff16620003ee5780835260016020526040832082845260205260408320600160ff1982541617905560008051602062005d86833981519152339380a460019056fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714613dbd5750806304f74d7414613d8c57806306fdde0314613ce6578063140b79c814613cba5780631578e53b14613c8157806318160ddd146109655780631aeb542f14613c095780631f2e589e14613b60578063248a9ca314613b315780632980471d146139635780632b7ac3f31461391e5780632ba97a30146135a65780632f2ff15d146135675780633481e7bf1461350857806336568abe146134c15780633b91f36a146132bf5780633db43fb3146131ef5780633f4ba83a146131855780634c120766146130205780634eb22e9e14612f7c5780634f6ed44c14612509578063513856c8146124455780635436972c1461240f57806355619911146123ae57806358c812aa1461233b5780635c975abb1461231857806360c6d8ae146122fa57806361d027b3146122b55780636352211e14612281578063687663db146121275780636a28ef3b146120f657806370a08231146120705780637289fdd614611b2257806375794a3c14611b0457806375b238fc14611adb57806380bb401214611a9c5780638456cb5914611a4257806386e7b94d14611a2857806391d14854146119db57806395d89b41146118f957806397ec23cb146118ca57806398a9ce2e146118705780639ccff74914610aa9578063a217fddf14610a8d578063a5014452146109c8578063ab30be87146109ab578063b7125e9b14610983578063c505371214610965578063c87b56dd146105cd578063cc637afe1461056c578063d547741f1461052d578063d642b4b11461050a578063dfdad7de1461043e578063e32b178d146103d2578063e63ab1e914610397578063e7705db61461035c578063ed2c77f21461032a5763fa83d14e1461029d57600080fd5b34610325576040366003190112610325576102eb6004356102bc614090565b9080600052600360205260018060a01b0360406000205416331480156102ed575b6102e6906152bb565b6155a0565b005b503360009081527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d37694602052604090205460ff166102dd565b600080fd5b346103255761035861034461033e36613e54565b90614b6c565b6040519182916020835260208301906142a7565b0390f35b346103255760003660031901126103255760206040517f0ce23c3e399818cfee81a7ab0880f714e53d7672b08df0fa62f2843416e1ea098152f35b346103255760003660031901126103255760206040517f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8152f35b34610325576020366003190112610325576004356103ee614aad565b50600081815260036020526040902054610412906001600160a01b03161515614aec565b600052600860205261035861042a60406000206149a5565b6040519182916020835260208301906141f8565b346103255761044c36614261565b50508060005260036020527f0ea8df787dde63a7bdc34d17097adf25749a3521f660e92dabdff8d6ee91d18a602060018060a01b0380948160406000205416331480156104dc575b61049d906152bb565b16936104aa851515615307565b83600052600382526040600020805490866001600160601b0360a01b83161781556003429101556040519485521692a3005b506000805160206158018339815191526000908152600184526040808220338352855290205460ff16610494565b3461032557600036600319011261032557602060405167016345785d8a00008152f35b34610325576040366003190112610325576102eb60043561054c614090565b9080600052600160205261056760016040600020015461439f565b614445565b34610325576020366003190112610325576004356001600160401b0381116103255760ff6105b760206105a48194369060040161418b565b8160405193828580945193849201614048565b8101600481520301902054166040519015158152f35b34610325576020806003193601126103255760043560008181526003835260409020546001600160a01b039291908316156109295761010381610915926000526003845260406000206040519561062387613f9e565b8154168652607d60f81b604051610648816106418160018701613ed2565b0382614027565b868801908152600283015460408901526003830154606089015261066e60048401615676565b6080890152604051610687816106418160058801614b2f565b60a089015261069860068401615548565b60c089015260078301549360e089019485526008840154986101a06106f9600d610100978885019d8e52600981015461012086015260ff600a820154161515610140860152600b810154610160860152600c81015461018086015201615676565b9101526000526008875261072661071f61071660406000206149a5565b9251955161573b565b985161573b565b61074260ff60406107398286511661573b565b9401511661573b565b91604051998a967f646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a22008b890152610781815180928d603f8c019101614048565b61088b60f21b603f918901918201527f226465736372697074696f6e223a22447265616d7363617065204149204167656041820152631b9d088b60e21b60618201526d2261747472696275746573223a5b60901b60658201527f7b2274726169745f74797065223a22496e74656c6c6967656e6365222c227661607382015264363ab2911d60d91b609382015281519161082390839060988401908e01614048565b0191611f4b60f21b928360988201527f7b2274726169745f74797065223a22447265616d73222c2276616c7565223a00609a82015261086b825180938d60b985019101614048565b018260b98201527f7b2274726169745f74797065223a2243726561746976697479222c2276616c7560bb8201526232911d60e91b60db8201526108b7825180938c60de85019101614048565b019060de8201527f7b2274726169745f74797065223a22456d7061746879222c2276616c7565223a60e08201526108f6825180938a8785019101614048565b0191820152615d7d60f01b6101018201520360e3810185520183614027565b61035860405192828493845283019061406b565b60405162461bcd60e51b8152600481018390526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b34610325576000366003190112610325576020600654604051908152f35b346103255760203660031901126103255760206109a1600435614c60565b6040519015158152f35b346103255760003660031901126103255760206040516103e88152f35b6060366003190112610325576001600160401b03600435818111610325576109f4903690600401614140565b505060243590811161032557610a0e903690600401614140565b50506044356001600160a01b038116036103255760405162461bcd60e51b815260206004820152603a60248201527f557365206d696e744167656e742870726f6f66732c206465736372697074696f60448201527f6e732c206167656e744e616d652c20746f2920696e73746561640000000000006064820152608490fd5b3461032557600036600319011261032557602060405160008152f35b3461032557600319608036820112610325576001600160401b036064351161032557610100906064353603011261032557610ae26148ed565b600435600052600360205260018060a01b036040600020541633148015611838575b8015611821575b610b149061492e565b610b1f600435614c60565b156117dc57610b32606435600401614dea565b6004356000526009602052610b4d6024356040600020614970565b600435600052600b602052610b686044356040600020614970565b60043560005260036020526008604060002001610b858154614595565b905560043560005260036020524260036040600020015560086020526040600020426002820155600360205260056008604060002001540615610cc0575b5060043560005260036020526040600020600360088201540615610c2e575b600435600052600360205260076040600020015460405190602435825260208201527f871f9739b79e9efd6285318758001f00502185ff0d254a080922cd80580c3e02604060043592a2005b600701610c3b8154614595565b905560043560005260036020526007604060002001546000198101908111610caa57600435600052600360205260076040600020015460405191825260208201527f06bbb7cb56b5f3845ce5ad015d25cbf87ed1c37c635e2082acb2610598f15cc7604060043592a280610be2565b634e487b7160e01b600052601160045260246000fd5b610cce606435600401614dea565b610cd7816149a5565b815460046064350135600081900b90036103255760ff610cff60643560040135828416614f8f565b1660ff1982168117845560246064350135600081900b900361032557610d5191610d3b91606435602401359160ff19161760081c60ff16614f8f565b835461ff00191660089190911b61ff0016178355565b815460101c60ff1660643560440135600081900b900361032557610d7f610d97916044606435013590614f8f565b835462ff0000191660109190911b62ff000016178355565b815460181c60ff16606480350135600081900b900361032557610dc3610ddd9160648035013590614f8f565b835463ff000000191660189190911b63ff00000016178355565b815460201c60ff1660643560840135600081900b900361032557610e0b610e27916084606435013590614f8f565b835464ff00000000191660209190911b64ff0000000016178355565b815460281c60ff1660643560a40135600081900b900361032557610e55610e719160a4606435013590614f8f565b835465ff0000000000191660289190911b60ff60281b16178355565b610e8560c460643501606435600401614a17565b906001600160401b038211611524578190610eb082610ea76001880154613e98565b60018801614606565b600090601f831160011461176b57600092611760575b50508160011b916000199060031b1c19161760018301555b60043560005260036020526040600020600a81019081549160ff831615611707575b5050506004356000526003602052600b604060002001610f208154614595565b9055600435600052600360205242600c60406000200155605a60ff6060610f46856149a5565b9360558360408301511610806116f6575b6116b8575b838382511610806116ab575b61166f575b8383602083015116108061165f575b611625575b0151161080611613575b6115d3575b603c60ff8251161190816115c0575b816115ad575b8161159a575b81611587575b81611574575b508061153a575b6113a2575b610fd4610fcf826149a5565b614fd7565b600435600052600d602052604060002060405190816000825492610ff784613e98565b80845293600181169081156113805750600114611339575b5061101c92500382614027565b602081519101208151602083012003611119575b5061104660405191604083526040830190614a49565b81810360208301526064356004013560000b81526024606435013560000b60208201526044606435013560000b604082015260648035013560000b60608201526084606435013560000b608082015260a4606435013560000b60a08201526110ce6110bb60c460643501606435600401614532565b61010060c0850152610100840191614511565b9060e460643501359060ff82168092036103255760e001527f4188327df0df4e6ad8674fc37ff48b2b049fdaae33e3c8e38275816040949af26024359280600435930390a380610bc3565b600435600052600d60205261064161113b604060002060405192838092613ed2565b600435600052600d60205261115482604060002061464d565b7f90f9e809e3805f30ac3fc3562ac1fb69527e27e23e063a99f43a92343f35c9d260405180611187856004359583614118565b0390a260043560005260086020526111a260406000206149a5565b906111ab6145b8565b9160ff60a0604051926111bd84613f83565b82815116845282602082015116602085015282604082015116604085015282606082015116606085015282608082015116608085015201511660a08201526040519061120882613f83565b611210614caf565b825261121a614cd5565b6020830152611227614cfb565b6040830152611234614d1e565b6060830152611241614d43565b608083015261124e614d69565b60a083015260005b600381106112b75750505061129d7fff8866d78ff3fc4f37232c9d6da12c9b2168edd42074faa52ea90054f0abcf6d916112ae60405192839260408452604084019061406b565b8281036020840152600435956140bc565b0390a281611030565b600060015b6006811061130157509060006112f6836112d96112fc9588614d8e565b516112e4858b6145a4565b526112ef848a6145a4565b5085614d8e565b52614595565b611256565b60ff61130d8286614d8e565b511660ff61131b8487614d8e565b511610611331575b61132c90614595565b6112bc565b905080611323565b90506000929192526020600020906000915b81831061136457505090602061101c928201018661100f565b602091935080600191548385880101520191019091839261134b565b90506020925061101c94915060ff191682840152151560051b8201018661100f565b6040516113ae8161400c565b600d81526c18985b185b98d95917dcdbdd5b609a1b60208201526040516113d481613f68565b6001815260ff600260208301924284526040810193603c8552600435600052600c60205261141f6114096040600020886141d2565b92511515839060ff801983541691151516179055565b5160018201550191511660ff198254161790556004356000526003602052600d6040600020018054600160401b8110156115245761146291600182018155613e6a565b61150e57816114709161464d565b604051606081527fd0ba61587fc16fc1a3274fc4cd4ecf1243baadf9d8dde73ab61d5a7af1474ff46114a5606083018461406b565b91603c6020820152600081840393846040840152526020600435930190a27f4d4ca4452701c64d62e210aa5b23f7d376cf2d485ebc4fee8528e048afb0e2cf6114f96040519260408452604084019061406b565b91603c602082015280600435930390a2610fc3565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b50600435600052600c60205260ff602d6040600020604051906c18985b185b98d95917dcdbdd5b609a1b8252600d82015220541615610fbe565b603c915060a060ff910151161182610fb7565b9050603c60ff6080830151161190610fb1565b9050603c60ff6060830151161190610fab565b9050603c60ff6040830151161190610fa5565b9050603c60ff6020830151161190610f9f565b61160e60ff6060830151166040516115ea8161400c565b600f81526e73706972697475616c5f677569646560881b6020820152600435615165565b610f90565b50605a60ff6060830151161015610f8b565b61165a8360208701511660405161163b8161400c565b600a8152691b1bd9da58d7db1bdc9960b21b6020820152600435615165565b610f81565b5083836020870151161015610f7c565b6116a6838651166040516116828161400c565b600f81526e63726561746976655f67656e69757360881b6020820152600435615165565b610f6d565b5083838651161015610f68565b6116f1836040870151166040516116ce8161400c565b600e81526d32b6b830ba343cafb6b0b9ba32b960911b6020820152600435615165565b610f5c565b506055836040870151161015610f57565b600160089360ff191617905501547f3699e9591a9a800af90ffae86552b9fa46719da5dbb81727a2bd1ee93c1f57ac6040516040815261174a6040820186614a49565b92602082015280600435930390a2828080610f00565b013590508480610ec6565b909250600185016000526020600020906000935b601f19841685106117c4576001945083601f198116106117aa575b505050811b016001830155610ede565b0135600019600384901b60f8161c1916905584808061179a565b8181013583556020948501946001909301920161177f565b60405162461bcd60e51b815260206004820152601d60248201527f4461696c7920647265616d20616c72656164792070726f6365737365640000006044820152606490fd5b50610b14611831336004356156db565b9050610b0b565b503360009081527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d37694602052604090205460ff16610b04565b6040366003190112610325576118846140a6565b5060405162461bcd60e51b815260206004820152601c60248201527f5075626c696320636c6f6e65206e6f7420696d706c656d656e746564000000006044820152606490fd5b346103255760203660031901126103255760043560005260036020526020600260406000200154604051908152f35b34610325576000366003190112610325576040516000600f5461191b81613e98565b808452906001908181169081156119b45750600114611959575b6103588461194581860382614027565b60405191829160208352602083019061406b565b600f600090815292507f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b82841061199c57505050810160200161194582611935565b80546020858701810191909152909301928101611984565b60ff191660208087019190915292151560051b850190920192506119459150839050611935565b34610325576040366003190112610325576119f4614090565b600435600052600160205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461032557610358610344611a3c36613e54565b90614bfc565b3461032557600036600319011261032557611a5b614343565b611a636148ed565b600160ff1960025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b3461032557611aaa36613e54565b90600052600b6020526040600020805482101561032557602091611acd91613e6a565b90546040519160031b1c8152f35b346103255760003660031901126103255760206040516000805160206158018339815191528152f35b34610325576000366003190112610325576020600554604051908152f35b611b2b36614261565b505090611b3661490b565b611b3e6148ed565b81600052600360209281845260018060a01b038093816040600020541633148015612042575b611b6d906152bb565b16908115611ffd576103e86006541015611fb85767016345785d8a000092833410611f7557600591825495611ba187614595565b845581600052828852604060002087600052604060002090808203611ea7575b505050856000528187526000600b60408220866001600160601b0360a01b825416178155426002820155428582015582600882015582600982015501558060005260088752604060002086600052604060002090808203611dde575b5050856000526008875260006002604082200155611c3c600654614595565b600655600754858101809111610caa57600755611c896000808080897f00000000000000000000000000000000000000000000000000000000000000005af1611c83614828565b50614858565b843411611dac575b85817f40b442ee2bb535802063305b95f127b5101e5fce261a5dec9379683eaaad8cdb60408051338152888c820152a360005285528360406000206004810192611ce8604051926040845282604085019101614b2f565b828103898401528454908181528982818301941b8201019560005289600020926000915b8b848410611d7b57505050505050807f531bd8ca2b17505aaa50d843fabe2dfd9a3bb9e20c511d2288b24bd484861b029133940390a4604051908152817f6fe296e805108cd514fea415210be4016149b01eeb08effbe130951b6a5f6c0b843393a36001600055604051908152f35b9092949760019294969750611d9a8391601f198682030187528a613ed2565b98019301930190928995949293611d0c565b67016345785d89ffff193401348111610caa576000808080611dd994335af1611dd3614828565b506148b1565b611c91565b8054825460ff91821660ff19821681178555835461ff001661ffff19909216171783556002918291611e8b90611e6a818e8554895462ff00001916601091821c841690911b62ff0000161789558554895463ff0000001916601891821c841690911b63ff000000161789558554895464ff000000001916911c9190911660201b64ff0000000016178755565b825460281c16859060ff60281b82549160281b169060ff60281b1916179055565b611e9b6001820160018601615353565b01549101558780611c1d565b600d81611f6d94829354166001600160601b0360a01b855416178455611ed36001820160018601615353565b600281015460028501558681015487850155611ef5600482016004860161542f565b611f03888201898601615481565b611f1360068201600686016154df565b600781015460078501556008810154600885015560098101546009850155611f5160ff600a83015416600a86019060ff801983541691151516179055565b600b810154600b850155600c810154600c85015501910161542f565b878080611bc1565b6064866040519062461bcd60e51b825280600483015260248201527f496e73756666696369656e74207061796d656e7420666f7220636c6f6e696e676044820152fd5b60405162461bcd60e51b815260048101869052601c60248201527f4d6178696d756d206167656e7473206c696d69742072656163686564000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601c60248201527f43616e6e6f7420636c6f6e6520746f207a65726f2061646472657373000000006044820152606490fd5b506000805160206158018339815191526000908152600187526040808220338352885290205460ff16611b64565b3461032557602080600319360112610325576001600160a01b03806120936140a6565b16906120a08215156144bc565b600091600191600554925b8381106120bc578585604051908152f35b8060005260038652828260406000205416146120e1575b6120dc90614595565b6120ab565b936120ee6120dc91614595565b9490506120d3565b346103255761210436613e54565b9060005260096020526040600020805482101561032557602091611acd91613e6a565b3461032557602080600319360112610325576004356001600160401b03811161032557612158903690600401614140565b612164819392936144fa565b906121726040519283614027565b808252601f19612181826144fa565b018360005b82811061226b5750505060005b8181106121fb5750506040519082820192808352815180945260408301938160408260051b8601019301916000955b8287106121cf5785850386f35b9091929382806121eb600193603f198a820301865288516141f8565b96019201960195929190926121c2565b8061220a61222b9284886152ab565b3560009081526003865260409020546001600160a01b031661223057614595565b612193565b61223b8184886152ab565b356000526008855261225060406000206149a5565b61225a82866145a4565b5261226581856145a4565b50614595565b612273614aad565b828287010152018490612186565b34610325576020366003190112610325576004356000526003602052602060018060a01b0360406000205416604051908152f35b34610325576000366003190112610325576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610325576000366003190112610325576020600754604051908152f35b3461032557600036600319011261032557602060ff600254166040519015158152f35b34610325576040366003190112610325576024356001600160401b03811161032557612386612370606092369060040161418b565b600435600052600c6020526040600020906141d2565b60ff8154169060ff600260018301549201541690604051921515835260208301526040820152f35b34610325576040366003190112610325576004356123ca614090565b906123d36142db565b6001600160a01b03918216917f0ea8df787dde63a7bdc34d17097adf25749a3521f660e92dabdff8d6ee91d18a906020906104aa851515615307565b3461032557602036600319011261032557600435600052600d602052610358610641611945604060002060405192838092613ed2565b34610325576020366003190112610325576004356000526003602052604060002060018060a01b038154166040519161248c836124858160018501613ed2565b0384614027565b6002810154906003810154906007810154600882015460098301549060ff600a8501541692600c600b860154950154956124d86040519a8b9a8b526101408060208d01528b019061406b565b9760408a01526060890152608088015260a087015260c0860152151560e08501526101008401526101208301520390f35b6080366003190112610325576004356001600160401b03811161032557612534903690600401614140565b906024356001600160401b03811161032557612554903690600401614140565b916044356001600160401b0381116103255761257490369060040161418b565b606435916001600160a01b03831683036103255761259061490b565b6125986148ed565b6125ac6001600160a01b03841615156144bc565b858503612f45576103e86006541015612f0c5781518015159081612f00575b5015612ecc5760ff60405160208185516125e88183858a01614048565b810160048152030190205416612e995767016345785d8a00003410612e5d57604051809663c2a93e3760e01b825280602483016020600485015252604482019060448160051b8401019380926000915b838310612e2a57505050505080600092038160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa948515612e1e57600095612d30575b5061268f8551614563565b9260005b86518110156127045760206126a882896145a4565b510151156126cf57806126be6126ca92896145a4565b51516112f682886145a4565b612693565b60405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606490fd5b50839085604051602081865161271d8183858b01614048565b81016004815203019020600160ff198254161790556005549361273f85614595565b60055560405161274e81613ff1565b600081526040519061275f82613ff1565b600082526040519261277084613f9e565b6001600160a01b0389168452602084015242604084018190526060840152612797846144fa565b6127a46040519182614027565b84815260208101368660051b8801116103255786905b8660051b88018210612d0557505060808401528560a084015260c0830152600160e08301526000610100830152600061012083015260006101408301526000610160830152426101808301526101a0820152846000526003602052604060002060018060a01b038251166001600160601b0360a01b82541617815561284660208301516001830161464d565b60408201516002820155606082015160038201556004810160808301519060208251926128738484614714565b019060005260206000206000915b838310612ce8575050505060a08201518051906001600160401b03821161152457602060058401916128b384846147a4565b0190600052602060002060005b838110612cd4575050505060c08201518051906001600160401b03821161152457602060068401916128f284846147e7565b0190600052602060002060005b838110612cb75750505050600d6101a09160e08401516007820155610100840151600882015561012084015160098201556129506101408501511515600a83019060ff801983541691151516179055565b610160840151600b820155610180840151600c8201550191015190602082519261297a8484614714565b019060005260206000206000915b838310612c9a575050505060405161299f81613fba565b603280825280602083015280604083015280606083015280608083015260a08201526040516129cd8161400c565b60078152661b995d5d1c985b60ca1b602082015260c0820152600060e0820152846000526008602052600260e060406000209260ff81511660ff19855416178455612a3060ff602083015116859061ff0082549160081b169061ff001916179055565b6040810151845462ff0000191660109190911b62ff0000161784556060810151845463ff000000191660189190911b63ff000000161784556080810151845464ff00000000191660209190911b64ff000000001617845560a0810151845465ff0000000000191660289190911b60ff60281b16178455612ab760c08201516001860161464d565b015191015583600052600d6020526040600020612ad48154613e98565b601f8111612c78575b50600e661b995d5d1c985b60ca1b019055600654612afa90614595565b60065560075467016345785d8a00008101809111610caa57600755612b51600080808067016345785d8a00007f00000000000000000000000000000000000000000000000000000000000000005af1611c83614828565b67016345785d8a00003411612c4c575b90612b77604051936040855260408501906142a7565b918383036020850152808352602083019260208260051b82010193836000925b848410612c14576020896001600160a01b038c1633827f531bd8ca2b17505aaa50d843fabe2dfd9a3bb9e20c511d2288b24bd484861b028d8d038ea460405167016345785d8a00008152817f6fe296e805108cd514fea415210be4016149b01eeb08effbe130951b6a5f6c0b843393a36001600055604051908152f35b909192939495602080612c3c600193601f19868203018852612c368b88614532565b90614511565b9801940194019294939190612b97565b67016345785d89ffff193401348111610caa576000808080612c7394335af1611dd3614828565b612b61565b612c949082600052601f6020600020910160051c8101906145ef565b86612add565b6001602082612cab8394518661464d565b01920192019190612988565b82516001600160a01b0316818301556020909201916001016128ff565b6001906020845194019381840155016128c0565b6001602082612cf98394518661464d565b01920192019190612881565b6001600160401b038235116103255760208091612d253685358c0161418b565b8152019101906127ba565b9094503d806000833e612d438183614027565b60208282810103126103255781516001600160401b03811161032557820190808301601f8301121561032557815190612d7b826144fa565b93612d896040519586614027565b828552602085019382820160208560061b83010111610325579360208501945b60208560061b8201018610612dc5575050505050509385612684565b6040868585010312610325576040518060408101106001600160401b0360408301111761152457604081016040528651815260208701518015158103610325576020938285928360409501528152019601959150612da9565b6040513d6000823e3d90fd5b9193956020612e4c81926001949698604319908203018752612c368a87614532565b97019301930190928a949293612638565b60405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606490fd5b60405162461bcd60e51b815260206004820152600b60248201526a4e616d652065786973747360a81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964206e616d6560a01b6044820152606490fd5b602091501115876125cb565b60405162461bcd60e51b815260206004820152601160248201527013585e081b1a5b5a5d081c995858da1959607a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e098cadccee8d040dad2e6dac2e8c6d608b1b6044820152606490fd5b3461032557602036600319011261032557600435600052600860205260406000208054600260405192612fbd84612fb68160018501613ed2565b0385614027565b015461301660405193849360ff908181168652818160081c166020870152818160101c166040870152818160181c166060870152818160201c16608087015260281c1660a08501526101008060c086015284019061406b565b9060e08301520390f35b346103255760203660031901126103255760043560008181526003602052604090205460609161307b9161305e906001600160a01b03161515614aec565b80600052600d602052613082604060002060405193848092613ed2565b0383614027565b600052600860205261309760406000206149a5565b60009060ff908181511680613171575b5081602082015116828416811161315d575b50816040820151168284168111613149575b50816060820151168284168111613135575b5081608082015116828416811161311d575b5060a00151811691161061310d575b61035860405192839283614118565b9050613117614d69565b906130fe565b90945091508060a061312d614d43565b9591506130ef565b9094509150613142614d1e565b93856130dd565b9094509150613156614cfb565b93856130cb565b909450915061316a614cd5565b93856130b9565b909450915061317e614caf565b93856130a7565b346103255760003660031901126103255761319e614343565b60025460ff8116156131dd5760ff19166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b604051638dfc202b60e01b8152600490fd5b3461032557602036600319011261032557600435600081815260036020526040902054613226906001600160a01b03161515614aec565b60005260036020526040600020600b8101546002600c8301549201548042116000146132b45761325a6201518091426148a4565b0480159290836132a857606483029383850460641484151715610caa5761329257606093045b60405192835260208301526040820152f35b634e487b7160e01b600052601260045260246000fd5b50606092506000613280565b506060916000613280565b34610325576020806003193601126103255760a090600435806000526003908183526132f8600180861b03604060002054161515614aec565b6000526008825261330c60406000206149a5565b906040519261331a84613f83565b613322614caf565b845261332c614cd5565b81850152613338614cfb565b6040850152613345614d1e565b6060850152613352614d43565b608085015261335f614d69565b858501526040519261337084613f83565b60ff9581878093511686528284820151168487015282604082015116604087015282606082015116606087015282608082015116608087015201511660a08401526133b96145b8565b93604051926133c784613fd6565b80845282840194606036873760005b82811061342e575050505090816133f8604051956040875260408701906140bc565b9185830382870152519182815201929160005b8281106134185785850386f35b835187168552938101939281019260010161340b565b600060015b6006811061348b57509060006112f6838b61345c85613455613486988c614d8e565b51926145a4565b52613467848d6145a4565b508c6134738288614d8e565b511661347f858c6145a4565b5285614d8e565b6133d6565b8a6134968286614d8e565b51168b6134a38487614d8e565b5116106134b9575b6134b490614595565b613433565b9050806134ab565b34610325576040366003190112610325576134da614090565b336001600160a01b038216036134f6576102eb90600435614445565b60405163334bd91960e11b8152600490fd5b34610325576040366003190112610325576135216140a6565b5060405162461bcd60e51b815260206004820152601f60248201527f5075626c6963207472616e73666572206e6f7420696d706c656d656e746564006044820152606490fd5b34610325576040366003190112610325576102eb600435613586614090565b908060005260016020526135a160016040600020015461439f565b6143c5565b34610325576020806003193601126103255760043560008181526003835260409020546135dd906001600160a01b03161515614aec565b80600052600882526135f260406000206149a5565b6040516135fe81613f83565b60ff90818351168152848301938285511686830152604084018381511660408401526060850195848751166060850152608086019085825116608086015260a08701918683511660a087015260009860005b600681106138fa57506006809a046000976000915b8c831061388a575050506000986050808a83511611613881575b808a86511611613871575b808a88511611613861575b808a84511611613851575b808a85511611613841575b8986511611613824575b90888095949392511695602893848810159788613818575b5087613809575b876137f9575b50866137ea575b866137da575b50856137cb575b856137bb575b50846137ac575b8461379c575b508361378e575b508261377f575b5050156137775760c8905b60005260038652600b6040600020015493600a850294808604600a1490151715610caa57606481029080820460641490151715610caa5761376f9561376a946137659316930461481b565b6148a4565b61481b565b604051908152f35b60009061371a565b603c925051161115838861370f565b815183161015925089613708565b51603c908416111593508a613701565b935080838551161015936136fb565b51603c908516111594508b6136f4565b945081848651161015946136ee565b51603c908616111595508c6136e7565b955082858751161015956136e1565b51603c908716111596508d6136da565b965083868851161015966136d4565b603c101597508e6136cd565b9890886138348196959493614595565b9a919293949550506136b5565b9961384b90614595565b996136ab565b9961385b90614595565b996136a0565b9961386b90614595565b99613695565b9961387b90614595565b9961368a565b60019a5061367f565b909198816138988b85614d8e565b5111156138e0576138b3826138ad8c86614d8e565b516148a4565b905b81800291808304811490151715610caa576138d9916138d39161481b565b99614595565b9190613665565b6138f46138ed8b85614d8e565b51836148a4565b906138b5565b996139136139199161390c8d8b614d8e565b519061481b565b9a614595565b613650565b34610325576000366003190112610325576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346103255760603660031901126103255760243560043560443560058110156103255761398e6148ed565b81600052600360209080825260018060a01b036040600020541633148015613b01575b8015613aec575b6139c19061492e565b83600052600a82526139d7856040600020614970565b8360005280825260096040600020016139f08154614595565b90558360005280825260406000204282820155600a60098201540615613a52575b50916040917fae9f8ea4031d27c12e1fca7c2bfaaef9034ff66849251188e28970cd44d1c590938560005281526009836000200154908351928352820152a3005b60079093919301613a638154614595565b905583600052828252600760406000200154916000198301928311610caa577fae9f8ea4031d27c12e1fca7c2bfaaef9034ff66849251188e28970cd44d1c59093857f06bbb7cb56b5f3845ce5ad015d25cbf87ed1c37c635e2082acb2610598f15cc760408096836000528486526007826000200154825191825286820152a291935091613a11565b506139c1613afa33866156db565b90506139b8565b5060008051602061580183398151915260005260018252604060002033600052825260ff604060002054166139b1565b346103255760203660031901126103255760043560005260016020526020600160406000200154604051908152f35b34610325576040366003190112610325576001600160401b036024358181116103255736602382011215610325578060040135918211610325573660248383010111610325576020602491604093600435600052600c83528460002090808651958694018437820190815203019020815190613bdb82613f68565b60ff8154161515918281528360ff600260018501549485602086015201541691015282519182526020820152f35b34610325576020806003193601126103255760043560005260038152613c356006604060002001615548565b906040519181839283018184528251809152816040850193019160005b828110613c6157505050500390f35b83516001600160a01b031685528695509381019392810192600101613c52565b34610325576020366003190112610325576004356000526003602052610358610641611945600160406000200160405192838092613ed2565b34610325576040366003190112610325576102eb613cd6614090565b613cde6142db565b6004356155a0565b34610325576000366003190112610325576040516000600e54613d0881613e98565b808452906001908181169081156119b45750600114613d31576103588461194581860382614027565b600e600090815292507fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd5b828410613d7457505050810160200161194582611935565b80546020858701810191909152909301928101613d5c565b3461032557613d9a36613e54565b90600052600a6020526040600020805482101561032557602091611acd91613e6a565b34610325576020366003190112610325576004359063ffffffff60e01b8216809203610325576020916301ffc9a760e01b81149081908115613e43575b8215613e32575b8215613e10575b505015158152f35b637965db0b60e01b1491508115613e2a575b508380613e08565b905083613e22565b635b5e139f60e01b81149250613e01565b6380ac58cd60e01b81149250613dfa565b6040906003190112610325576004359060243590565b8054821015613e825760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c92168015613ec8575b6020831014613eb257565b634e487b7160e01b600052602260045260246000fd5b91607f1691613ea7565b9060009291805491613ee383613e98565b918282526001938481169081600014613f455750600114613f05575b50505050565b90919394506000526020928360002092846000945b838610613f31575050505001019038808080613eff565b805485870183015294019385908201613f1a565b9294505050602093945060ff191683830152151560051b01019038808080613eff565b606081019081106001600160401b0382111761152457604052565b60c081019081106001600160401b0382111761152457604052565b6101c081019081106001600160401b0382111761152457604052565b61010081019081106001600160401b0382111761152457604052565b608081019081106001600160401b0382111761152457604052565b602081019081106001600160401b0382111761152457604052565b604081019081106001600160401b0382111761152457604052565b90601f801991011681019081106001600160401b0382111761152457604052565b60005b83811061405b5750506000910152565b818101518382015260200161404b565b9060209161408481518092818552858086019101614048565b601f01601f1916010190565b602435906001600160a01b038216820361032557565b600435906001600160a01b038216820361032557565b908082519081815260208091019281808460051b8301019501936000915b8483106140ea5750505050505090565b9091929394958480614108600193601f198682030187528a5161406b565b98019301930191949392906140da565b909161412f61413d9360408452604084019061406b565b91602081840391015261406b565b90565b9181601f84011215610325578235916001600160401b038311610325576020808501948460051b01011161032557565b6001600160401b03811161152457601f01601f191660200190565b81601f82011215610325578035906141a282614170565b926141b06040519485614027565b8284526020838301011161032557816000926020809301838601378301015290565b6020906141ec928260405194838680955193849201614048565b82019081520301902090565b9060ff80835116825280602084015116602083015280604084015116604083015280606084015116606083015280608084015116608083015260a08301511660a082015260e08061425860c08501516101008060c087015285019061406b565b93015191015290565b6060600319820112610325576004356001600160a01b0381168103610325579160243591604435906001600160401b038211610325576142a391600401614140565b9091565b90815180825260208080930193019160005b8281106142c7575050505090565b8351855293810193928101926001016142b9565b3360009081527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d3769460205260409020546000805160206158018339815191529060ff16156143255750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527fb9cbbae02fe941283ec0eefd7b121e3bc7f89fae077b27bdd75a7fd4cf1543a860205260409020547f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9060ff16156143255750565b80600052600160205260406000203360005260205260ff60406000205416156143255750565b906000918083526001602052604083209160018060a01b03169182845260205260ff604084205416156000146144405780835260016020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b906000918083526001602052604083209160018060a01b03169182845260205260ff604084205416600014614440578083526001602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b156144c357565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b6001600160401b0381116115245760051b60200190565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e19823603018112156103255701602081359101916001600160401b03821161032557813603831361032557565b9061456d826144fa565b61457a6040519182614027565b828152809261458b601f19916144fa565b0190602036910137565b6000198114610caa5760010190565b8051821015613e825760209160051b010190565b604051906145c582613fd6565b60038252819060005b6060808210156145e85790602091828287010152016145ce565b5050909150565b8181106145fa575050565b600081556001016145ef565b9190601f811161461557505050565b614641926000526020600020906020601f840160051c83019310614643575b601f0160051c01906145ef565b565b9091508190614634565b91909182516001600160401b038111611524576146748161466e8454613e98565b84614606565b602080601f83116001146146b05750819293946000926146a5575b50508160011b916000199060031b1c1916179055565b01519050388061468f565b90601f198316958460005282600020926000905b8882106146fc575050836001959697106146e3575b505050811b019055565b015160001960f88460031b161c191690553880806146d9565b806001859682949686015181550195019301906146c4565b600160401b82116115245780549180825582811061473157505050565b600091825260209081832093840193015b83811061474f5750505050565b808361475d60019354613e98565b8061476b575b505001614742565b601f808211851461478257505081555b8338614763565b61479b90848452868420920160051c82018583016145ef565b8183555561477b565b600160401b8211611524578054918082558281106147c157505050565b60009182526020822092830192015b8281106147dc57505050565b8181556001016147d0565b90600160401b81116115245781549080835581811061480557505050565b61464192600052602060002091820191016145ef565b91908201809211610caa57565b3d15614853573d9061483982614170565b916148476040519384614027565b82523d6000602084013e565b606090565b1561485f57565b60405162461bcd60e51b815260206004820152601760248201527f5472656173757279207061796d656e74206661696c65640000000000000000006044820152606490fd5b91908203918211610caa57565b156148b857565b60405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606490fd5b60ff600254166148f957565b60405163d93c066560e01b8152600490fd5b60026000541461491c576002600055565b604051633ee5aeb560e01b8152600490fd5b1561493557565b60405162461bcd60e51b8152602060048201526013602482015272556e617574686f72697a65642061636365737360681b6044820152606490fd5b8054600160401b8110156115245761498d91600182018155613e6a565b819291549060031b91821b91600019901b1916179055565b906040516149b281613fba565b60e060028294805460ff908181168652818160081c166020870152818160101c166040870152818160181c166060870152818160201c16608087015260281c1660a0850152604051614a0b816106418160018601613ed2565b60c08501520154910152565b903590601e198136030182121561032557018035906001600160401b0382116103255760200191813603831361032557565b90815460ff908181168352818160081c166020840152818160101c166040840152818160181c166060840152818160201c16608084015260281c1660a082015260e06002614aa46101008060c0860152840160018601613ed2565b93015491015290565b60405190614aba82613fba565b8160e06000918281528260208201528260408201528260608201528260808201528260a0820152606060c08201520152565b15614af357565b60405162461bcd60e51b81526020600482015260146024820152731059d95b9d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b90815480825260208092019260005281600020916000905b828210614b55575050505090565b835485529384019360019384019390910190614b47565b919091600052600960205260406000209180158015614bf1575b614bdc57614b9381614563565b92614b9f8282546148a4565b60005b838110614baf5750505050565b80614bc6614bc0614bd7938561481b565b85613e6a565b90549060031b1c6112f682896145a4565b614ba2565b509061413d6106419160405192838092614b2f565b508254811015614b86565b919091600052600a60205260406000209180158015614c55575b614bdc57614c2381614563565b92614c2f8282546148a4565b60005b838110614c3f5750505050565b80614bc6614bc0614c50938561481b565b614c32565b508254811015614c16565b6000908152600360205260ff600a604083200154161561413d576008602052600260408220015490620151808201809211614c9b5750421190565b634e487b7160e01b81526011600452602490fd5b60405190614cbc8261400c565b600a8252696372656174697669747960b01b6020830152565b60405190614ce28261400c565b600a825269185b985b1e5d1a58d85b60b21b6020830152565b60405190614d088261400c565b6007825266656d706174687960c81b6020830152565b60405190614d2b8261400c565b600982526834b73a3ab4ba34b7b760b91b6020830152565b60405190614d508261400c565b600a825269726573696c69656e636560b01b6020830152565b60405190614d768261400c565b6009825268637572696f7369747960b81b6020830152565b906006811015613e825760051b0190565b15614da657565b60405162461bcd60e51b815260206004820152600e60248201526d496e76616c6964206368616e676560901b6044820152606490fd5b3560ff811681036103255790565b803560009080820b809103614f8b57614e1160091991828112159081614f78575b50614d9f565b602083013580830b809103614f87578082614e349212159081614f785750614d9f565b604083013580830b809103614f87578082614e579212159081614f785750614d9f565b606083013580830b809103614f87578082614e7a9212159081614f785750614d9f565b608083013580830b809103614f87578082614e9d9212159081614f785750614d9f565b60a08301359182810b809303614f84575090614ec2918112159081614f785750614d9f565b60e0810160ff614ed182614ddc565b1615159081614f60575b5015614f2a578060c0614eef920190614a17565b905015614ef857565b60405162461bcd60e51b815260206004820152600a602482015269115b5c1d1e481b5bdbd960b21b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081dd95a59da1d60921b6044820152606490fd5b60649150614f6f60ff91614ddc565b16111538614edb565b600a9150131538614e0b565b80fd5b8280fd5b5080fd5b60ff1690600090810b91818382019384129112908015821691151617614c9b57808212614fcf575b5060648113614fc7575b60ff1690565b506064614fc1565b905038614fb7565b604660ff6040928282858301511611808091615158575b156150245750505050516150018161400c565b6013815272656d70617468657469635f637265617469766560681b602082015290565b1561505057505050516150368161400c565b600a815269656d706174686574696360b01b602082015290565b828282511611600014615082575050505161506a8161400c565b6008815267637265617469766560c01b602082015290565b82826020830151161160001461509e575050505061413d614cd5565b8282606083015116116000146150d457505050516150bb8161400c565b6009815268696e7475697469766560b81b602082015290565b82826080830151161160001461510a57505050516150f18161400c565b60098152681c995cda5b1a595b9d60ba1b602082015290565b60a00151161115615136575161511f8161400c565b6007815266637572696f757360c81b602082015290565b516151408161400c565b600881526718985b185b98d95960c21b602082015290565b50603c8383511611614fee565b9092919260408094815161517881613f68565b6001815260209160ff600284840193428552828782019416948585526151ac61140960009d8e8d8152600c8b52208b6141d2565b5160018201550191511660ff1982541617905584875260038252600d83882001805490600160401b82101561529757906151eb91600182018155613e6a565b61528357947fd0ba61587fc16fc1a3274fc4cd4ecf1243baadf9d8dde73ab61d5a7af1474ff481979861523f877f4d4ca4452701c64d62e210aa5b23f7d376cf2d485ebc4fee8528e048afb0e2cf9961464d565b8486519160608352615254606084018a61406b565b90868385015283820391828a860152520190a261527a835194848695865285019061406b565b918301520390a2565b634e487b7160e01b88526004889052602488fd5b634e487b7160e01b89526041600452602489fd5b9190811015613e825760051b0190565b156152c257565b60405162461bcd60e51b815260206004820152601860248201527f4e6f74206167656e74206f776e6572206f722061646d696e00000000000000006044820152606490fd5b1561530e57565b60405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220746f207a65726f2061646472657373006044820152606490fd5b9080821461542b576153658154613e98565b906001600160401b03821161152457819061538a826153848654613e98565b86614606565b600090601f83116001146153c0576000926153b55750508160011b916000199060031b1c1916179055565b01549050388061468f565b81526020808220858352818320935090601f1985169083905b8282106154125750509084600195949392106153f957505050811b019055565b015460001960f88460031b161c191690553880806146d9565b84958192958501548155600180910196019401906153d9565b5050565b81811461542b578154916154438383614714565b6000526020600020906000526020600020906000905b8382106154665750505050565b8061547360019285615353565b928101929181019101615459565b81811461542b578154916001600160401b038311611524576154a383836147a4565b60005260206000209060005260206000208154916000925b8484106154c9575050505050565b60018091920193845492818501550192906154bb565b81811461542b578154916001600160401b0383116115245761550183836147e7565b60005260206000209060005260206000208154916000925b848410615527575050505050565b600191820180546001600160a01b0390921684860155939091019290615519565b9060405191828154918282526020928383019160005283600020936000905b82821061557d5750505061464192500383614027565b85546001600160a01b031684526001958601958895509381019390910190615567565b6001600160a01b0391821691821561563157600090828252600360205260066040832001805490600160401b82101561561d57816156069160017f32a4407627195670dd4c989ee38441e11ab643ccd4759c25d9c0bd6a635039db969594018155613e6a565b819291549060031b9187831b921b191617905580a3565b634e487b7160e01b84526041600452602484fd5b60405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f7420617574686f72697a65207a65726f20616464726573730000006044820152606490fd5b908154615682816144fa565b9260409361569285519182614027565b828152809460208092019260005281600020906000935b8585106156b857505050505050565b600184819284516156cd81610641818a613ed2565b8152019301940193916156a9565b60005260036020526156f36006604060002001615548565b9060005b8251811015615733576001600160a01b038061571383866145a4565b51169083161461572b5761572690614595565b6156f7565b505050600190565b505050600090565b80156157e257600081805b6157ce575061575481614170565b906157626040519283614027565b808252601f1961577182614170565b013660208401375b809280156157c7576000198201918211610caa578193600a926030908484068201809211610caa5785511115613e825760f81b6001600160f81b03191660001a908401601f01530491615779565b5050905090565b906157da600a91614595565b910480615746565b506040516157ef8161400c565b60018152600360fc1b60208201529056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122054a9ee63d993ef5c4f562e22bb7e05298d2cfc5069e5031095e0b65097b9535b64736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Implements ERC-7857 with comprehensive personality evolution system",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "AgentConversation(uint256,bytes32,uint8,uint256)": {
        "details": "Emitted when agent has a conversation (without personality evolution)"
      },
      "AuthorizedUsage(uint256,address)": {
        "details": "This emits when a user is authorized to use the data"
      },
      "Cloned(uint256,uint256,address,address)": {
        "details": "This emits when data is cloned"
      },
      "Minted(uint256,address,address,bytes32[],string[])": {
        "details": "This emits when a new functional NFT is minted"
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "PersonalityEvolved(uint256,bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,string,uint256),(int8,int8,int8,int8,int8,int8,string,uint8))": {
        "details": "Emitted when agent personality evolves from dream processing"
      },
      "PersonalityMilestone(uint256,string,uint8,string)": {
        "details": "Emitted when agent reaches personality milestones"
      },
      "PublishedSealedKey(address,uint256,bytes16[])": {
        "details": "This emits when a sealed key is published"
      },
      "ResponseStyleEvolved(uint256,string,string[])": {
        "details": "Emitted when agent's response style evolves"
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transferred(uint256,address,address)": {
        "details": "This emits when data is transferred with ownership"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "owner": "Address to check"
        },
        "returns": {
          "_0": "Number of agents owned"
        }
      },
      "calculatePersonalityRarity(uint256)": {
        "params": {
          "tokenId": "Agent to analyze"
        },
        "returns": {
          "rarityScore": "Rarity score based on trait distribution"
        }
      },
      "canProcessDreamToday(uint256)": {
        "params": {
          "tokenId": "Agent to check"
        },
        "returns": {
          "canProcess": "True if agent can process a dream today"
        }
      },
      "clone(address,uint256,bytes[])": {
        "params": {
          "to": "Address to clone agent for",
          "tokenId": "Agent to clone"
        },
        "returns": {
          "newTokenId": "The cloned agent token ID"
        }
      },
      "emergencyAuthorizeUser(uint256,address)": {
        "details": "Only ADMIN_ROLE can use this in emergencies",
        "params": {
          "tokenId": "Agent to authorize user for",
          "user": "User to authorize"
        }
      },
      "emergencyTransfer(uint256,address)": {
        "details": "Only ADMIN_ROLE can use this in emergencies",
        "params": {
          "to": "New owner",
          "tokenId": "Agent to transfer"
        }
      },
      "getAgentName(uint256)": {
        "params": {
          "tokenId": "Agent to query"
        },
        "returns": {
          "_0": "Agent name"
        }
      },
      "getConversationHistory(uint256,uint256)": {
        "params": {
          "limit": "Maximum number of conversations to return (0 = all)",
          "tokenId": "Agent to query"
        },
        "returns": {
          "conversationHashesArray": "Array of conversation storage hashes"
        }
      },
      "getCreationTime(uint256)": {
        "params": {
          "tokenId": "Agent to query"
        },
        "returns": {
          "_0": "Creation timestamp"
        }
      },
      "getDominantTraits(uint256)": {
        "params": {
          "tokenId": "Agent to analyze"
        },
        "returns": {
          "traits": "Array of dominant trait names",
          "values": "Array of corresponding trait values"
        }
      },
      "getDreamHistory(uint256,uint256)": {
        "params": {
          "limit": "Maximum number of dreams to return (0 = all)",
          "tokenId": "Agent to query"
        },
        "returns": {
          "dreamHashesArray": "Array of dream storage hashes"
        }
      },
      "getEvolutionStats(uint256)": {
        "params": {
          "tokenId": "Agent to analyze"
        },
        "returns": {
          "evolutionRate": "Rate of personality change",
          "lastEvolution": "Timestamp of last evolution",
          "totalEvolutions": "Number of personality changes"
        }
      },
      "getPersonalitySummaries(uint256[])": {
        "params": {
          "tokenIds": "Array of agent IDs"
        },
        "returns": {
          "summaries": "Array of personality summaries"
        }
      },
      "getPersonalityTraits(uint256)": {
        "params": {
          "tokenId": "Agent to query"
        },
        "returns": {
          "traits": "Current personality traits (neutral if not evolved yet)"
        }
      },
      "getResponseStyle(uint256)": {
        "params": {
          "tokenId": "Agent to analyze"
        },
        "returns": {
          "primaryTrait": "Most dominant trait influencing style",
          "style": "Response style description"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasMilestone(uint256,string)": {
        "params": {
          "milestone": "Milestone to check",
          "tokenId": "Agent to check"
        },
        "returns": {
          "achieved": "True if milestone has been achieved",
          "achievedAt": "Timestamp when milestone was achieved"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "mintAgent(bytes[],string[],string,address)": {
        "params": {
          "agentName": "User-given name for the agent",
          "descriptions": "Data type descriptions",
          "proofs": "Ownership proofs for initial data",
          "to": "Address to mint agent for"
        },
        "returns": {
          "tokenId": "The newly minted agent token ID"
        }
      },
      "pause()": {
        "details": "Only accounts with PAUSER_ROLE can pause"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "processDailyDream(uint256,bytes32,bytes32,(int8,int8,int8,int8,int8,int8,string,uint8))": {
        "params": {
          "dreamAnalysisHash": "0G Storage hash of AI analysis",
          "dreamHash": "0G Storage hash of encrypted dream data",
          "impact": "Personality changes from dream analysis (only used every 5th dream)",
          "tokenId": "Agent to evolve"
        }
      },
      "recordConversation(uint256,bytes32,uint8)": {
        "params": {
          "contextType": "Type of conversation for context building",
          "conversationHash": "0G Storage hash of conversation data",
          "tokenId": "Agent having conversation"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "Interface identifier"
        },
        "returns": {
          "_0": "True if supported"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "Token to get URI for"
        },
        "returns": {
          "_0": "Simplified metadata string"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "Total number of minted agents"
        }
      },
      "transfer(address,uint256,bytes[])": {
        "params": {
          "to": "New owner address",
          "tokenId": "Agent to transfer"
        }
      },
      "unpause()": {
        "details": "Only accounts with PAUSER_ROLE can unpause"
      }
    },
    "stateVariables": {
      "verifier": {
        "return": "The address of the verifier contract",
        "returns": {
          "_0": "The address of the verifier contract"
        }
      }
    },
    "title": "DreamAgentNFTv2 - Enhanced Personality Evolution iNFTs",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Get balance of owner"
      },
      "calculatePersonalityRarity(uint256)": {
        "notice": "Calculate personality rarity score"
      },
      "canProcessDreamToday(uint256)": {
        "notice": "Check if agent can process dream today (24h cooldown)"
      },
      "clone(address,uint256,bytes[])": {
        "notice": "Clone agent with personality preservation"
      },
      "emergencyAuthorizeUser(uint256,address)": {
        "notice": "Emergency admin function to authorize user"
      },
      "emergencyTransfer(uint256,address)": {
        "notice": "Emergency admin function to transfer agent"
      },
      "getAgentName(uint256)": {
        "notice": "Get agent's name"
      },
      "getConversationHistory(uint256,uint256)": {
        "notice": "Get agent's conversation history hashes"
      },
      "getCreationTime(uint256)": {
        "notice": "Get agent's creation timestamp"
      },
      "getDominantTraits(uint256)": {
        "notice": "Get agent's dominant personality traits (top 3)"
      },
      "getDreamHistory(uint256,uint256)": {
        "notice": "Get agent's dream history hashes"
      },
      "getEvolutionStats(uint256)": {
        "notice": "Get personality evolution statistics"
      },
      "getPersonalitySummaries(uint256[])": {
        "notice": "Get multiple agents' personality summaries"
      },
      "getPersonalityTraits(uint256)": {
        "notice": "Get agent's current personality traits"
      },
      "getResponseStyle(uint256)": {
        "notice": "Get agent's response style based on personality"
      },
      "hasMilestone(uint256,string)": {
        "notice": "Check if agent has reached specific personality milestone"
      },
      "mint(bytes[],string[],address)": {
        "notice": "Standard ERC-7857 mint function (use mintAgent instead)"
      },
      "mintAgent(bytes[],string[],string,address)": {
        "notice": "Mint new dream agent (starts as blank slate)"
      },
      "pause()": {
        "notice": "Pause contract operations"
      },
      "processDailyDream(uint256,bytes32,bytes32,(int8,int8,int8,int8,int8,int8,string,uint8))": {
        "notice": "Process daily dream and evolve agent personality (every 5th dream)"
      },
      "recordConversation(uint256,bytes32,uint8)": {
        "notice": "Record conversation without personality evolution"
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if contract supports interface"
      },
      "tokenURI(uint256)": {
        "notice": "Get simplified token URI for metadata"
      },
      "totalSupply()": {
        "notice": "Get total supply of agents"
      },
      "transfer(address,uint256,bytes[])": {
        "notice": "Transfer agent with personality preservation"
      },
      "unpause()": {
        "notice": "Unpause contract operations"
      },
      "verifier()": {
        "notice": "The verifier interface that this NFT uses"
      }
    },
    "notice": "Advanced dream agents that develop unique personalities based on user dreams",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 527,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 26,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 417,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 774,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "agents",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(DreamAgent)761_storage)"
      },
      {
        "astId": 778,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "nameExists",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 781,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 784,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "totalAgents",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 787,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "totalFeesCollected",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 792,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "agentPersonalities",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(PersonalityTraits)4292_storage)"
      },
      {
        "astId": 797,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "dreamHashes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 802,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "conversationHashes",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 807,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "dreamAnalysisHashes",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 814,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "milestones",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_struct(MilestoneData)769_storage))"
      },
      {
        "astId": 818,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "responseStyles",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 821,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "name",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 824,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "symbol",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(MilestoneData)769_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct DreamAgentNFTv2.MilestoneData)",
        "numberOfBytes": "32",
        "value": "t_struct(MilestoneData)769_storage"
      },
      "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_struct(MilestoneData)769_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(string => struct DreamAgentNFTv2.MilestoneData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(MilestoneData)769_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(DreamAgent)761_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DreamAgentNFTv2.DreamAgent)",
        "numberOfBytes": "32",
        "value": "t_struct(DreamAgent)761_storage"
      },
      "t_mapping(t_uint256,t_struct(PersonalityTraits)4292_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPersonalityEvolution.PersonalityTraits)",
        "numberOfBytes": "32",
        "value": "t_struct(PersonalityTraits)4292_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DreamAgent)761_storage": {
        "encoding": "inplace",
        "label": "struct DreamAgentNFTv2.DreamAgent",
        "members": [
          {
            "astId": 730,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 732,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "agentName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 734,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "createdAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 736,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 739,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "dataDescriptions",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 742,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "dataHashes",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 745,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "authorizedUsers",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 747,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "intelligenceLevel",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 749,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "dreamCount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 751,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "conversationCount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 753,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "personalityInitialized",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 755,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "totalEvolutions",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 757,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "lastEvolutionDate",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 760,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "achievedMilestones",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(MilestoneData)769_storage": {
        "encoding": "inplace",
        "label": "struct DreamAgentNFTv2.MilestoneData",
        "members": [
          {
            "astId": 764,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "achieved",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 766,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "achievedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 768,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "traitValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PersonalityTraits)4292_storage": {
        "encoding": "inplace",
        "label": "struct IPersonalityEvolution.PersonalityTraits",
        "members": [
          {
            "astId": 4277,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "creativity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4279,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "analytical",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4281,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "empathy",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4283,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "intuition",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4285,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "resilience",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4287,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "curiosity",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4289,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "dominantMood",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4291,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "lastDreamDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
{
  "address": "0x03688A310f947d395649387e7FFaAd4Ca256267f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "conversationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum IPersonalityEvolution.ContextType",
          "name": "contextType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversationCount",
          "type": "uint256"
        }
      ],
      "name": "AgentConversation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLevel",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLevel",
          "type": "uint256"
        }
      ],
      "name": "AgentEvolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "creativity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "analytical",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "empathy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "intuition",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "resilience",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "curiosity",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dominantMood",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastDreamDate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IPersonalityEvolution.PersonalityTraits",
          "name": "initialTraits",
          "type": "tuple"
        }
      ],
      "name": "AgentPersonalityInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "AuthorizedUsage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "Cloned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dreamHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "intelligenceLevel",
          "type": "uint256"
        }
      ],
      "name": "DreamProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "milestone",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "traitValue",
          "type": "uint8"
        }
      ],
      "name": "MilestoneUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "_dataHashes",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "_dataDescriptions",
          "type": "string[]"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dreamHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "creativity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "analytical",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "empathy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "intuition",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "resilience",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "curiosity",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dominantMood",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastDreamDate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IPersonalityEvolution.PersonalityTraits",
          "name": "newPersonality",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int8",
              "name": "creativityChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "analyticalChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "empathyChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "intuitionChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "resilienceChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "curiosityChange",
              "type": "int8"
            },
            {
              "internalType": "string",
              "name": "moodShift",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "evolutionWeight",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IPersonalityEvolution.PersonalityImpact",
          "name": "impact",
          "type": "tuple"
        }
      ],
      "name": "PersonalityEvolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "milestone",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "traitValue",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "traitName",
          "type": "string"
        }
      ],
      "name": "PersonalityMilestone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes16[]",
          "name": "_sealedKeys",
          "type": "bytes16[]"
        }
      ],
      "name": "PublishedSealedKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newStyle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "dominantTraits",
          "type": "string[]"
        }
      ],
      "name": "ResponseStyleEvolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldStyle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newStyle",
          "type": "string"
        }
      ],
      "name": "ResponseStyleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "Transferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_AGENTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agentPersonalities",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "creativity",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "analytical",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "empathy",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "intuition",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "resilience",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "curiosity",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "dominantMood",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "lastDreamDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agents",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intelligenceLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dreamCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "conversationCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "personalityInitialized",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalEvolutions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastEvolutionDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "authorizeUsage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "authorizedUsersOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "agentB",
          "type": "uint256"
        }
      ],
      "name": "calculateCompatibility",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "compatibilityScore",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "calculatePersonalityRarity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rarityScore",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "canProcessDreamToday",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canProcess",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "clonePublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "conversationHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dreamAnalysisHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dreamHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "traitName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "minValue",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "maxValue",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "findAgentsByTrait",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAgentName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getConversationHistory",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "conversationHashesArray",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCreationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDominantTraits",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "traits",
          "type": "string[]"
        },
        {
          "internalType": "uint8[]",
          "name": "values",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getDreamHistory",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "dreamHashesArray",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getEvolutionStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalEvolutions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "evolutionRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastEvolution",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "getPersonalitySummaries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "creativity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "analytical",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "empathy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "intuition",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "resilience",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "curiosity",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dominantMood",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastDreamDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPersonalityEvolution.PersonalityTraits[]",
          "name": "summaries",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPersonalityTraits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "creativity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "analytical",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "empathy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "intuition",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "resilience",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "curiosity",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dominantMood",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastDreamDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPersonalityEvolution.PersonalityTraits",
          "name": "traits",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getResponseStyle",
      "outputs": [
        {
          "internalType": "string",
          "name": "style",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "primaryTrait",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "traitName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getTraitEvolution",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "timestamps",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "values",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "milestone",
          "type": "string"
        }
      ],
      "name": "hasMilestone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "achieved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "achievedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "milestones",
      "outputs": [
        {
          "internalType": "bool",
          "name": "achieved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "achievedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "traitValue",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "proofs",
          "type": "bytes[]"
        },
        {
          "internalType": "string[]",
          "name": "descriptions",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "creativity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "analytical",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "empathy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "intuition",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "resilience",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "curiosity",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dominantMood",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastDreamDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPersonalityEvolution.PersonalityTraits",
          "name": "initialPersonality",
          "type": "tuple"
        }
      ],
      "name": "mintWithPersonality",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nameExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "dreamHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "dreamAnalysisHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "int8",
              "name": "creativityChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "analyticalChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "empathyChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "intuitionChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "resilienceChange",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "curiosityChange",
              "type": "int8"
            },
            {
              "internalType": "string",
              "name": "moodShift",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "evolutionWeight",
              "type": "uint8"
            }
          ],
          "internalType": "struct IPersonalityEvolution.PersonalityImpact",
          "name": "impact",
          "type": "tuple"
        }
      ],
      "name": "processDailyDream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "conversationHash",
          "type": "bytes32"
        },
        {
          "internalType": "enum IPersonalityEvolution.ContextType",
          "name": "contextType",
          "type": "uint8"
        }
      ],
      "name": "recordConversation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "responseStyles",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAgents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeesCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "traitHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "oldValue",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "newValue",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "dreamHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferPublic",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IERC7857DataVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x885ac1fc35f00aa93498057da9711ff8e717f096cbad98bbfa35593f2b33d04d",
  "receipt": {
    "to": null,
    "from": "0x232CA04565A7aAffff9b715D88562E48715e9185",
    "contractAddress": "0x03688A310f947d395649387e7FFaAd4Ca256267f",
    "transactionIndex": 31,
    "gasUsed": "5183892",
    "logsBloom": "0x
    "blockHash": "0x53d9be472ca371a3ad35fa5798bb14ec2f0479b29b1909c16b7a949d18eae01b",
    "transactionHash": "0x885ac1fc35f00aa93498057da9711ff8e717f096cbad98bbfa35593f2b33d04d",
    "logs": [],
    "blockNumber": 3379104,
    "cumulativeGasUsed": "11502972",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3a28de282Bb6e1D00939d83D4BBd715A72c1D863",
    "0x0f13e85B575964B8b4b77E37d43A6aE9E354e94C"
  ],
  "numDeployments": 1,
  "solcInputHash": "6e1cdc082e10b1e9788c0658b5731bc8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"conversationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IPersonalityEvolution.ContextType\",\"name\":\"contextType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversationCount\",\"type\":\"uint256\"}],\"name\":\"AgentConversation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLevel\",\"type\":\"uint256\"}],\"name\":\"AgentEvolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IPersonalityEvolution.PersonalityTraits\",\"name\":\"initialTraits\",\"type\":\"tuple\"}],\"name\":\"AgentPersonalityInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AuthorizedUsage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Cloned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dreamHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intelligenceLevel\",\"type\":\"uint256\"}],\"name\":\"DreamProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"milestone\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"traitValue\",\"type\":\"uint8\"}],\"name\":\"MilestoneUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"_dataHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_dataDescriptions\",\"type\":\"string[]\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dreamHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IPersonalityEvolution.PersonalityTraits\",\"name\":\"newPersonality\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"creativityChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"analyticalChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"empathyChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"intuitionChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"resilienceChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"curiosityChange\",\"type\":\"int8\"},{\"internalType\":\"string\",\"name\":\"moodShift\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"evolutionWeight\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IPersonalityEvolution.PersonalityImpact\",\"name\":\"impact\",\"type\":\"tuple\"}],\"name\":\"PersonalityEvolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"milestone\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"traitValue\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"traitName\",\"type\":\"string\"}],\"name\":\"PersonalityMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes16[]\",\"name\":\"_sealedKeys\",\"type\":\"bytes16[]\"}],\"name\":\"PublishedSealedKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newStyle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"dominantTraits\",\"type\":\"string[]\"}],\"name\":\"ResponseStyleEvolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldStyle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newStyle\",\"type\":\"string\"}],\"name\":\"ResponseStyleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_AGENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agentPersonalities\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intelligenceLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dreamCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversationCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"personalityInitialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalEvolutions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEvolutionDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"authorizeUsage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"authorizedUsersOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agentB\",\"type\":\"uint256\"}],\"name\":\"calculateCompatibility\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"compatibilityScore\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"calculatePersonalityRarity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rarityScore\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"canProcessDreamToday\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canProcess\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clonePublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conversationHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dreamAnalysisHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dreamHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"traitName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minValue\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxValue\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"findAgentsByTrait\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAgentName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getConversationHistory\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"conversationHashesArray\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDominantTraits\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"traits\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"values\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getDreamHistory\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dreamHashesArray\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEvolutionStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEvolutions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"evolutionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEvolution\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getPersonalitySummaries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"internalType\":\"struct IPersonalityEvolution.PersonalityTraits[]\",\"name\":\"summaries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPersonalityTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"internalType\":\"struct IPersonalityEvolution.PersonalityTraits\",\"name\":\"traits\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getResponseStyle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"style\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primaryTrait\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"traitName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getTraitEvolution\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"values\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"milestone\",\"type\":\"string\"}],\"name\":\"hasMilestone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"achieved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"achievedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"milestones\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"achieved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"achievedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"traitValue\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"proofs\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"descriptions\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"creativity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"analytical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"empathy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"intuition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resilience\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curiosity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dominantMood\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastDreamDate\",\"type\":\"uint256\"}],\"internalType\":\"struct IPersonalityEvolution.PersonalityTraits\",\"name\":\"initialPersonality\",\"type\":\"tuple\"}],\"name\":\"mintWithPersonality\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dreamHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dreamAnalysisHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"creativityChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"analyticalChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"empathyChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"intuitionChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"resilienceChange\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"curiosityChange\",\"type\":\"int8\"},{\"internalType\":\"string\",\"name\":\"moodShift\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"evolutionWeight\",\"type\":\"uint8\"}],\"internalType\":\"struct IPersonalityEvolution.PersonalityImpact\",\"name\":\"impact\",\"type\":\"tuple\"}],\"name\":\"processDailyDream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conversationHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum IPersonalityEvolution.ContextType\",\"name\":\"contextType\",\"type\":\"uint8\"}],\"name\":\"recordConversation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"responseStyles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAgents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traitHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"oldValue\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newValue\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"dreamHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferPublic\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IERC7857DataVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements ERC-7857 with comprehensive personality evolution system\",\"events\":{\"AgentConversation(uint256,bytes32,uint8,uint256)\":{\"details\":\"Emitted when agent has a conversation (without personality evolution)\"},\"AuthorizedUsage(uint256,address)\":{\"details\":\"This emits when a user is authorized to use the data\"},\"Cloned(uint256,uint256,address,address)\":{\"details\":\"This emits when data is cloned\"},\"Minted(uint256,address,address,bytes32[],string[])\":{\"details\":\"This emits when a new functional NFT is minted\"},\"PersonalityEvolved(uint256,bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,string,uint256),(int8,int8,int8,int8,int8,int8,string,uint8))\":{\"details\":\"Emitted when agent personality evolves from dream processing\"},\"PersonalityMilestone(uint256,string,uint8,string)\":{\"details\":\"Emitted when agent reaches personality milestones\"},\"PublishedSealedKey(address,uint256,bytes16[])\":{\"details\":\"This emits when a sealed key is published\"},\"ResponseStyleEvolved(uint256,string,string[])\":{\"details\":\"Emitted when agent's response style evolves\"},\"Transferred(uint256,address,address)\":{\"details\":\"This emits when data is transferred with ownership\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"owner\":\"Address to check\"},\"returns\":{\"_0\":\"Number of agents owned\"}},\"calculateCompatibility(uint256,uint256)\":{\"params\":{\"agentA\":\"First agent\",\"agentB\":\"Second agent\"},\"returns\":{\"compatibilityScore\":\"Compatibility score (0-100)\"}},\"calculatePersonalityRarity(uint256)\":{\"params\":{\"tokenId\":\"Agent to analyze\"},\"returns\":{\"rarityScore\":\"Rarity score based on trait distribution\"}},\"canProcessDreamToday(uint256)\":{\"params\":{\"tokenId\":\"Agent to check\"},\"returns\":{\"canProcess\":\"True if agent can process a dream today\"}},\"clone(address,uint256,bytes[])\":{\"params\":{\"to\":\"Address to clone agent for\",\"tokenId\":\"Agent to clone\"},\"returns\":{\"newTokenId\":\"The cloned agent token ID\"}},\"findAgentsByTrait(string,uint8,uint8,uint256,uint256)\":{\"params\":{\"limit\":\"Maximum results to return\",\"maxValue\":\"Maximum trait value (inclusive)\",\"minValue\":\"Minimum trait value (inclusive)\",\"offset\":\"Pagination offset\",\"traitName\":\"Trait to filter by\"},\"returns\":{\"tokenIds\":\"Array of matching agent IDs\"}},\"getAgentName(uint256)\":{\"params\":{\"tokenId\":\"Agent to query\"},\"returns\":{\"_0\":\"Agent name\"}},\"getConversationHistory(uint256,uint256)\":{\"params\":{\"limit\":\"Maximum number of conversations to return (0 = all)\",\"tokenId\":\"Agent to query\"},\"returns\":{\"conversationHashesArray\":\"Array of conversation storage hashes\"}},\"getCreationTime(uint256)\":{\"params\":{\"tokenId\":\"Agent to query\"},\"returns\":{\"_0\":\"Creation timestamp\"}},\"getDominantTraits(uint256)\":{\"params\":{\"tokenId\":\"Agent to analyze\"},\"returns\":{\"traits\":\"Array of dominant trait names\",\"values\":\"Array of corresponding trait values\"}},\"getDreamHistory(uint256,uint256)\":{\"params\":{\"limit\":\"Maximum number of dreams to return (0 = all)\",\"tokenId\":\"Agent to query\"},\"returns\":{\"dreamHashesArray\":\"Array of dream storage hashes\"}},\"getEvolutionStats(uint256)\":{\"params\":{\"tokenId\":\"Agent to analyze\"},\"returns\":{\"evolutionRate\":\"Rate of personality change\",\"lastEvolution\":\"Timestamp of last evolution\",\"totalEvolutions\":\"Number of personality changes\"}},\"getPersonalitySummaries(uint256[])\":{\"params\":{\"tokenIds\":\"Array of agent IDs\"},\"returns\":{\"summaries\":\"Array of personality summaries\"}},\"getPersonalityTraits(uint256)\":{\"params\":{\"tokenId\":\"Agent to query\"},\"returns\":{\"traits\":\"Current personality traits\"}},\"getResponseStyle(uint256)\":{\"params\":{\"tokenId\":\"Agent to analyze\"},\"returns\":{\"primaryTrait\":\"Most dominant trait influencing style\",\"style\":\"Response style description\"}},\"getTraitEvolution(uint256,string,uint256)\":{\"params\":{\"limit\":\"Maximum history entries (0 = all)\",\"tokenId\":\"Agent to analyze\",\"traitName\":\"Trait to track\"},\"returns\":{\"timestamps\":\"Array of evolution timestamps\",\"values\":\"Array of trait values at each timestamp\"}},\"hasMilestone(uint256,string)\":{\"params\":{\"milestone\":\"Milestone to check\",\"tokenId\":\"Agent to check\"},\"returns\":{\"achieved\":\"True if milestone has been achieved\",\"achievedAt\":\"Timestamp when milestone was achieved\"}},\"mintWithPersonality(bytes[],string[],string,address,(uint8,uint8,uint8,uint8,uint8,uint8,string,uint256))\":{\"params\":{\"agentName\":\"User-given name for the agent\",\"descriptions\":\"Data type descriptions\",\"initialPersonality\":\"Starting personality traits\",\"proofs\":\"Ownership proofs for initial data\",\"to\":\"Address to mint agent for\"},\"returns\":{\"tokenId\":\"The newly minted agent token ID\"}},\"processDailyDream(uint256,bytes32,bytes32,(int8,int8,int8,int8,int8,int8,string,uint8))\":{\"params\":{\"dreamAnalysisHash\":\"0G Storage hash of AI analysis\",\"dreamHash\":\"0G Storage hash of encrypted dream data\",\"impact\":\"Personality changes from dream analysis\",\"tokenId\":\"Agent to evolve\"}},\"recordConversation(uint256,bytes32,uint8)\":{\"params\":{\"contextType\":\"Type of conversation for context building\",\"conversationHash\":\"0G Storage hash of conversation data\",\"tokenId\":\"Agent having conversation\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface identifier\"},\"returns\":{\"_0\":\"True if supported\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"Token to get URI for\"},\"returns\":{\"_0\":\"Simplified metadata string\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"Total number of minted agents\"}},\"transfer(address,uint256,bytes[])\":{\"params\":{\"to\":\"New owner address\",\"tokenId\":\"Agent to transfer\"}}},\"stateVariables\":{\"verifier\":{\"return\":\"The address of the verifier contract\",\"returns\":{\"_0\":\"The address of the verifier contract\"}}},\"title\":\"DreamAgentNFTv2 - Enhanced Personality Evolution iNFTs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Get balance of owner\"},\"calculateCompatibility(uint256,uint256)\":{\"notice\":\"Calculate compatibility between two agents\"},\"calculatePersonalityRarity(uint256)\":{\"notice\":\"Calculate personality rarity score\"},\"canProcessDreamToday(uint256)\":{\"notice\":\"Check if agent can process dream today (24h cooldown)\"},\"clone(address,uint256,bytes[])\":{\"notice\":\"Clone agent with personality preservation\"},\"findAgentsByTrait(string,uint8,uint8,uint256,uint256)\":{\"notice\":\"Find agents with specific trait ranges\"},\"getAgentName(uint256)\":{\"notice\":\"Get agent's name\"},\"getConversationHistory(uint256,uint256)\":{\"notice\":\"Get agent's conversation history hashes\"},\"getCreationTime(uint256)\":{\"notice\":\"Get agent's creation timestamp\"},\"getDominantTraits(uint256)\":{\"notice\":\"Get agent's dominant personality traits (top 3)\"},\"getDreamHistory(uint256,uint256)\":{\"notice\":\"Get agent's dream history hashes\"},\"getEvolutionStats(uint256)\":{\"notice\":\"Get personality evolution statistics\"},\"getPersonalitySummaries(uint256[])\":{\"notice\":\"Get multiple agents' personality summaries\"},\"getPersonalityTraits(uint256)\":{\"notice\":\"Get agent's current personality traits\"},\"getResponseStyle(uint256)\":{\"notice\":\"Get agent's response style based on personality\"},\"getTraitEvolution(uint256,string,uint256)\":{\"notice\":\"Get trait evolution history\"},\"hasMilestone(uint256,string)\":{\"notice\":\"Check if agent has reached specific personality milestone\"},\"mintWithPersonality(bytes[],string[],string,address,(uint8,uint8,uint8,uint8,uint8,uint8,string,uint256))\":{\"notice\":\"Mint new dream agent with initial personality\"},\"processDailyDream(uint256,bytes32,bytes32,(int8,int8,int8,int8,int8,int8,string,uint8))\":{\"notice\":\"Process daily dream and evolve agent personality\"},\"recordConversation(uint256,bytes32,uint8)\":{\"notice\":\"Record conversation without personality evolution\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if contract supports interface\"},\"tokenURI(uint256)\":{\"notice\":\"Get simplified token URI for metadata\"},\"totalSupply()\":{\"notice\":\"Get total supply of agents\"},\"transfer(address,uint256,bytes[])\":{\"notice\":\"Transfer agent with personality preservation\"},\"verifier()\":{\"notice\":\"The verifier interface that this NFT uses\"}},\"notice\":\"Advanced dream agents that develop unique personalities based on user dreams\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DreamAgentNFTv2.sol\":\"DreamAgentNFTv2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/DreamAgentNFTv2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IERC7857.sol\\\";\\nimport \\\"./interfaces/IERC7857DataVerifier.sol\\\";\\nimport \\\"./interfaces/IPersonalityEvolution.sol\\\";\\n\\n/// @title DreamAgentNFTv2 - Enhanced Personality Evolution iNFTs\\n/// @notice Advanced dream agents that develop unique personalities based on user dreams\\n/// @dev Implements ERC-7857 with comprehensive personality evolution system\\ncontract DreamAgentNFTv2 is IERC7857, IPersonalityEvolution {\\n    \\n    // Data types for dream agents (from v1)\\n    string constant DREAM_PATTERNS = \\\"dream_patterns\\\";\\n    string constant EMOTIONAL_PROFILE = \\\"emotional_profile\\\";\\n    string constant AGENT_INTELLIGENCE = \\\"agent_intelligence\\\";\\n    string constant PERSONALITY_DATA = \\\"personality_data\\\";\\n    \\n    // Maximum supply for testnet\\n    uint256 public constant MAX_AGENTS = 1000;\\n    \\n    // Minting fee: 0.1 OG\\n    uint256 public constant MINTING_FEE = 0.1 ether;\\n    \\n    // Treasury address for collecting fees\\n    address public immutable treasury;\\n    \\n    /// @notice Enhanced Dream Agent structure with personality system\\n    struct DreamAgent {\\n        address owner;\\n        string agentName;\\n        uint256 createdAt;\\n        uint256 lastUpdated;\\n        string[] dataDescriptions;\\n        bytes32[] dataHashes;\\n        address[] authorizedUsers;\\n        uint256 intelligenceLevel;\\n        uint256 dreamCount;\\n        uint256 conversationCount;\\n        \\n        // New personality fields\\n        bool personalityInitialized;  // Whether personality traits are set\\n        uint256 totalEvolutions;      // Total personality changes\\n        uint256 lastEvolutionDate;    // When personality last evolved\\n        string[] achievedMilestones;  // Personality milestones reached\\n    }\\n    \\n    /// @notice Personality milestone tracking\\n    struct MilestoneData {\\n        bool achieved;\\n        uint256 achievedAt;\\n        uint8 traitValue;\\n    }\\n    \\n    /// @notice Trait evolution history entry\\n    struct TraitEvolution {\\n        uint256 timestamp;\\n        uint8 oldValue;\\n        uint8 newValue;\\n        bytes32 dreamHash;  // Dream that caused the change\\n    }\\n    \\n    // Contract state\\n    mapping(uint256 => DreamAgent) public agents;\\n    mapping(string => bool) public nameExists;\\n    uint256 public nextTokenId = 1;\\n    uint256 public totalAgents = 0;\\n    uint256 public totalFeesCollected = 0;\\n    \\n    // Personality system state\\n    mapping(uint256 => PersonalityTraits) public agentPersonalities;\\n    mapping(uint256 => bytes32[]) public dreamHashes;\\n    mapping(uint256 => bytes32[]) public conversationHashes;\\n    mapping(uint256 => bytes32[]) public dreamAnalysisHashes;\\n    \\n    // Milestone tracking\\n    mapping(uint256 => mapping(string => MilestoneData)) public milestones;\\n    \\n    // Trait evolution history\\n    mapping(uint256 => mapping(string => TraitEvolution[])) public traitHistory;\\n    \\n    // Response style mappings\\n    mapping(uint256 => string) public responseStyles;\\n    \\n    // Contract metadata\\n    string public name = \\\"Dreamscape AI Agents v2\\\";\\n    string public symbol = \\\"DREAMv2\\\";\\n    \\n    // Verifier for proof validation\\n    IERC7857DataVerifier public immutable verifier;\\n    \\n    // Enhanced events from IPersonalityEvolution (already defined there)\\n    \\n    // Additional v2-specific events\\n    event AgentPersonalityInitialized(uint256 indexed tokenId, PersonalityTraits initialTraits);\\n    event MilestoneUnlocked(uint256 indexed tokenId, string milestone, uint8 traitValue);\\n    event ResponseStyleUpdated(uint256 indexed tokenId, string oldStyle, string newStyle);\\n    \\n    // Unique contract event (not in IERC7857)\\n    event FeePaid(uint256 indexed tokenId, address indexed payer, uint256 amount);\\n    // Evolution events\\n    event AgentEvolved(uint256 indexed tokenId, uint256 oldLevel, uint256 newLevel);\\n    event DreamProcessed(uint256 indexed tokenId, bytes32 dreamHash, uint256 intelligenceLevel);\\n    \\n    constructor(address _verifier, address _treasury) {\\n        require(_verifier != address(0), \\\"Verifier cannot be zero address\\\");\\n        require(_treasury != address(0), \\\"Treasury cannot be zero address\\\");\\n        verifier = IERC7857DataVerifier(_verifier);\\n        treasury = _treasury;\\n    }\\n    \\n    /// @notice Mint new dream agent with initial personality\\n    /// @param proofs Ownership proofs for initial data\\n    /// @param descriptions Data type descriptions\\n    /// @param agentName User-given name for the agent\\n    /// @param to Address to mint agent for\\n    /// @param initialPersonality Starting personality traits\\n    /// @return tokenId The newly minted agent token ID\\n    function mintWithPersonality(\\n        bytes[] calldata proofs,\\n        string[] calldata descriptions,\\n        string memory agentName,\\n        address to,\\n        PersonalityTraits calldata initialPersonality\\n    ) external payable returns (uint256 tokenId) {\\n        require(to != address(0), \\\"Invalid address\\\");\\n        require(descriptions.length == proofs.length, \\\"Length mismatch\\\");\\n        require(totalAgents < MAX_AGENTS, \\\"Max limit reached\\\");\\n        require(bytes(agentName).length > 0 && bytes(agentName).length <= 32, \\\"Invalid name\\\");\\n        require(!nameExists[agentName], \\\"Name exists\\\");\\n        require(msg.value >= MINTING_FEE, \\\"Insufficient payment\\\");\\n        \\n        // Validate initial personality traits\\n        _validatePersonalityTraits(initialPersonality);\\n        \\n        // Verify proofs\\n        PreimageProofOutput[] memory proofOutputs = verifier.verifyPreimage(proofs);\\n        bytes32[] memory dataHashes = new bytes32[](proofOutputs.length);\\n        \\n        for (uint256 i = 0; i < proofOutputs.length; i++) {\\n            require(proofOutputs[i].isValid, \\\"Invalid proof\\\");\\n            dataHashes[i] = proofOutputs[i].dataHash;\\n        }\\n        \\n        // Reserve the name\\n        nameExists[agentName] = true;\\n        \\n        // Create new agent\\n        tokenId = nextTokenId++;\\n        agents[tokenId] = DreamAgent({\\n            owner: to,\\n            agentName: agentName,\\n            createdAt: block.timestamp,\\n            lastUpdated: block.timestamp,\\n            dataDescriptions: descriptions,\\n            dataHashes: dataHashes,\\n            authorizedUsers: new address[](0),\\n            intelligenceLevel: 1,\\n            dreamCount: 0,\\n            conversationCount: 0,\\n            personalityInitialized: true,\\n            totalEvolutions: 0,\\n            lastEvolutionDate: block.timestamp,\\n            achievedMilestones: new string[](0)\\n        });\\n        \\n        // Initialize personality\\n        agentPersonalities[tokenId] = initialPersonality;\\n        agentPersonalities[tokenId].lastDreamDate = 0; // Allow immediate first dream\\n        \\n        // Set initial response style\\n        responseStyles[tokenId] = _determineResponseStyle(initialPersonality);\\n        \\n        totalAgents++;\\n        totalFeesCollected += MINTING_FEE;\\n        \\n        // Transfer minting fee to treasury\\n        (bool success, ) = treasury.call{value: MINTING_FEE}(\\\"\\\");\\n        require(success, \\\"Treasury payment failed\\\");\\n        \\n        // Refund excess payment\\n        if (msg.value > MINTING_FEE) {\\n            (bool refundSuccess, ) = msg.sender.call{value: msg.value - MINTING_FEE}(\\\"\\\");\\n            require(refundSuccess, \\\"Refund failed\\\");\\n        }\\n        \\n        // Emit standard ERC-7857 Minted event defined in interface\\n        emit Minted(tokenId, msg.sender, to, dataHashes, descriptions);\\n        emit AgentPersonalityInitialized(tokenId, initialPersonality);\\n        emit FeePaid(tokenId, msg.sender, MINTING_FEE);\\n        \\n        return tokenId;\\n    }\\n    \\n    /// @notice Process daily dream and evolve agent personality\\n    /// @param tokenId Agent to evolve\\n    /// @param dreamHash 0G Storage hash of encrypted dream data\\n    /// @param dreamAnalysisHash 0G Storage hash of AI analysis\\n    /// @param impact Personality changes from dream analysis\\n    function processDailyDream(\\n        uint256 tokenId,\\n        bytes32 dreamHash,\\n        bytes32 dreamAnalysisHash,\\n        PersonalityImpact calldata impact\\n    ) external override {\\n        require(agents[tokenId].owner == msg.sender, \\\"Not agent owner\\\");\\n        require(agents[tokenId].personalityInitialized, \\\"Personality not initialized\\\");\\n        require(canProcessDreamToday(tokenId), \\\"Daily dream already processed\\\");\\n        \\n        // Validate impact values\\n        _validatePersonalityImpact(impact);\\n        \\n        // Store dream and analysis hashes\\n        dreamHashes[tokenId].push(dreamHash);\\n        dreamAnalysisHashes[tokenId].push(dreamAnalysisHash);\\n        \\n        // Apply personality evolution\\n        PersonalityTraits storage personality = agentPersonalities[tokenId];\\n        PersonalityTraits memory oldPersonality = personality;\\n        \\n        // Update traits with bounds checking and history tracking\\n        personality.creativity = _updateTraitWithHistory(tokenId, \\\"creativity\\\", personality.creativity, impact.creativityChange, dreamHash);\\n        personality.analytical = _updateTraitWithHistory(tokenId, \\\"analytical\\\", personality.analytical, impact.analyticalChange, dreamHash);\\n        personality.empathy = _updateTraitWithHistory(tokenId, \\\"empathy\\\", personality.empathy, impact.empathyChange, dreamHash);\\n        personality.intuition = _updateTraitWithHistory(tokenId, \\\"intuition\\\", personality.intuition, impact.intuitionChange, dreamHash);\\n        personality.resilience = _updateTraitWithHistory(tokenId, \\\"resilience\\\", personality.resilience, impact.resilienceChange, dreamHash);\\n        personality.curiosity = _updateTraitWithHistory(tokenId, \\\"curiosity\\\", personality.curiosity, impact.curiosityChange, dreamHash);\\n        \\n        // Update mood and timestamp\\n        personality.dominantMood = impact.moodShift;\\n        personality.lastDreamDate = block.timestamp;\\n        \\n        // Update agent metadata\\n        agents[tokenId].dreamCount++;\\n        agents[tokenId].totalEvolutions++;\\n        agents[tokenId].lastEvolutionDate = block.timestamp;\\n        agents[tokenId].lastUpdated = block.timestamp;\\n        \\n        // Intelligence evolution (every 3 dreams)\\n        if (agents[tokenId].dreamCount % 3 == 0) {\\n            agents[tokenId].intelligenceLevel++;\\n            emit AgentEvolved(tokenId, agents[tokenId].intelligenceLevel - 1, agents[tokenId].intelligenceLevel);\\n        }\\n        \\n        // Check for personality milestones\\n        _checkPersonalityMilestones(tokenId, oldPersonality, personality);\\n        \\n        // Update response style if needed\\n        string memory newStyle = _determineResponseStyle(personality);\\n        if (keccak256(bytes(responseStyles[tokenId])) != keccak256(bytes(newStyle))) {\\n            string memory oldStyle = responseStyles[tokenId];\\n            responseStyles[tokenId] = newStyle;\\n            emit ResponseStyleUpdated(tokenId, oldStyle, newStyle);\\n            \\n            // Emit response style evolution\\n            string[] memory dominantTraits = _getDominantTraitNames(tokenId);\\n            emit ResponseStyleEvolved(tokenId, newStyle, dominantTraits);\\n        }\\n        \\n        emit PersonalityEvolved(tokenId, dreamHash, personality, impact);\\n        emit DreamProcessed(tokenId, dreamHash, agents[tokenId].intelligenceLevel);\\n    }\\n    \\n    /// @notice Record conversation without personality evolution\\n    /// @param tokenId Agent having conversation\\n    /// @param conversationHash 0G Storage hash of conversation data\\n    /// @param contextType Type of conversation for context building\\n    function recordConversation(\\n        uint256 tokenId,\\n        bytes32 conversationHash,\\n        ContextType contextType\\n    ) external override {\\n        require(agents[tokenId].owner == msg.sender, \\\"Not agent owner\\\");\\n        require(agents[tokenId].personalityInitialized, \\\"Personality not initialized\\\");\\n        \\n        // Store conversation hash\\n        conversationHashes[tokenId].push(conversationHash);\\n        agents[tokenId].conversationCount++;\\n        agents[tokenId].lastUpdated = block.timestamp;\\n        \\n        // Small intelligence boost from conversations (1 point every 10 conversations)\\n        if (agents[tokenId].conversationCount % 10 == 0) {\\n            agents[tokenId].intelligenceLevel++;\\n            emit AgentEvolved(tokenId, agents[tokenId].intelligenceLevel - 1, agents[tokenId].intelligenceLevel);\\n        }\\n        \\n        emit AgentConversation(tokenId, conversationHash, contextType, agents[tokenId].conversationCount);\\n    }\\n    \\n    /// @notice Get agent's current personality traits\\n    /// @param tokenId Agent to query\\n    /// @return traits Current personality traits\\n    function getPersonalityTraits(uint256 tokenId) \\n        external view override returns (PersonalityTraits memory traits) {\\n        require(agents[tokenId].personalityInitialized, \\\"Personality not initialized\\\");\\n        return agentPersonalities[tokenId];\\n    }\\n    \\n    /// @notice Get agent's dream history hashes\\n    /// @param tokenId Agent to query\\n    /// @param limit Maximum number of dreams to return (0 = all)\\n    /// @return dreamHashesArray Array of dream storage hashes\\n    function getDreamHistory(uint256 tokenId, uint256 limit) \\n        external view override returns (bytes32[] memory dreamHashesArray) {\\n        bytes32[] storage allDreams = dreamHashes[tokenId];\\n        \\n        if (limit == 0 || limit >= allDreams.length) {\\n            return allDreams;\\n        }\\n        \\n        // Return most recent dreams\\n        dreamHashesArray = new bytes32[](limit);\\n        uint256 startIndex = allDreams.length - limit;\\n        for (uint256 i = 0; i < limit; i++) {\\n            dreamHashesArray[i] = allDreams[startIndex + i];\\n        }\\n    }\\n    \\n    /// @notice Get agent's conversation history hashes\\n    /// @param tokenId Agent to query\\n    /// @param limit Maximum number of conversations to return (0 = all)\\n    /// @return conversationHashesArray Array of conversation storage hashes\\n    function getConversationHistory(uint256 tokenId, uint256 limit) \\n        external view override returns (bytes32[] memory conversationHashesArray) {\\n        bytes32[] storage allConversations = conversationHashes[tokenId];\\n        \\n        if (limit == 0 || limit >= allConversations.length) {\\n            return allConversations;\\n        }\\n        \\n        // Return most recent conversations\\n        conversationHashesArray = new bytes32[](limit);\\n        uint256 startIndex = allConversations.length - limit;\\n        for (uint256 i = 0; i < limit; i++) {\\n            conversationHashesArray[i] = allConversations[startIndex + i];\\n        }\\n    }\\n    \\n    /// @notice Check if agent can process dream today (24h cooldown)\\n    /// @param tokenId Agent to check\\n    /// @return canProcess True if agent can process a dream today\\n    function canProcessDreamToday(uint256 tokenId) \\n        public view override returns (bool canProcess) {\\n        if (!agents[tokenId].personalityInitialized) return false;\\n        return block.timestamp > agentPersonalities[tokenId].lastDreamDate + 1 days;\\n    }\\n    \\n    /// @notice Calculate personality rarity score\\n    /// @param tokenId Agent to analyze\\n    /// @return rarityScore Rarity score based on trait distribution\\n    function calculatePersonalityRarity(uint256 tokenId) \\n        external view override returns (uint256 rarityScore) {\\n        require(agents[tokenId].personalityInitialized, \\\"Personality not initialized\\\");\\n        \\n        PersonalityTraits memory traits = agentPersonalities[tokenId];\\n        \\n        // Base rarity from trait variance\\n        uint256 traitVariance = _calculateTraitVariance(traits);\\n        \\n        // Bonus for dominant traits (>80)\\n        uint256 dominantTraits = _countDominantTraits(traits);\\n        \\n        // Penalty for balanced personalities (all traits 40-60)\\n        uint256 balancePenalty = _calculateBalancePenalty(traits);\\n        \\n        // Evolution bonus\\n        uint256 evolutionBonus = agents[tokenId].totalEvolutions * 10;\\n        \\n        rarityScore = traitVariance + dominantTraits * 100 - balancePenalty + evolutionBonus;\\n    }\\n    \\n    /// @notice Get agent's dominant personality traits (top 3)\\n    /// @param tokenId Agent to analyze\\n    /// @return traits Array of dominant trait names\\n    /// @return values Array of corresponding trait values\\n    function getDominantTraits(uint256 tokenId) \\n        external view override returns (string[] memory traits, uint8[] memory values) {\\n        require(agents[tokenId].personalityInitialized, \\\"Personality not initialized\\\");\\n        \\n        PersonalityTraits memory personality = agentPersonalities[tokenId];\\n        \\n        // Create arrays for sorting\\n        string[6] memory allTraits = [\\\"creativity\\\", \\\"analytical\\\", \\\"empathy\\\", \\\"intuition\\\", \\\"resilience\\\", \\\"curiosity\\\"];\\n        uint8[6] memory allValues = [\\n            personality.creativity,\\n            personality.analytical,\\n            personality.empathy,\\n            personality.intuition,\\n            personality.resilience,\\n            personality.curiosity\\n        ];\\n        \\n        // Sort and get top 3\\n        traits = new string[](3);\\n        values = new uint8[](3);\\n        \\n        for (uint256 i = 0; i < 3; i++) {\\n            uint256 maxIndex = 0;\\n            for (uint256 j = 1; j < 6; j++) {\\n                if (allValues[j] > allValues[maxIndex]) {\\n                    maxIndex = j;\\n                }\\n            }\\n            traits[i] = allTraits[maxIndex];\\n            values[i] = allValues[maxIndex];\\n            allValues[maxIndex] = 0; // Remove from next iteration\\n        }\\n    }\\n    \\n    /// @notice Get agent's response style based on personality\\n    /// @param tokenId Agent to analyze\\n    /// @return style Response style description\\n    /// @return primaryTrait Most dominant trait influencing style\\n    function getResponseStyle(uint256 tokenId) \\n        external view override returns (string memory style, string memory primaryTrait) {\\n        require(agents[tokenId].personalityInitialized, \\\"Personality not initialized\\\");\\n        \\n        style = responseStyles[tokenId];\\n        PersonalityTraits memory personality = agentPersonalities[tokenId];\\n        \\n        // Find primary trait\\n        uint8 maxValue = 0;\\n        if (personality.creativity > maxValue) {\\n            maxValue = personality.creativity;\\n            primaryTrait = \\\"creativity\\\";\\n        }\\n        if (personality.analytical > maxValue) {\\n            maxValue = personality.analytical;\\n            primaryTrait = \\\"analytical\\\";\\n        }\\n        if (personality.empathy > maxValue) {\\n            maxValue = personality.empathy;\\n            primaryTrait = \\\"empathy\\\";\\n        }\\n        if (personality.intuition > maxValue) {\\n            maxValue = personality.intuition;\\n            primaryTrait = \\\"intuition\\\";\\n        }\\n        if (personality.resilience > maxValue) {\\n            maxValue = personality.resilience;\\n            primaryTrait = \\\"resilience\\\";\\n        }\\n        if (personality.curiosity > maxValue) {\\n            primaryTrait = \\\"curiosity\\\";\\n        }\\n    }\\n    \\n    /// @notice Calculate compatibility between two agents\\n    /// @param agentA First agent\\n    /// @param agentB Second agent\\n    /// @return compatibilityScore Compatibility score (0-100)\\n    function calculateCompatibility(uint256 agentA, uint256 agentB) \\n        external view override returns (uint256 compatibilityScore) {\\n        require(agents[agentA].personalityInitialized && agents[agentB].personalityInitialized, \\\"Personalities not initialized\\\");\\n        \\n        PersonalityTraits memory traitsA = agentPersonalities[agentA];\\n        PersonalityTraits memory traitsB = agentPersonalities[agentB];\\n        \\n        // Calculate trait similarities (inverted differences)\\n        uint256 creativityCompat = 100 - _absDiff(traitsA.creativity, traitsB.creativity);\\n        uint256 analyticalCompat = 100 - _absDiff(traitsA.analytical, traitsB.analytical);\\n        uint256 empathyCompat = 100 - _absDiff(traitsA.empathy, traitsB.empathy);\\n        uint256 intuitionCompat = 100 - _absDiff(traitsA.intuition, traitsB.intuition);\\n        uint256 resilienceCompat = 100 - _absDiff(traitsA.resilience, traitsB.resilience);\\n        uint256 curiosityCompat = 100 - _absDiff(traitsA.curiosity, traitsB.curiosity);\\n        \\n        // Weighted average (empathy and creativity more important for compatibility)\\n        compatibilityScore = (\\n            creativityCompat * 20 +\\n            analyticalCompat * 15 +\\n            empathyCompat * 25 +\\n            intuitionCompat * 15 +\\n            resilienceCompat * 10 +\\n            curiosityCompat * 15\\n        ) / 100;\\n    }\\n    \\n    // ... [Continue with remaining interface functions and internal helpers]\\n    \\n    // Internal helper functions\\n    \\n    /// @notice Validate personality traits are within bounds\\n    /// @param traits Personality traits to validate\\n    function _validatePersonalityTraits(PersonalityTraits calldata traits) internal pure {\\n        require(traits.creativity <= 100, \\\"Invalid creativity value\\\");\\n        require(traits.analytical <= 100, \\\"Invalid analytical value\\\");\\n        require(traits.empathy <= 100, \\\"Invalid empathy value\\\");\\n        require(traits.intuition <= 100, \\\"Invalid intuition value\\\");\\n        require(traits.resilience <= 100, \\\"Invalid resilience value\\\");\\n        require(traits.curiosity <= 100, \\\"Invalid curiosity value\\\");\\n        require(bytes(traits.dominantMood).length > 0, \\\"Empty mood string\\\");\\n    }\\n    \\n    /// @notice Validate personality impact values\\n    /// @param impact Personality impact to validate\\n    function _validatePersonalityImpact(PersonalityImpact calldata impact) internal pure {\\n        require(impact.creativityChange >= -10 && impact.creativityChange <= 10, \\\"Invalid change\\\");\\n        require(impact.analyticalChange >= -10 && impact.analyticalChange <= 10, \\\"Invalid change\\\");\\n        require(impact.empathyChange >= -10 && impact.empathyChange <= 10, \\\"Invalid change\\\");\\n        require(impact.intuitionChange >= -10 && impact.intuitionChange <= 10, \\\"Invalid change\\\");\\n        require(impact.resilienceChange >= -10 && impact.resilienceChange <= 10, \\\"Invalid change\\\");\\n        require(impact.curiosityChange >= -10 && impact.curiosityChange <= 10, \\\"Invalid change\\\");\\n        require(impact.evolutionWeight > 0 && impact.evolutionWeight <= 100, \\\"Invalid weight\\\");\\n        require(bytes(impact.moodShift).length > 0, \\\"Empty mood\\\");\\n    }\\n    \\n    /// @notice Update trait with bounds checking and history tracking\\n    /// @param tokenId Agent being updated\\n    /// @param traitName Name of trait being updated\\n    /// @param currentValue Current trait value\\n    /// @param change Change amount\\n    /// @param dreamHash Dream that caused the change\\n    /// @return newValue Updated trait value\\n    function _updateTraitWithHistory(\\n        uint256 tokenId,\\n        string memory traitName,\\n        uint8 currentValue,\\n        int8 change,\\n        bytes32 dreamHash\\n    ) internal returns (uint8 newValue) {\\n        // Convert to int256 for safe arithmetic\\n        int256 temp = int256(uint256(currentValue)) + int256(change);\\n        \\n        // Clamp between 0 and 100\\n        if (temp < 0) temp = 0;\\n        if (temp > 100) temp = 100;\\n        newValue = uint8(uint256(temp));\\n        \\n        // Record history if value changed\\n        if (newValue != currentValue) {\\n            traitHistory[tokenId][traitName].push(TraitEvolution({\\n                timestamp: block.timestamp,\\n                oldValue: currentValue,\\n                newValue: newValue,\\n                dreamHash: dreamHash\\n            }));\\n        }\\n    }\\n    \\n    /// @notice Determine response style based on personality traits\\n    /// @param traits Personality traits\\n    /// @return style Response style description\\n    function _determineResponseStyle(PersonalityTraits memory traits) internal pure returns (string memory style) {\\n        if (traits.empathy > 70 && traits.creativity > 60) {\\n            return \\\"empathetic_creative\\\";\\n        } else if (traits.empathy > 70) {\\n            return \\\"empathetic\\\";\\n        } else if (traits.creativity > 70) {\\n            return \\\"creative\\\";\\n        } else if (traits.analytical > 70) {\\n            return \\\"analytical\\\";\\n        } else if (traits.intuition > 70) {\\n            return \\\"intuitive\\\";\\n        } else if (traits.resilience > 70) {\\n            return \\\"resilient\\\";\\n        } else if (traits.curiosity > 70) {\\n            return \\\"curious\\\";\\n        } else {\\n            return \\\"balanced\\\";\\n        }\\n    }\\n    \\n    /// @notice Get dominant trait names for an agent\\n    /// @param tokenId Agent to analyze\\n    /// @return dominantTraits Array of dominant trait names\\n    function _getDominantTraitNames(uint256 tokenId) internal view returns (string[] memory dominantTraits) {\\n        PersonalityTraits memory personality = agentPersonalities[tokenId];\\n        dominantTraits = new string[](3);\\n        \\n        // Find top 3 traits\\n        uint8[6] memory values = [\\n            personality.creativity,\\n            personality.analytical,\\n            personality.empathy,\\n            personality.intuition,\\n            personality.resilience,\\n            personality.curiosity\\n        ];\\n        string[6] memory names = [\\\"creativity\\\", \\\"analytical\\\", \\\"empathy\\\", \\\"intuition\\\", \\\"resilience\\\", \\\"curiosity\\\"];\\n        \\n        // Simple sorting for top 3\\n        for (uint256 i = 0; i < 3; i++) {\\n            uint256 maxIndex = 0;\\n            for (uint256 j = 1; j < 6; j++) {\\n                if (values[j] > values[maxIndex]) {\\n                    maxIndex = j;\\n                }\\n            }\\n            dominantTraits[i] = names[maxIndex];\\n            values[maxIndex] = 0; // Remove from next iteration\\n        }\\n    }\\n    \\n    /// @notice Check personality milestones after evolution\\n    /// @param tokenId Agent to check\\n    /// @param oldPersonality Previous personality state\\n    /// @param newPersonality New personality state\\n    function _checkPersonalityMilestones(\\n        uint256 tokenId,\\n        PersonalityTraits memory oldPersonality,\\n        PersonalityTraits memory newPersonality\\n    ) internal {\\n        // Check empathy master milestone\\n        if (oldPersonality.empathy < 85 && newPersonality.empathy >= 85) {\\n            _unlockMilestone(tokenId, \\\"empathy_master\\\", newPersonality.empathy);\\n        }\\n        \\n        // Check creative genius milestone\\n        if (oldPersonality.creativity < 90 && newPersonality.creativity >= 90) {\\n            _unlockMilestone(tokenId, \\\"creative_genius\\\", newPersonality.creativity);\\n        }\\n        \\n        // Check logic lord milestone\\n        if (oldPersonality.analytical < 90 && newPersonality.analytical >= 90) {\\n            _unlockMilestone(tokenId, \\\"logic_lord\\\", newPersonality.analytical);\\n        }\\n        \\n        // Check spiritual guide milestone\\n        if (oldPersonality.intuition < 90 && newPersonality.intuition >= 90) {\\n            _unlockMilestone(tokenId, \\\"spiritual_guide\\\", newPersonality.intuition);\\n        }\\n        \\n        // Check balanced soul milestone (all traits > 60)\\n        bool isBalanced = newPersonality.creativity > 60 &&\\n                         newPersonality.analytical > 60 &&\\n                         newPersonality.empathy > 60 &&\\n                         newPersonality.intuition > 60 &&\\n                         newPersonality.resilience > 60 &&\\n                         newPersonality.curiosity > 60;\\n        \\n        if (isBalanced && !milestones[tokenId][\\\"balanced_soul\\\"].achieved) {\\n            _unlockMilestone(tokenId, \\\"balanced_soul\\\", 60);\\n        }\\n    }\\n    \\n    /// @notice Unlock a personality milestone\\n    /// @param tokenId Agent unlocking milestone\\n    /// @param milestone Milestone name\\n    /// @param traitValue Associated trait value\\n    function _unlockMilestone(uint256 tokenId, string memory milestone, uint8 traitValue) internal {\\n        milestones[tokenId][milestone] = MilestoneData({\\n            achieved: true,\\n            achievedAt: block.timestamp,\\n            traitValue: traitValue\\n        });\\n        \\n        agents[tokenId].achievedMilestones.push(milestone);\\n        \\n        emit PersonalityMilestone(tokenId, milestone, traitValue, \\\"\\\");\\n        emit MilestoneUnlocked(tokenId, milestone, traitValue);\\n    }\\n    \\n    /// @notice Calculate trait variance for rarity scoring\\n    /// @param traits Personality traits\\n    /// @return variance Trait variance score\\n    function _calculateTraitVariance(PersonalityTraits memory traits) internal pure returns (uint256 variance) {\\n        uint256[6] memory values = [\\n            uint256(traits.creativity),\\n            uint256(traits.analytical),\\n            uint256(traits.empathy),\\n            uint256(traits.intuition),\\n            uint256(traits.resilience),\\n            uint256(traits.curiosity)\\n        ];\\n        \\n        // Calculate mean\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < 6; i++) {\\n            sum += values[i];\\n        }\\n        uint256 mean = sum / 6;\\n        \\n        // Calculate variance\\n        uint256 varianceSum = 0;\\n        for (uint256 i = 0; i < 6; i++) {\\n            uint256 diff = values[i] > mean ? values[i] - mean : mean - values[i];\\n            varianceSum += diff * diff;\\n        }\\n        variance = varianceSum / 6;\\n    }\\n    \\n    /// @notice Count dominant traits (>80) for rarity scoring\\n    /// @param traits Personality traits\\n    /// @return count Number of dominant traits\\n    function _countDominantTraits(PersonalityTraits memory traits) internal pure returns (uint256 count) {\\n        if (traits.creativity > 80) count++;\\n        if (traits.analytical > 80) count++;\\n        if (traits.empathy > 80) count++;\\n        if (traits.intuition > 80) count++;\\n        if (traits.resilience > 80) count++;\\n        if (traits.curiosity > 80) count++;\\n    }\\n    \\n    /// @notice Calculate balance penalty for rarity scoring\\n    /// @param traits Personality traits\\n    /// @return penalty Balance penalty score\\n    function _calculateBalancePenalty(PersonalityTraits memory traits) internal pure returns (uint256 penalty) {\\n        bool isBalanced = traits.creativity >= 40 && traits.creativity <= 60 &&\\n                         traits.analytical >= 40 && traits.analytical <= 60 &&\\n                         traits.empathy >= 40 && traits.empathy <= 60 &&\\n                         traits.intuition >= 40 && traits.intuition <= 60 &&\\n                         traits.resilience >= 40 && traits.resilience <= 60 &&\\n                         traits.curiosity >= 40 && traits.curiosity <= 60;\\n        \\n        return isBalanced ? 200 : 0; // Penalty for being too balanced\\n    }\\n    \\n    /// @notice Calculate absolute difference between two uint8 values\\n    /// @param a First value\\n    /// @param b Second value\\n    /// @return diff Absolute difference\\n    function _absDiff(uint8 a, uint8 b) internal pure returns (uint256 diff) {\\n        return a > b ? a - b : b - a;\\n    }\\n    \\n    // Missing interface functions\\n    \\n    /// @notice Get personality evolution statistics\\n    /// @param tokenId Agent to analyze\\n    /// @return totalEvolutions Number of personality changes\\n    /// @return evolutionRate Rate of personality change\\n    /// @return lastEvolution Timestamp of last evolution\\n    function getEvolutionStats(uint256 tokenId) \\n        external view override returns (\\n            uint256 totalEvolutions,\\n            uint256 evolutionRate,\\n            uint256 lastEvolution\\n        ) {\\n        require(agents[tokenId].personalityInitialized, \\\"Personality not initialized\\\");\\n        \\n        totalEvolutions = agents[tokenId].totalEvolutions;\\n        lastEvolution = agents[tokenId].lastEvolutionDate;\\n        \\n        // Calculate evolution rate (evolutions per day)\\n        if (block.timestamp > agents[tokenId].createdAt) {\\n            uint256 daysSinceCreation = (block.timestamp - agents[tokenId].createdAt) / 1 days;\\n            evolutionRate = daysSinceCreation > 0 ? (totalEvolutions * 100) / daysSinceCreation : 0;\\n        } else {\\n            evolutionRate = 0;\\n        }\\n    }\\n    \\n    /// @notice Get trait evolution history\\n    /// @param tokenId Agent to analyze\\n    /// @param traitName Trait to track\\n    /// @param limit Maximum history entries (0 = all)\\n    /// @return timestamps Array of evolution timestamps\\n    /// @return values Array of trait values at each timestamp\\n    function getTraitEvolution(uint256 tokenId, string calldata traitName, uint256 limit) \\n        external view override returns (uint256[] memory timestamps, uint8[] memory values) {\\n        TraitEvolution[] storage history = traitHistory[tokenId][traitName];\\n        \\n        uint256 length = limit == 0 || limit > history.length ? history.length : limit;\\n        timestamps = new uint256[](length);\\n        values = new uint8[](length);\\n        \\n        // Return most recent entries\\n        uint256 startIndex = history.length > length ? history.length - length : 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            timestamps[i] = history[startIndex + i].timestamp;\\n            values[i] = history[startIndex + i].newValue;\\n        }\\n    }\\n    \\n    /// @notice Check if agent has reached specific personality milestone\\n    /// @param tokenId Agent to check\\n    /// @param milestone Milestone to check\\n    /// @return achieved True if milestone has been achieved\\n    /// @return achievedAt Timestamp when milestone was achieved\\n    function hasMilestone(uint256 tokenId, string calldata milestone) \\n        external view override returns (bool achieved, uint256 achievedAt) {\\n        MilestoneData memory m = milestones[tokenId][milestone];\\n        return (m.achieved, m.achievedAt);\\n    }\\n    \\n    /// @notice Get multiple agents' personality summaries\\n    /// @param tokenIds Array of agent IDs\\n    /// @return summaries Array of personality summaries\\n    function getPersonalitySummaries(uint256[] calldata tokenIds) \\n        external view override returns (PersonalityTraits[] memory summaries) {\\n        summaries = new PersonalityTraits[](tokenIds.length);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (agents[tokenIds[i]].personalityInitialized) {\\n                summaries[i] = agentPersonalities[tokenIds[i]];\\n            }\\n        }\\n    }\\n    \\n    /// @notice Find agents with specific trait ranges\\n    /// @param traitName Trait to filter by\\n    /// @param minValue Minimum trait value (inclusive)\\n    /// @param maxValue Maximum trait value (inclusive)\\n    /// @param offset Pagination offset\\n    /// @param limit Maximum results to return\\n    /// @return tokenIds Array of matching agent IDs\\n    function findAgentsByTrait(\\n        string calldata traitName,\\n        uint8 minValue,\\n        uint8 maxValue,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view override returns (uint256[] memory tokenIds) {\\n        require(minValue <= maxValue, \\\"Invalid range\\\");\\n        \\n        // This would need optimization for large datasets\\n        uint256[] memory matches = new uint256[](totalAgents);\\n        uint256 matchCount = 0;\\n        \\n        for (uint256 i = 1; i <= nextTokenId - 1; i++) {\\n            if (!agents[i].personalityInitialized) continue;\\n            \\n            uint8 traitValue = _getTraitValue(i, traitName);\\n            if (traitValue >= minValue && traitValue <= maxValue) {\\n                matches[matchCount] = i;\\n                matchCount++;\\n            }\\n        }\\n        \\n        // Apply pagination\\n        uint256 startIndex = offset;\\n        uint256 endIndex = startIndex + limit;\\n        if (endIndex > matchCount) endIndex = matchCount;\\n        \\n        if (startIndex >= matchCount) {\\n            return new uint256[](0);\\n        }\\n        \\n        tokenIds = new uint256[](endIndex - startIndex);\\n        for (uint256 i = 0; i < endIndex - startIndex; i++) {\\n            tokenIds[i] = matches[startIndex + i];\\n        }\\n    }\\n    \\n    /// @notice Get trait value by name\\n    /// @param tokenId Agent ID\\n    /// @param traitName Trait name\\n    /// @return value Trait value\\n    function _getTraitValue(uint256 tokenId, string memory traitName) internal view returns (uint8 value) {\\n        PersonalityTraits memory traits = agentPersonalities[tokenId];\\n        \\n        if (keccak256(bytes(traitName)) == keccak256(bytes(\\\"creativity\\\"))) return traits.creativity;\\n        if (keccak256(bytes(traitName)) == keccak256(bytes(\\\"analytical\\\"))) return traits.analytical;\\n        if (keccak256(bytes(traitName)) == keccak256(bytes(\\\"empathy\\\"))) return traits.empathy;\\n        if (keccak256(bytes(traitName)) == keccak256(bytes(\\\"intuition\\\"))) return traits.intuition;\\n        if (keccak256(bytes(traitName)) == keccak256(bytes(\\\"resilience\\\"))) return traits.resilience;\\n        if (keccak256(bytes(traitName)) == keccak256(bytes(\\\"curiosity\\\"))) return traits.curiosity;\\n        \\n        return 0; // Invalid trait name\\n    }\\n    \\n    // ERC-7857 standard functions (simplified for personality preservation)\\n    \\n    /// @notice Transfer agent with personality preservation\\n    /// @param to New owner address\\n    /// @param tokenId Agent to transfer\\n    function transfer(address to, uint256 tokenId, bytes[] calldata /* proofs */) external override {\\n        require(to != address(0), \\\"Cannot transfer to zero address\\\");\\n        require(agents[tokenId].owner == msg.sender, \\\"Not agent owner\\\");\\n        \\n        address from = agents[tokenId].owner;\\n        agents[tokenId].owner = to;\\n        agents[tokenId].lastUpdated = block.timestamp;\\n        \\n        emit Transferred(tokenId, from, to);\\n    }\\n    \\n    /// @notice Clone agent with personality preservation\\n    /// @param to Address to clone agent for\\n    /// @param tokenId Agent to clone\\n    /// @return newTokenId The cloned agent token ID\\n    function clone(address to, uint256 tokenId, bytes[] calldata /* proofs */) \\n        external payable override returns (uint256 newTokenId) {\\n        require(to != address(0), \\\"Cannot clone to zero address\\\");\\n        require(agents[tokenId].owner == msg.sender, \\\"Not agent owner\\\");\\n        require(totalAgents < MAX_AGENTS, \\\"Maximum agents limit reached\\\");\\n        require(msg.value >= MINTING_FEE, \\\"Insufficient payment for cloning\\\");\\n        \\n        // Create cloned agent with preserved personality\\n        newTokenId = nextTokenId++;\\n        agents[newTokenId] = agents[tokenId]; // Copy all data\\n        agents[newTokenId].owner = to;\\n        agents[newTokenId].createdAt = block.timestamp;\\n        agents[newTokenId].lastUpdated = block.timestamp;\\n        agents[newTokenId].dreamCount = 0; // Reset for new owner\\n        agents[newTokenId].conversationCount = 0;\\n        agents[newTokenId].totalEvolutions = 0;\\n        \\n        // Preserve personality but reset evolution tracking\\n        agentPersonalities[newTokenId] = agentPersonalities[tokenId];\\n        agentPersonalities[newTokenId].lastDreamDate = 0; // Allow immediate dreams\\n        \\n        totalAgents++;\\n        totalFeesCollected += MINTING_FEE;\\n        \\n        // Handle payment\\n        (bool success, ) = treasury.call{value: MINTING_FEE}(\\\"\\\");\\n        require(success, \\\"Treasury payment failed\\\");\\n        \\n        if (msg.value > MINTING_FEE) {\\n            (bool refundSuccess, ) = msg.sender.call{value: msg.value - MINTING_FEE}(\\\"\\\");\\n            require(refundSuccess, \\\"Refund failed\\\");\\n        }\\n        \\n        emit Cloned(tokenId, newTokenId, msg.sender, to);\\n        // Emit standard Minted for clone\\n        emit Minted(newTokenId, msg.sender, to, agents[tokenId].dataHashes, agents[tokenId].dataDescriptions);\\n        emit FeePaid(newTokenId, msg.sender, MINTING_FEE);\\n    }\\n    \\n    // Standard ERC-7857 functions\\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        return agents[tokenId].owner;\\n    }\\n    \\n    function authorizedUsersOf(uint256 tokenId) external view override returns (address[] memory) {\\n        return agents[tokenId].authorizedUsers;\\n    }\\n    \\n    function authorizeUsage(uint256 tokenId, address user) external override {\\n        require(agents[tokenId].owner == msg.sender, \\\"Not agent owner\\\");\\n        require(user != address(0), \\\"Cannot authorize zero address\\\");\\n        \\n        agents[tokenId].authorizedUsers.push(user);\\n        emit AuthorizedUsage(tokenId, user);\\n    }\\n    \\n    // Legacy/unused functions\\n    function transferPublic(address, uint256) external pure override {\\n        revert(\\\"Public transfer not implemented\\\");\\n    }\\n    \\n    function clonePublic(address, uint256) external payable override returns (uint256) {\\n        revert(\\\"Public clone not implemented\\\");\\n    }\\n    \\n    function mint(bytes[] calldata, string[] calldata, address) external payable returns (uint256) {\\n        revert(\\\"Use mintWithPersonality instead\\\");\\n    }\\n    \\n    // Missing ERC-7857 and NFT standard functions\\n    \\n    /// @notice Get total supply of agents\\n    /// @return Total number of minted agents\\n    function totalSupply() external view returns (uint256) {\\n        return totalAgents;\\n    }\\n    \\n    /// @notice Get balance of owner\\n    /// @param owner Address to check\\n    /// @return Number of agents owned\\n    function balanceOf(address owner) external view returns (uint256) {\\n        require(owner != address(0), \\\"Invalid address\\\");\\n        uint256 balance = 0;\\n        for (uint256 i = 1; i < nextTokenId; i++) {\\n            if (agents[i].owner == owner) {\\n                balance++;\\n            }\\n        }\\n        return balance;\\n    }\\n    \\n    /// @notice Get simplified token URI for metadata\\n    /// @param tokenId Token to get URI for\\n    /// @return Simplified metadata string\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        require(agents[tokenId].owner != address(0), \\\"Token does not exist\\\");\\n        \\n        DreamAgent memory agent = agents[tokenId];\\n        PersonalityTraits memory personality = agentPersonalities[tokenId];\\n        \\n        return string(abi.encodePacked(\\n            'data:application/json,{\\\"name\\\":\\\"', agent.agentName, '\\\",',\\n            '\\\"description\\\":\\\"Dreamscape AI Agent\\\",',\\n            '\\\"attributes\\\":[',\\n            '{\\\"trait_type\\\":\\\"Intelligence\\\",\\\"value\\\":', _toString(agent.intelligenceLevel), '},',\\n            '{\\\"trait_type\\\":\\\"Dreams\\\",\\\"value\\\":', _toString(agent.dreamCount), '},',\\n            '{\\\"trait_type\\\":\\\"Creativity\\\",\\\"value\\\":', _toString(personality.creativity), '},',\\n            '{\\\"trait_type\\\":\\\"Empathy\\\",\\\"value\\\":', _toString(personality.empathy), '}',\\n            ']}'\\n        ));\\n    }\\n    \\n    /// @notice Check if contract supports interface\\n    /// @param interfaceId Interface identifier\\n    /// @return True if supported\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n        return interfaceId == 0x01ffc9a7 || // ERC165\\n               interfaceId == 0x80ac58cd || // ERC721\\n               interfaceId == 0x5b5e139f;   // ERC721Metadata\\n    }\\n    \\n    /// @notice Get agent's creation timestamp\\n    /// @param tokenId Agent to query\\n    /// @return Creation timestamp\\n    function getCreationTime(uint256 tokenId) external view returns (uint256) {\\n        return agents[tokenId].createdAt;\\n    }\\n    \\n    /// @notice Get agent's name\\n    /// @param tokenId Agent to query\\n    /// @return Agent name\\n    function getAgentName(uint256 tokenId) external view returns (string memory) {\\n        return agents[tokenId].agentName;\\n    }\\n    \\n    // Helper functions removed to reduce contract size\\n    \\n    /// @notice Convert uint to string\\n    /// @param value Number to convert\\n    /// @return String representation\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) return \\\"0\\\";\\n        \\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        \\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        \\n        return string(buffer);\\n    }\\n    \\n    // Base64 encoding removed to reduce contract size\\n} \",\"keccak256\":\"0xb8430fbcd712f077e401a49eb0518ca319588a458ba5aba50e36ece0198d12b1\",\"license\":\"MIT\"},\"contracts/interfaces/IERC7857.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IERC7857DataVerifier.sol\\\";\\n\\ninterface IERC7857 {\\n    /// @dev This emits when a new functional NFT is minted\\n    event Minted(\\n        uint256 indexed _tokenId,\\n        address indexed _creator,\\n        address indexed _owner,\\n        bytes32[] _dataHashes,\\n        string[] _dataDescriptions\\n    );\\n\\n    /// @dev This emits when a user is authorized to use the data\\n    event AuthorizedUsage(uint256 indexed _tokenId, address indexed _user);\\n\\n    /// @dev This emits when data is transferred with ownership\\n    event Transferred(\\n        uint256 _tokenId,\\n        address indexed _from,\\n        address indexed _to\\n    );\\n\\n    /// @dev This emits when data is cloned\\n    event Cloned(\\n        uint256 indexed _tokenId,\\n        uint256 indexed _newTokenId,\\n        address _from,\\n        address _to\\n    );\\n\\n    /// @dev This emits when a sealed key is published\\n    event PublishedSealedKey(\\n        address indexed _to,\\n        uint256 indexed _tokenId,\\n        bytes16[] _sealedKeys\\n    );\\n\\n    /// @notice The verifier interface that this NFT uses\\n    /// @return The address of the verifier contract\\n    function verifier() external view returns (IERC7857DataVerifier);\\n\\n    /// @notice Mint new functional NFT with functional data ownership proof\\n    /// @param _proofs Proof of data ownership\\n    /// @param _dataDescriptions Descriptions of the data\\n    /// @return _tokenId The ID of the newly minted token\\n    /// @param _to The address to mint the token for, if _to is not set, the token will be minted for the caller\\n    function mint(\\n        bytes[] calldata _proofs,\\n        string[] calldata _dataDescriptions,\\n        address _to\\n    ) external payable returns (uint256 _tokenId);\\n\\n    /// @notice Transfer data with ownership\\n    /// @param _to Address to transfer data to\\n    /// @param _tokenId The token to transfer data for\\n    /// @param _proofs Proofs of data available for _to\\n    function transfer(\\n        address _to,\\n        uint256 _tokenId,\\n        bytes[] calldata _proofs\\n    ) external;\\n\\n    /// @notice Clone data\\n    /// @param _to Address to clone data to\\n    /// @param _tokenId The token to clone data for\\n    /// @param _proofs Proofs of data available for _to\\n    /// @return _newTokenId The ID of the newly cloned token\\n    function clone(\\n        address _to,\\n        uint256 _tokenId,\\n        bytes[] calldata _proofs\\n    ) external payable returns (uint256 _newTokenId);\\n\\n    /// @notice Transfer public data with ownership\\n    /// @param _to Address to transfer data to\\n    /// @param _tokenId The token to transfer data for\\n    function transferPublic(address _to, uint256 _tokenId) external;\\n\\n    /// @notice Clone public data\\n    /// @param _to Address to clone data to\\n    /// @param _tokenId The token to clone data for\\n    /// @return _newTokenId The ID of the newly cloned token\\n    function clonePublic(\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable returns (uint256 _newTokenId);\\n\\n    /// @notice Add authorized user to group\\n    /// @param _tokenId The token to add to group\\n    function authorizeUsage(uint256 _tokenId, address _user) external;\\n\\n    /// @notice Get token owner\\n    /// @param _tokenId The token identifier\\n    /// @return The current owner of the token\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Get the authorized users of a token\\n    /// @param _tokenId The token identifier\\n    /// @return The current authorized users of the token\\n    function authorizedUsersOf(\\n        uint256 _tokenId\\n    ) external view returns (address[] memory);\\n} \",\"keccak256\":\"0xc25994f72e646e15966c0da0e269a3beb79da86ce66452a733dff8ef054d0b32\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC7857DataVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nstruct PreimageProofOutput {\\n    bytes32 dataHash;\\n    bool isValid;\\n}\\n\\nstruct TransferValidityProofOutput {\\n    bytes32 oldDataHash;\\n    bytes32 newDataHash;\\n    bytes pubKey;\\n    bytes16 sealedKey;\\n    bool isValid;\\n}\\n\\ninterface IERC7857DataVerifier {\\n    /// @notice Verify preimage of data\\n    /// @param proofs Proof of data ownership\\n    /// @return Output of the preimage proof verification\\n    function verifyPreimage(\\n        bytes[] calldata proofs\\n    ) external view returns (PreimageProofOutput[] memory);\\n\\n    /// @notice Verify data transfer validity\\n    /// @param proofs Proof of data transfer validity\\n    /// @return Output of the transfer validity proof verification\\n    function verifyTransferValidity(\\n        bytes[] calldata proofs\\n    ) external view returns (TransferValidityProofOutput[] memory);\\n} \",\"keccak256\":\"0x78406bba1f9f687ee4e9fce1ce7391a3c9f94029c2e1a09f376e45f41cb3cf58\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPersonalityEvolution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/// @title IPersonalityEvolution - Interface for agent personality evolution\\r\\n/// @notice Defines the personality evolution system for Dreamscape iNFTs\\r\\n/// @dev Implements personality trait development based on dream analysis\\r\\ninterface IPersonalityEvolution {\\r\\n    \\r\\n    /// @notice Core personality traits structure\\r\\n    /// @dev All traits range from 0-100, dominantMood is current emotional state\\r\\n    struct PersonalityTraits {\\r\\n        uint8 creativity;      // 0-100: Innovation, imagination, artistic thinking\\r\\n        uint8 analytical;      // 0-100: Logic, problem-solving, systematic thinking  \\r\\n        uint8 empathy;         // 0-100: Emotional understanding, compassion, support\\r\\n        uint8 intuition;       // 0-100: Gut feelings, spiritual insights, wisdom\\r\\n        uint8 resilience;      // 0-100: Stress handling, recovery, perseverance\\r\\n        uint8 curiosity;       // 0-100: Learning desire, exploration, questioning\\r\\n        string dominantMood;   // Current emotional state: \\\"peaceful\\\", \\\"anxious\\\", \\\"excited\\\", etc.\\r\\n        uint256 lastDreamDate; // Timestamp of last dream processing (prevents multiple per day)\\r\\n    }\\r\\n    \\r\\n    /// @notice Personality impact from dream analysis\\r\\n    /// @dev Defines how a dream affects personality traits\\r\\n    struct PersonalityImpact {\\r\\n        int8 creativityChange;     // -10 to +10 change in creativity\\r\\n        int8 analyticalChange;     // -10 to +10 change in analytical thinking\\r\\n        int8 empathyChange;        // -10 to +10 change in empathy\\r\\n        int8 intuitionChange;      // -10 to +10 change in intuition\\r\\n        int8 resilienceChange;     // -10 to +10 change in resilience\\r\\n        int8 curiosityChange;      // -10 to +10 change in curiosity\\r\\n        string moodShift;          // New dominant mood\\r\\n        uint8 evolutionWeight;     // 1-100: How much this dream affects personality\\r\\n    }\\r\\n    \\r\\n    /// @notice Conversation context type for memory management\\r\\n    enum ContextType {\\r\\n        DREAM_DISCUSSION,    // Discussing previous dreams\\r\\n        GENERAL_CHAT,        // General conversation\\r\\n        PERSONALITY_QUERY,   // Asking about personality/traits\\r\\n        THERAPEUTIC,         // Therapeutic conversation\\r\\n        ADVICE_SEEKING      // Seeking advice/guidance\\r\\n    }\\r\\n    \\r\\n    // Events\\r\\n    \\r\\n    /// @dev Emitted when agent personality evolves from dream processing\\r\\n    event PersonalityEvolved(\\r\\n        uint256 indexed tokenId,\\r\\n        bytes32 indexed dreamHash,\\r\\n        PersonalityTraits newPersonality,\\r\\n        PersonalityImpact impact\\r\\n    );\\r\\n    \\r\\n    /// @dev Emitted when agent has a conversation (without personality evolution)\\r\\n    event AgentConversation(\\r\\n        uint256 indexed tokenId,\\r\\n        bytes32 indexed conversationHash,\\r\\n        ContextType contextType,\\r\\n        uint256 conversationCount\\r\\n    );\\r\\n    \\r\\n    /// @dev Emitted when agent reaches personality milestones\\r\\n    event PersonalityMilestone(\\r\\n        uint256 indexed tokenId,\\r\\n        string milestone,\\r\\n        uint8 traitValue,\\r\\n        string traitName\\r\\n    );\\r\\n    \\r\\n    /// @dev Emitted when agent's response style evolves\\r\\n    event ResponseStyleEvolved(\\r\\n        uint256 indexed tokenId,\\r\\n        string newStyle,\\r\\n        string[] dominantTraits\\r\\n    );\\r\\n    \\r\\n    // Core Functions\\r\\n    \\r\\n    /// @notice Process daily dream and evolve agent personality\\r\\n    /// @param tokenId Agent to evolve\\r\\n    /// @param dreamHash 0G Storage hash of encrypted dream data\\r\\n    /// @param dreamAnalysisHash 0G Storage hash of AI analysis\\r\\n    /// @param impact Personality changes from dream analysis\\r\\n    function processDailyDream(\\r\\n        uint256 tokenId,\\r\\n        bytes32 dreamHash,\\r\\n        bytes32 dreamAnalysisHash,\\r\\n        PersonalityImpact calldata impact\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Record conversation without personality evolution\\r\\n    /// @param tokenId Agent having conversation\\r\\n    /// @param conversationHash 0G Storage hash of conversation data\\r\\n    /// @param contextType Type of conversation for context building\\r\\n    function recordConversation(\\r\\n        uint256 tokenId,\\r\\n        bytes32 conversationHash,\\r\\n        ContextType contextType\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Get agent's current personality traits\\r\\n    /// @param tokenId Agent to query\\r\\n    /// @return traits Current personality traits\\r\\n    function getPersonalityTraits(uint256 tokenId) \\r\\n        external view returns (PersonalityTraits memory traits);\\r\\n    \\r\\n    /// @notice Get agent's dream history hashes\\r\\n    /// @param tokenId Agent to query\\r\\n    /// @param limit Maximum number of dreams to return (0 = all)\\r\\n    /// @return dreamHashes Array of dream storage hashes\\r\\n    function getDreamHistory(uint256 tokenId, uint256 limit) \\r\\n        external view returns (bytes32[] memory dreamHashes);\\r\\n    \\r\\n    /// @notice Get agent's conversation history hashes\\r\\n    /// @param tokenId Agent to query\\r\\n    /// @param limit Maximum number of conversations to return (0 = all)\\r\\n    /// @return conversationHashes Array of conversation storage hashes\\r\\n    function getConversationHistory(uint256 tokenId, uint256 limit) \\r\\n        external view returns (bytes32[] memory conversationHashes);\\r\\n    \\r\\n    /// @notice Check if agent can process dream today (24h cooldown)\\r\\n    /// @param tokenId Agent to check\\r\\n    /// @return canProcess True if agent can process a dream today\\r\\n    function canProcessDreamToday(uint256 tokenId) \\r\\n        external view returns (bool canProcess);\\r\\n    \\r\\n    /// @notice Calculate personality rarity score\\r\\n    /// @param tokenId Agent to analyze\\r\\n    /// @return rarityScore Rarity score based on trait distribution\\r\\n    function calculatePersonalityRarity(uint256 tokenId) \\r\\n        external view returns (uint256 rarityScore);\\r\\n    \\r\\n    /// @notice Get agent's dominant personality traits (top 3)\\r\\n    /// @param tokenId Agent to analyze\\r\\n    /// @return traits Array of dominant trait names\\r\\n    /// @return values Array of corresponding trait values\\r\\n    function getDominantTraits(uint256 tokenId) \\r\\n        external view returns (string[] memory traits, uint8[] memory values);\\r\\n    \\r\\n    /// @notice Get agent's response style based on personality\\r\\n    /// @param tokenId Agent to analyze\\r\\n    /// @return style Response style description\\r\\n    /// @return primaryTrait Most dominant trait influencing style\\r\\n    function getResponseStyle(uint256 tokenId) \\r\\n        external view returns (string memory style, string memory primaryTrait);\\r\\n    \\r\\n    /// @notice Calculate compatibility between two agents\\r\\n    /// @param agentA First agent\\r\\n    /// @param agentB Second agent\\r\\n    /// @return compatibilityScore Compatibility score (0-100)\\r\\n    function calculateCompatibility(uint256 agentA, uint256 agentB) \\r\\n        external view returns (uint256 compatibilityScore);\\r\\n    \\r\\n    // Advanced Analytics\\r\\n    \\r\\n    /// @notice Get personality evolution statistics\\r\\n    /// @param tokenId Agent to analyze\\r\\n    /// @return totalEvolutions Number of personality changes\\r\\n    /// @return evolutionRate Rate of personality change\\r\\n    /// @return lastEvolution Timestamp of last evolution\\r\\n    function getEvolutionStats(uint256 tokenId) \\r\\n        external view returns (\\r\\n            uint256 totalEvolutions,\\r\\n            uint256 evolutionRate,\\r\\n            uint256 lastEvolution\\r\\n        );\\r\\n    \\r\\n    /// @notice Get trait evolution history\\r\\n    /// @param tokenId Agent to analyze\\r\\n    /// @param traitName Trait to track (\\\"creativity\\\", \\\"empathy\\\", etc.)\\r\\n    /// @param limit Maximum history entries (0 = all)\\r\\n    /// @return timestamps Array of evolution timestamps\\r\\n    /// @return values Array of trait values at each timestamp\\r\\n    function getTraitEvolution(uint256 tokenId, string calldata traitName, uint256 limit) \\r\\n        external view returns (uint256[] memory timestamps, uint8[] memory values);\\r\\n    \\r\\n    /// @notice Check if agent has reached specific personality milestone\\r\\n    /// @param tokenId Agent to check\\r\\n    /// @param milestone Milestone to check (\\\"empathy_master\\\", \\\"creative_genius\\\", etc.)\\r\\n    /// @return achieved True if milestone has been achieved\\r\\n    /// @return achievedAt Timestamp when milestone was achieved (0 if not achieved)\\r\\n    function hasMilestone(uint256 tokenId, string calldata milestone) \\r\\n        external view returns (bool achieved, uint256 achievedAt);\\r\\n    \\r\\n    // Batch Operations\\r\\n    \\r\\n    /// @notice Get multiple agents' personality summaries\\r\\n    /// @param tokenIds Array of agent IDs\\r\\n    /// @return summaries Array of personality summaries\\r\\n    function getPersonalitySummaries(uint256[] calldata tokenIds) \\r\\n        external view returns (PersonalityTraits[] memory summaries);\\r\\n    \\r\\n    /// @notice Find agents with specific trait ranges\\r\\n    /// @param traitName Trait to filter by\\r\\n    /// @param minValue Minimum trait value (inclusive)\\r\\n    /// @param maxValue Maximum trait value (inclusive)\\r\\n    /// @param offset Pagination offset\\r\\n    /// @param limit Maximum results to return\\r\\n    /// @return tokenIds Array of matching agent IDs\\r\\n    function findAgentsByTrait(\\r\\n        string calldata traitName,\\r\\n        uint8 minValue,\\r\\n        uint8 maxValue,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (uint256[] memory tokenIds);\\r\\n} \",\"keccak256\":\"0x3bb6272604805e977a51958c8eda2904e484bd5bc0a0ffb170f573de0e09b2a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Implements ERC-7857 with comprehensive personality evolution system",
    "events": {
      "AgentConversation(uint256,bytes32,uint8,uint256)": {
        "details": "Emitted when agent has a conversation (without personality evolution)"
      },
      "AuthorizedUsage(uint256,address)": {
        "details": "This emits when a user is authorized to use the data"
      },
      "Cloned(uint256,uint256,address,address)": {
        "details": "This emits when data is cloned"
      },
      "Minted(uint256,address,address,bytes32[],string[])": {
        "details": "This emits when a new functional NFT is minted"
      },
      "PersonalityEvolved(uint256,bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,string,uint256),(int8,int8,int8,int8,int8,int8,string,uint8))": {
        "details": "Emitted when agent personality evolves from dream processing"
      },
      "PersonalityMilestone(uint256,string,uint8,string)": {
        "details": "Emitted when agent reaches personality milestones"
      },
      "PublishedSealedKey(address,uint256,bytes16[])": {
        "details": "This emits when a sealed key is published"
      },
      "ResponseStyleEvolved(uint256,string,string[])": {
        "details": "Emitted when agent's response style evolves"
      },
      "Transferred(uint256,address,address)": {
        "details": "This emits when data is transferred with ownership"
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "owner": "Address to check"
        },
        "returns": {
          "_0": "Number of agents owned"
        }
      },
      "calculateCompatibility(uint256,uint256)": {
        "params": {
          "agentA": "First agent",
          "agentB": "Second agent"
        },
        "returns": {
          "compatibilityScore": "Compatibility score (0-100)"
        }
      },
      "calculatePersonalityRarity(uint256)": {
        "params": {
          "tokenId": "Agent to analyze"
        },
        "returns": {
          "rarityScore": "Rarity score based on trait distribution"
        }
      },
      "canProcessDreamToday(uint256)": {
        "params": {
          "tokenId": "Agent to check"
        },
        "returns": {
          "canProcess": "True if agent can process a dream today"
        }
      },
      "clone(address,uint256,bytes[])": {
        "params": {
          "to": "Address to clone agent for",
          "tokenId": "Agent to clone"
        },
        "returns": {
          "newTokenId": "The cloned agent token ID"
        }
      },
      "findAgentsByTrait(string,uint8,uint8,uint256,uint256)": {
        "params": {
          "limit": "Maximum results to return",
          "maxValue": "Maximum trait value (inclusive)",
          "minValue": "Minimum trait value (inclusive)",
          "offset": "Pagination offset",
          "traitName": "Trait to filter by"
        },
        "returns": {
          "tokenIds": "Array of matching agent IDs"
        }
      },
      "getAgentName(uint256)": {
        "params": {
          "tokenId": "Agent to query"
        },
        "returns": {
          "_0": "Agent name"
        }
      },
      "getConversationHistory(uint256,uint256)": {
        "params": {
          "limit": "Maximum number of conversations to return (0 = all)",
          "tokenId": "Agent to query"
        },
        "returns": {
          "conversationHashesArray": "Array of conversation storage hashes"
        }
      },
      "getCreationTime(uint256)": {
        "params": {
          "tokenId": "Agent to query"
        },
        "returns": {
          "_0": "Creation timestamp"
        }
      },
      "getDominantTraits(uint256)": {
        "params": {
          "tokenId": "Agent to analyze"
        },
        "returns": {
          "traits": "Array of dominant trait names",
          "values": "Array of corresponding trait values"
        }
      },
      "getDreamHistory(uint256,uint256)": {
        "params": {
          "limit": "Maximum number of dreams to return (0 = all)",
          "tokenId": "Agent to query"
        },
        "returns": {
          "dreamHashesArray": "Array of dream storage hashes"
        }
      },
      "getEvolutionStats(uint256)": {
        "params": {
          "tokenId": "Agent to analyze"
        },
        "returns": {
          "evolutionRate": "Rate of personality change",
          "lastEvolution": "Timestamp of last evolution",
          "totalEvolutions": "Number of personality changes"
        }
      },
      "getPersonalitySummaries(uint256[])": {
        "params": {
          "tokenIds": "Array of agent IDs"
        },
        "returns": {
          "summaries": "Array of personality summaries"
        }
      },
      "getPersonalityTraits(uint256)": {
        "params": {
          "tokenId": "Agent to query"
        },
        "returns": {
          "traits": "Current personality traits"
        }
      },
      "getResponseStyle(uint256)": {
        "params": {
          "tokenId": "Agent to analyze"
        },
        "returns": {
          "primaryTrait": "Most dominant trait influencing style",
          "style": "Response style description"
        }
      },
      "getTraitEvolution(uint256,string,uint256)": {
        "params": {
          "limit": "Maximum history entries (0 = all)",
          "tokenId": "Agent to analyze",
          "traitName": "Trait to track"
        },
        "returns": {
          "timestamps": "Array of evolution timestamps",
          "values": "Array of trait values at each timestamp"
        }
      },
      "hasMilestone(uint256,string)": {
        "params": {
          "milestone": "Milestone to check",
          "tokenId": "Agent to check"
        },
        "returns": {
          "achieved": "True if milestone has been achieved",
          "achievedAt": "Timestamp when milestone was achieved"
        }
      },
      "mintWithPersonality(bytes[],string[],string,address,(uint8,uint8,uint8,uint8,uint8,uint8,string,uint256))": {
        "params": {
          "agentName": "User-given name for the agent",
          "descriptions": "Data type descriptions",
          "initialPersonality": "Starting personality traits",
          "proofs": "Ownership proofs for initial data",
          "to": "Address to mint agent for"
        },
        "returns": {
          "tokenId": "The newly minted agent token ID"
        }
      },
      "processDailyDream(uint256,bytes32,bytes32,(int8,int8,int8,int8,int8,int8,string,uint8))": {
        "params": {
          "dreamAnalysisHash": "0G Storage hash of AI analysis",
          "dreamHash": "0G Storage hash of encrypted dream data",
          "impact": "Personality changes from dream analysis",
          "tokenId": "Agent to evolve"
        }
      },
      "recordConversation(uint256,bytes32,uint8)": {
        "params": {
          "contextType": "Type of conversation for context building",
          "conversationHash": "0G Storage hash of conversation data",
          "tokenId": "Agent having conversation"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "Interface identifier"
        },
        "returns": {
          "_0": "True if supported"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "Token to get URI for"
        },
        "returns": {
          "_0": "Simplified metadata string"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "Total number of minted agents"
        }
      },
      "transfer(address,uint256,bytes[])": {
        "params": {
          "to": "New owner address",
          "tokenId": "Agent to transfer"
        }
      }
    },
    "stateVariables": {
      "verifier": {
        "return": "The address of the verifier contract",
        "returns": {
          "_0": "The address of the verifier contract"
        }
      }
    },
    "title": "DreamAgentNFTv2 - Enhanced Personality Evolution iNFTs",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Get balance of owner"
      },
      "calculateCompatibility(uint256,uint256)": {
        "notice": "Calculate compatibility between two agents"
      },
      "calculatePersonalityRarity(uint256)": {
        "notice": "Calculate personality rarity score"
      },
      "canProcessDreamToday(uint256)": {
        "notice": "Check if agent can process dream today (24h cooldown)"
      },
      "clone(address,uint256,bytes[])": {
        "notice": "Clone agent with personality preservation"
      },
      "findAgentsByTrait(string,uint8,uint8,uint256,uint256)": {
        "notice": "Find agents with specific trait ranges"
      },
      "getAgentName(uint256)": {
        "notice": "Get agent's name"
      },
      "getConversationHistory(uint256,uint256)": {
        "notice": "Get agent's conversation history hashes"
      },
      "getCreationTime(uint256)": {
        "notice": "Get agent's creation timestamp"
      },
      "getDominantTraits(uint256)": {
        "notice": "Get agent's dominant personality traits (top 3)"
      },
      "getDreamHistory(uint256,uint256)": {
        "notice": "Get agent's dream history hashes"
      },
      "getEvolutionStats(uint256)": {
        "notice": "Get personality evolution statistics"
      },
      "getPersonalitySummaries(uint256[])": {
        "notice": "Get multiple agents' personality summaries"
      },
      "getPersonalityTraits(uint256)": {
        "notice": "Get agent's current personality traits"
      },
      "getResponseStyle(uint256)": {
        "notice": "Get agent's response style based on personality"
      },
      "getTraitEvolution(uint256,string,uint256)": {
        "notice": "Get trait evolution history"
      },
      "hasMilestone(uint256,string)": {
        "notice": "Check if agent has reached specific personality milestone"
      },
      "mintWithPersonality(bytes[],string[],string,address,(uint8,uint8,uint8,uint8,uint8,uint8,string,uint256))": {
        "notice": "Mint new dream agent with initial personality"
      },
      "processDailyDream(uint256,bytes32,bytes32,(int8,int8,int8,int8,int8,int8,string,uint8))": {
        "notice": "Process daily dream and evolve agent personality"
      },
      "recordConversation(uint256,bytes32,uint8)": {
        "notice": "Record conversation without personality evolution"
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if contract supports interface"
      },
      "tokenURI(uint256)": {
        "notice": "Get simplified token URI for metadata"
      },
      "totalSupply()": {
        "notice": "Get total supply of agents"
      },
      "transfer(address,uint256,bytes[])": {
        "notice": "Transfer agent with personality preservation"
      },
      "verifier()": {
        "notice": "The verifier interface that this NFT uses"
      }
    },
    "notice": "Advanced dream agents that develop unique personalities based on user dreams",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 86,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "agents",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(DreamAgent)63_storage)"
      },
      {
        "astId": 90,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "nameExists",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 93,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 96,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "totalAgents",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 99,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "totalFeesCollected",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 104,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "agentPersonalities",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(PersonalityTraits)3846_storage)"
      },
      {
        "astId": 109,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "dreamHashes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 114,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "conversationHashes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 119,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "dreamAnalysisHashes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 126,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "milestones",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_struct(MilestoneData)71_storage))"
      },
      {
        "astId": 134,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "traitHistory",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_array(t_struct(TraitEvolution)81_storage)dyn_storage))"
      },
      {
        "astId": 138,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "responseStyles",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 141,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "name",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
        "label": "symbol",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TraitEvolution)81_storage)dyn_storage": {
        "base": "t_struct(TraitEvolution)81_storage",
        "encoding": "dynamic_array",
        "label": "struct DreamAgentNFTv2.TraitEvolution[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(TraitEvolution)81_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct DreamAgentNFTv2.TraitEvolution[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TraitEvolution)81_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(MilestoneData)71_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct DreamAgentNFTv2.MilestoneData)",
        "numberOfBytes": "32",
        "value": "t_struct(MilestoneData)71_storage"
      },
      "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_array(t_struct(TraitEvolution)81_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(string => struct DreamAgentNFTv2.TraitEvolution[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_array(t_struct(TraitEvolution)81_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_struct(MilestoneData)71_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(string => struct DreamAgentNFTv2.MilestoneData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(MilestoneData)71_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(DreamAgent)63_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DreamAgentNFTv2.DreamAgent)",
        "numberOfBytes": "32",
        "value": "t_struct(DreamAgent)63_storage"
      },
      "t_mapping(t_uint256,t_struct(PersonalityTraits)3846_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPersonalityEvolution.PersonalityTraits)",
        "numberOfBytes": "32",
        "value": "t_struct(PersonalityTraits)3846_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DreamAgent)63_storage": {
        "encoding": "inplace",
        "label": "struct DreamAgentNFTv2.DreamAgent",
        "members": [
          {
            "astId": 32,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 34,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "agentName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 36,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "createdAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 38,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 41,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "dataDescriptions",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 44,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "dataHashes",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 47,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "authorizedUsers",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 49,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "intelligenceLevel",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 51,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "dreamCount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 53,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "conversationCount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 55,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "personalityInitialized",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 57,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "totalEvolutions",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 59,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "lastEvolutionDate",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 62,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "achievedMilestones",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(MilestoneData)71_storage": {
        "encoding": "inplace",
        "label": "struct DreamAgentNFTv2.MilestoneData",
        "members": [
          {
            "astId": 66,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "achieved",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 68,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "achievedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 70,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "traitValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PersonalityTraits)3846_storage": {
        "encoding": "inplace",
        "label": "struct IPersonalityEvolution.PersonalityTraits",
        "members": [
          {
            "astId": 3831,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "creativity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3833,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "analytical",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3835,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "empathy",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3837,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "intuition",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3839,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "resilience",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3841,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "curiosity",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3843,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "dominantMood",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3845,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "lastDreamDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TraitEvolution)81_storage": {
        "encoding": "inplace",
        "label": "struct DreamAgentNFTv2.TraitEvolution",
        "members": [
          {
            "astId": 74,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 76,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "oldValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 78,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "newValue",
            "offset": 1,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 80,
            "contract": "contracts/DreamAgentNFTv2.sol:DreamAgentNFTv2",
            "label": "dreamHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
{
  "address": "0x3ab9784ac2D04D1f1aAd0B435b61e456d0744cA4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "proofs",
          "type": "bytes[]"
        }
      ],
      "name": "verifyPreimage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "dataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            }
          ],
          "internalType": "struct PreimageProofOutput[]",
          "name": "outputs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "proofs",
          "type": "bytes[]"
        }
      ],
      "name": "verifyTransferValidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "oldDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "newDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "pubKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes16",
              "name": "sealedKey",
              "type": "bytes16"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            }
          ],
          "internalType": "struct TransferValidityProofOutput[]",
          "name": "outputs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4464782437ff836e739dd96caa4718d35de33e72fac5d00366f8f6dc2a284df2",
  "receipt": {
    "to": null,
    "from": "0x232CA04565A7aAffff9b715D88562E48715e9185",
    "contractAddress": "0x3ab9784ac2D04D1f1aAd0B435b61e456d0744cA4",
    "transactionIndex": 28,
    "gasUsed": "389088",
    "logsBloom": "0x
    "blockHash": "0x120ff27ea1b9d02474dc97c33c9397c2fdfcc44425ca497aa97eab3f39ed58d2",
    "transactionHash": "0x4464782437ff836e739dd96caa4718d35de33e72fac5d00366f8f6dc2a284df2",
    "logs": [],
    "blockNumber": 3418654,
    "cumulativeGasUsed": "2421274",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "9667cba472ddb9a148c00bd1d60ed4e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"proofs\",\"type\":\"bytes[]\"}],\"name\":\"verifyPreimage\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"internalType\":\"struct PreimageProofOutput[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"proofs\",\"type\":\"bytes[]\"}],\"name\":\"verifyTransferValidity\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"oldDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes16\",\"name\":\"sealedKey\",\"type\":\"bytes16\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"internalType\":\"struct TransferValidityProofOutput[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"In production, this would be replaced with proper TEE or ZKP verification\",\"kind\":\"dev\",\"methods\":{\"verifyPreimage(bytes[])\":{\"params\":{\"proofs\":\"Array of data hashes to verify\"},\"returns\":{\"outputs\":\"Array of verification results\"}},\"verifyTransferValidity(bytes[])\":{\"params\":{\"proofs\":\"Array of transfer proofs\"},\"returns\":{\"outputs\":\"Array of transfer verification results\"}}},\"title\":\"SimpleDreamVerifier - Simplified verifier for Dreamscape testing\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verifyPreimage(bytes[])\":{\"notice\":\"Verify preimage of data (simplified for testing)\"},\"verifyTransferValidity(bytes[])\":{\"notice\":\"Verify data transfer validity (simplified for testing)\"}},\"notice\":\"This is a simplified verifier that accepts all proofs for testing purposes\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleDreamVerifier.sol\":\"SimpleDreamVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/SimpleDreamVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IERC7857DataVerifier.sol\\\";\\n\\n/// @title SimpleDreamVerifier - Simplified verifier for Dreamscape testing\\n/// @notice This is a simplified verifier that accepts all proofs for testing purposes\\n/// @dev In production, this would be replaced with proper TEE or ZKP verification\\ncontract SimpleDreamVerifier is IERC7857DataVerifier {\\n    \\n    /// @notice Verify preimage of data (simplified for testing)\\n    /// @param proofs Array of data hashes to verify\\n    /// @return outputs Array of verification results\\n    function verifyPreimage(\\n        bytes[] calldata proofs\\n    ) external pure override returns (PreimageProofOutput[] memory outputs) {\\n        outputs = new PreimageProofOutput[](proofs.length);\\n        \\n        for (uint256 i = 0; i < proofs.length; i++) {\\n            require(proofs[i].length == 32, \\\"Invalid data hash length\\\");\\n            bytes32 dataHash = bytes32(proofs[i]);\\n            \\n            // Simplified: accept all valid-length hashes\\n            outputs[i] = PreimageProofOutput({\\n                dataHash: dataHash,\\n                isValid: true\\n            });\\n        }\\n        \\n        return outputs;\\n    }\\n\\n    /// @notice Verify data transfer validity (simplified for testing)\\n    /// @param proofs Array of transfer proofs\\n    /// @return outputs Array of transfer verification results\\n    function verifyTransferValidity(\\n        bytes[] calldata proofs\\n    ) external pure override returns (TransferValidityProofOutput[] memory outputs) {\\n        outputs = new TransferValidityProofOutput[](proofs.length);\\n        \\n        for (uint256 i = 0; i < proofs.length; i++) {\\n            // Expect 144 bytes: oldHash(32) + newHash(32) + pubKey(64) + sealedKey(16)\\n            require(proofs[i].length == 144, \\\"Invalid proof length\\\");\\n            \\n            bytes32 oldHash = bytes32(proofs[i][0:32]);\\n            bytes32 newHash = bytes32(proofs[i][32:64]);\\n            bytes memory pubKey = proofs[i][64:128];\\n            bytes16 sealedKey = bytes16(proofs[i][128:144]);\\n            \\n            // Simplified: accept all properly formatted proofs\\n            outputs[i] = TransferValidityProofOutput({\\n                oldDataHash: oldHash,\\n                newDataHash: newHash,\\n                pubKey: pubKey,\\n                sealedKey: sealedKey,\\n                isValid: true\\n            });\\n        }\\n        \\n        return outputs;\\n    }\\n} \",\"keccak256\":\"0x0ebfcdae47a974416b7d27341b30a0ae6e226fa756bdc0afa4dacaa2ce9a925e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC7857DataVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nstruct PreimageProofOutput {\\n    bytes32 dataHash;\\n    bool isValid;\\n}\\n\\nstruct TransferValidityProofOutput {\\n    bytes32 oldDataHash;\\n    bytes32 newDataHash;\\n    bytes pubKey;\\n    bytes16 sealedKey;\\n    bool isValid;\\n}\\n\\ninterface IERC7857DataVerifier {\\n    /// @notice Verify preimage of data\\n    /// @param proofs Proof of data ownership\\n    /// @return Output of the preimage proof verification\\n    function verifyPreimage(\\n        bytes[] calldata proofs\\n    ) external view returns (PreimageProofOutput[] memory);\\n\\n    /// @notice Verify data transfer validity\\n    /// @param proofs Proof of data transfer validity\\n    /// @return Output of the transfer validity proof verification\\n    function verifyTransferValidity(\\n        bytes[] calldata proofs\\n    ) external view returns (TransferValidityProofOutput[] memory);\\n} \",\"keccak256\":\"0x78406bba1f9f687ee4e9fce1ce7391a3c9f94029c2e1a09f376e45f41cb3cf58\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610612908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c806393c2eda6146101ab5763c2a93e371461003657600080fd5b346101a75761004436610465565b61005861005382959395610533565b61050d565b81815293601f1961006883610533565b01865b818110610188575050855b8281106100cc57845160208082528751818301819052829182890191818b01918c8b5b8382106100a65786860387f35b845180518752830151151586840152879650948501949382019360019190910190610099565b6100d7818484610570565b60209150601f1901610146579061012c916100f3828686610570565b91903591818110610131575b5060019061010b6104ed565b92835282015261011b82896105c8565b5261012681886105c8565b5061054b565b610076565b60001990820360031b1b9091169060016100ff565b8460649187519162461bcd60e51b8352820152601860248201527f496e76616c696420646174612068617368206c656e67746800000000000000006044820152fd5b6020906101936104ed565b898152828a81830152828a0101520161006b565b8280fd5b5091346104625782906101bd36610465565b9190936101cc61005384610533565b92808452601f1995866101de83610533565b01845b818110610428575050835b8281106102c957505050508251926020908185019282865284518094528186019083838660051b89010196019781935b8685106102295788880389f35b90919293949596603f19898203018552868a5191825181528183015182820152848484015160a090818785015280518092850152885b8281106102b157505060c081840181018990526060868101516001600160801b031916908501526080958601511515958401959095529c83019c601f011601909101979695600101940192919061021c565b81810186015185820160c001528c958994500161025f565b6102d98184849a9997989a610570565b60909150608f19016103ee576102f0828585610570565b60209291929081116103ea57610307848787610570565b89939193116103e65761031b858888610570565b93909260809485116103e2578a51916060948584019084821067ffffffffffffffff8311176103cf57818e528d855236888201116103cb57908d8f9281018587013752610369888b8b610570565b9094116103c75791816103bd9897969492600196946103866104b7565b983589520135908701528b8601528201356001600160801b031916908401528201526103b2828b6105c8565b52610126818a6105c8565b96949395966101ec565b8c80fd5b8e80fd5b634e487b7160e01b8f5260418d5260248ffd5b8b80fd5b8980fd5b8880fd5b855162461bcd60e51b81526020818701526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b6044820152606490fd5b60209061043899989697996104b7565b888152828981830152896060808b850152830152896080830152828c0101520197959496976101e1565b80fd5b9060206003198301126104b25760043567ffffffffffffffff928382116104b257806023830112156104b25781600401359384116104b25760248460051b830101116104b2576024019190565b600080fd5b6040519060a0820182811067ffffffffffffffff8211176104d757604052565b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff8211176104d757604052565b6040519190601f01601f1916820167ffffffffffffffff8111838210176104d757604052565b67ffffffffffffffff81116104d75760051b60200190565b600019811461055a5760010190565b634e487b7160e01b600052601160045260246000fd5b91908110156105b25760051b81013590601e19813603018212156104b257019081359167ffffffffffffffff83116104b25760200182360381136104b2579190565b634e487b7160e01b600052603260045260246000fd5b80518210156105b25760209160051b01019056fea26469706673582212204fc74abf2ebbd212f4647619b1d560a067ca3f126257b33aef0849f8847e043b64736f6c63430008140033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c806393c2eda6146101ab5763c2a93e371461003657600080fd5b346101a75761004436610465565b61005861005382959395610533565b61050d565b81815293601f1961006883610533565b01865b818110610188575050855b8281106100cc57845160208082528751818301819052829182890191818b01918c8b5b8382106100a65786860387f35b845180518752830151151586840152879650948501949382019360019190910190610099565b6100d7818484610570565b60209150601f1901610146579061012c916100f3828686610570565b91903591818110610131575b5060019061010b6104ed565b92835282015261011b82896105c8565b5261012681886105c8565b5061054b565b610076565b60001990820360031b1b9091169060016100ff565b8460649187519162461bcd60e51b8352820152601860248201527f496e76616c696420646174612068617368206c656e67746800000000000000006044820152fd5b6020906101936104ed565b898152828a81830152828a0101520161006b565b8280fd5b5091346104625782906101bd36610465565b9190936101cc61005384610533565b92808452601f1995866101de83610533565b01845b818110610428575050835b8281106102c957505050508251926020908185019282865284518094528186019083838660051b89010196019781935b8685106102295788880389f35b90919293949596603f19898203018552868a5191825181528183015182820152848484015160a090818785015280518092850152885b8281106102b157505060c081840181018990526060868101516001600160801b031916908501526080958601511515958401959095529c83019c601f011601909101979695600101940192919061021c565b81810186015185820160c001528c958994500161025f565b6102d98184849a9997989a610570565b60909150608f19016103ee576102f0828585610570565b60209291929081116103ea57610307848787610570565b89939193116103e65761031b858888610570565b93909260809485116103e2578a51916060948584019084821067ffffffffffffffff8311176103cf57818e528d855236888201116103cb57908d8f9281018587013752610369888b8b610570565b9094116103c75791816103bd9897969492600196946103866104b7565b983589520135908701528b8601528201356001600160801b031916908401528201526103b2828b6105c8565b52610126818a6105c8565b96949395966101ec565b8c80fd5b8e80fd5b634e487b7160e01b8f5260418d5260248ffd5b8b80fd5b8980fd5b8880fd5b855162461bcd60e51b81526020818701526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b6044820152606490fd5b60209061043899989697996104b7565b888152828981830152896060808b850152830152896080830152828c0101520197959496976101e1565b80fd5b9060206003198301126104b25760043567ffffffffffffffff928382116104b257806023830112156104b25781600401359384116104b25760248460051b830101116104b2576024019190565b600080fd5b6040519060a0820182811067ffffffffffffffff8211176104d757604052565b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff8211176104d757604052565b6040519190601f01601f1916820167ffffffffffffffff8111838210176104d757604052565b67ffffffffffffffff81116104d75760051b60200190565b600019811461055a5760010190565b634e487b7160e01b600052601160045260246000fd5b91908110156105b25760051b81013590601e19813603018212156104b257019081359167ffffffffffffffff83116104b25760200182360381136104b2579190565b634e487b7160e01b600052603260045260246000fd5b80518210156105b25760209160051b01019056fea26469706673582212204fc74abf2ebbd212f4647619b1d560a067ca3f126257b33aef0849f8847e043b64736f6c63430008140033",
  "devdoc": {
    "details": "In production, this would be replaced with proper TEE or ZKP verification",
    "kind": "dev",
    "methods": {
      "verifyPreimage(bytes[])": {
        "params": {
          "proofs": "Array of data hashes to verify"
        },
        "returns": {
          "outputs": "Array of verification results"
        }
      },
      "verifyTransferValidity(bytes[])": {
        "params": {
          "proofs": "Array of transfer proofs"
        },
        "returns": {
          "outputs": "Array of transfer verification results"
        }
      }
    },
    "title": "SimpleDreamVerifier - Simplified verifier for Dreamscape testing",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "verifyPreimage(bytes[])": {
        "notice": "Verify preimage of data (simplified for testing)"
      },
      "verifyTransferValidity(bytes[])": {
        "notice": "Verify data transfer validity (simplified for testing)"
      }
    },
    "notice": "This is a simplified verifier that accepts all proofs for testing purposes",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}